[{"path":"https://github.com/jeksterslab/semmcci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Ivan Jacob Agaloos Pesigan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(data)[1], 300) data[miss[1:100], \"X\"] <- NA data[miss[101:200], \"M\"] <- NA data[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan. Since missing values x, also set fixed.x = FALSE.","code":"fit <- sem(data = data, model = model, missing = \"fiml\", fixed.x = FALSE)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 500, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>              est     se   R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp        0.2286 0.0410 500  0.1231  0.1311  0.1503 0.3061 0.3322 0.3505 #> b         0.4895 0.0364 500  0.3820  0.3972  0.4175 0.5615 0.5802 0.5833 #> a         0.5039 0.0336 500  0.4169  0.4191  0.4392 0.5721 0.5893 0.6028 #> Y~~Y      1.0664 0.0519 500  0.9024  0.9358  0.9660 1.1657 1.1956 1.2016 #> M~~M      0.9896 0.0480 500  0.8603  0.8721  0.9013 1.0876 1.1083 1.1399 #> X~~X      1.0335 0.0497 500  0.9190  0.9273  0.9352 1.1285 1.1488 1.1802 #> Y~1       0.0090 0.0349 500 -0.0964 -0.0802 -0.0579 0.0764 0.0900 0.1142 #> M~1      -0.0126 0.0311 500 -0.1334 -0.0862 -0.0702 0.0501 0.0608 0.0920 #> X~1      -0.0294 0.0343 500 -0.1295 -0.1164 -0.1000 0.0423 0.0606 0.0732 #> indirect  0.2467 0.0247 500  0.1704  0.1835  0.1992 0.2905 0.3110 0.3175 #> direct    0.2286 0.0410 500  0.1231  0.1311  0.1503 0.3061 0.3322 0.3505 #> total     0.4753 0.0402 500  0.3643  0.3769  0.3952 0.5470 0.5743 0.6196"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = 500   ) ) #>         lhs op      rhs    label    est    se      z pvalue ci.lower ci.upper #> 1         Y  ~        X       cp  0.229 0.042  5.464  0.000    0.142    0.311 #> 2         Y  ~        M        b  0.490 0.035 13.929  0.000    0.420    0.556 #> 3         M  ~        X        a  0.504 0.034 14.816  0.000    0.435    0.566 #> 4         Y ~~        Y           1.066 0.050 21.463  0.000    0.968    1.158 #> 5         M ~~        M           0.990 0.049 20.313  0.000    0.888    1.086 #> 6         X ~~        X           1.033 0.049 20.970  0.000    0.944    1.140 #> 7         Y ~1                    0.009 0.036  0.246  0.806   -0.057    0.081 #> 8         M ~1                   -0.013 0.033 -0.379  0.705   -0.075    0.052 #> 9         X ~1                   -0.029 0.035 -0.847  0.397   -0.101    0.034 #> 10 indirect :=      a*b indirect  0.247 0.024 10.260  0.000    0.198    0.294 #> 11   direct :=       cp   direct  0.229 0.042  5.458  0.000    0.142    0.311 #> 12    total := cp+(a*b)    total  0.475 0.040 11.950  0.000    0.396    0.552"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"benchmark","dir":"Articles","previous_headings":"","what":"Benchmark","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark01 <- microbenchmark(   MC = {     fit <- sem(       data = data,       model = model,       missing = \"fiml\",       fixed.x = FALSE     )     MC(       fit,       R = R     )   },   NB = sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark01) #>   expr         min          lq        mean      median          uq         max #> 1   MC    163.3125    169.6686    175.2435    175.0372    181.5446    187.5984 #> 2   NB 122271.0439 122338.0385 122673.1182 122525.3458 122906.0940 123770.8051 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark01, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC   1.0000   1.0000   1.0000   1.0000   1.0000   1.0000    10 #> 2   NB 748.6936 721.0413 700.0151 699.9962 677.0021 659.7646    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"plot","dir":"Articles","previous_headings":"Benchmark","what":"Plot","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"ggplot2::autoplot(benchmark01) boxplot(benchmark01)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark02 <- microbenchmark(   MC = MC(     fit,     R = R   ),   NB = sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark02) #>   expr         min          lq       mean      median         uq         max #> 1   MC    162.7049    169.5008    179.098    180.7342    186.888    191.6872 #> 2   NB 124115.0821 124151.2276 124631.743 124538.5914 124985.809 125381.6363 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark02, unit = \"relative\") #>   expr      min       lq     mean   median       uq     max neval #> 1   MC   1.0000   1.0000   1.0000   1.0000   1.0000   1.000    10 #> 2   NB 762.8232 732.4521 695.8859 689.0703 668.7738 654.095    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"plot-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Plot","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"ggplot2::autoplot(benchmark02) boxplot(benchmark02)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 1: The Simple Mediation Model","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 1: The Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 1: The Simple Mediation Model","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2373 0.0368 20000 0.1194 0.1426 0.1647 0.3091 0.3308 0.3561 #> b        0.4817 0.0334 20000 0.3734 0.3979 0.4165 0.5471 0.5667 0.5930 #> a        0.5098 0.0308 20000 0.4094 0.4305 0.4491 0.5702 0.5886 0.6057 #> Y~~Y     1.0581 0.0473 20000 0.9029 0.9361 0.9647 1.1517 1.1809 1.2134 #> M~~M     0.9712 0.0438 20000 0.8350 0.8594 0.8851 1.0556 1.0841 1.1115 #> indirect 0.2456 0.0225 20000 0.1777 0.1914 0.2029 0.2914 0.3071 0.3227 #> direct   0.2373 0.0368 20000 0.1194 0.1426 0.1647 0.3091 0.3308 0.3561 #> total    0.4829 0.0359 20000 0.3687 0.3915 0.4130 0.5528 0.5746 0.6026"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.1930 0.0294 20000 0.0958 0.1171 0.1355 0.2496 0.2682 0.2904 #> b        0.4340 0.0274 20000 0.3395 0.3615 0.3801 0.4868 0.5028 0.5217 #> a        0.4602 0.0249 20000 0.3699 0.3931 0.4098 0.5075 0.5209 0.5379 #> Y~~Y     0.6972 0.0242 20000 0.6152 0.6320 0.6482 0.7430 0.7571 0.7733 #> M~~M     0.7882 0.0229 20000 0.7107 0.7286 0.7424 0.8320 0.8455 0.8632 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.1998 0.0170 20000 0.1473 0.1570 0.1674 0.2335 0.2444 0.2578 #> direct   0.1930 0.0294 20000 0.0958 0.1171 0.1355 0.2496 0.2682 0.2904 #> total    0.3928 0.0268 20000 0.3011 0.3220 0.3389 0.4439 0.4602 0.4785"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals---an-alternative-approach","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals - An Alternative Approach","title":"Example 1: The Simple Mediation Model","text":"example, confidence intervals standardized indirect effect generated specifying standardized indirect effect derived parameter using := operator. standardized indirect effect simple mediation model involves paths \\(\\) \\(b\\), standard deviations \\(X\\) \\(Y\\). given \\[\\begin{equation}   b   \\frac{s_X}{s_Y} \\end{equation}\\] \\[\\begin{equation}   s_X   =   \\sqrt{     s_{X}^{2}   } \\end{equation}\\] \\[\\begin{equation}   s_Y   =   \\sqrt{     c^{\\prime 2} s_{X}^{2}     + ^2 b^2 s_{X}^{2}     + b^2 s_{e_{M}}^{2}     + 2 c^{\\prime} b s_{X}^{2}     + s_{e_{Y}}^{2}   } \\end{equation}\\] \\(s_{e_{Y}}^{2}\\) \\(s_{e_{M}}^{2}\\) residual variances regression equations. standardized indirect effect can defined using := operator named parameters model. row indirect_std corresponds confidence intervals standardized indirect effect.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ s2_X * X   M ~~ s2_eM * M   Y ~~ s2_eY * Y   indirect_std := a * b * (sqrt(s2_X) / sqrt(cp^2 * s2_X + a^2 * b^2 * s2_X + b^2 * s2_eM + 2 * cp * b * a * s2_X + s2_eY)) \" fit <- sem(data = data, model = model, fixed.x = FALSE) MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>                 est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp           0.2373 0.0365 20000 0.1229 0.1448 0.1667 0.3100 0.3305 0.3565 #> b            0.4817 0.0333 20000 0.3695 0.3962 0.4163 0.5466 0.5661 0.5904 #> a            0.5098 0.0312 20000 0.4079 0.4289 0.4481 0.5704 0.5913 0.6150 #> s2_X         1.0040 0.0444 20000 0.8502 0.8896 0.9168 1.0900 1.1159 1.1465 #> s2_eM        0.9712 0.0432 20000 0.8289 0.8607 0.8868 1.0564 1.0823 1.1128 #> s2_eY        1.0581 0.0472 20000 0.9062 0.9352 0.9651 1.1526 1.1813 1.2074 #> indirect_std 0.1998 0.0171 20000 0.1472 0.1572 0.1666 0.2331 0.2455 0.2563"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 2: The Serial Mediation Model","text":"","code":"n <- 1000 X <- rnorm(n = n) M1 <- 0.50 * X + rnorm(n = n) M2 <- 0.15 * X + 0.50 * M1 + rnorm(n = n) Y <- 0.10 * X + 0.05 * M1 + 0.50 * M2 + rnorm(n = n) data <- data.frame(X, M1, M2, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 2: The Serial Mediation Model","text":"can define several indirect effects example: \\(X \\rightarrow M1 \\rightarrow M2 \\rightarrow Y\\) \\(X \\rightarrow M1 \\rightarrow M2\\) \\(X \\rightarrow M1 \\rightarrow Y\\) \\(M1 \\rightarrow M2 \\rightarrow Y\\) indirect effects defined using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b1 * M1 + b2 * M2   M2 ~ a2 * X + k * M1   M1 ~ a1 * X   # X -> M1 -> M2 -> Y   a1kb2 := a1 * k * b2   # X -> M1 -> M2   a1k := a1 * k   # X -> M1 -> Y   a2b2 := a2 * b2   # M1 -> M2 -> Y   kb2 := k * b2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 2: The Serial Mediation Model","text":"","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> cp     0.0868 0.0356 20000 -0.0281 -0.0054 0.0166 0.1561 0.1776 0.2020 #> b1     0.1190 0.0353 20000  0.0003  0.0295 0.0505 0.1880 0.2085 0.2364 #> b2     0.4809 0.0303 20000  0.3832  0.4025 0.4217 0.5400 0.5605 0.5807 #> a2     0.1373 0.0365 20000  0.0174  0.0432 0.0654 0.2096 0.2320 0.2573 #> k      0.4817 0.0332 20000  0.3761  0.3954 0.4168 0.5462 0.5680 0.5910 #> a1     0.5098 0.0311 20000  0.4076  0.4307 0.4493 0.5706 0.5895 0.6120 #> Y~~Y   0.9744 0.0435 20000  0.8320  0.8618 0.8883 1.0587 1.0860 1.1158 #> M2~~M2 1.0581 0.0473 20000  0.8970  0.9350 0.9644 1.1509 1.1794 1.2109 #> M1~~M1 0.9712 0.0438 20000  0.8245  0.8543 0.8840 1.0561 1.0827 1.1112 #> a1kb2  0.1181 0.0132 20000  0.0793  0.0870 0.0935 0.1452 0.1551 0.1677 #> a1k    0.2456 0.0226 20000  0.1751  0.1901 0.2027 0.2912 0.3065 0.3255 #> a2b2   0.0660 0.0180 20000  0.0084  0.0204 0.0311 0.1022 0.1140 0.1259 #> kb2    0.2317 0.0216 20000  0.1685  0.1784 0.1907 0.2750 0.2908 0.3056"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> cp     0.0723 0.0296 20000 -0.0241 -0.0046 0.0146 0.1302 0.1485 0.1684 #> b1     0.1098 0.0321 20000 -0.0002  0.0268 0.0467 0.1724 0.1925 0.2177 #> b2     0.4779 0.0274 20000  0.3880  0.4080 0.4239 0.5306 0.5454 0.5673 #> a2     0.1151 0.0307 20000  0.0116  0.0353 0.0548 0.1741 0.1937 0.2187 #> k      0.4470 0.0282 20000  0.3551  0.3725 0.3914 0.5022 0.5188 0.5369 #> a1     0.4602 0.0248 20000  0.3744  0.3939 0.4104 0.5077 0.5213 0.5360 #> Y~~Y   0.6725 0.0241 20000  0.5873  0.6083 0.6234 0.7186 0.7317 0.7433 #> M2~~M2 0.7396 0.0239 20000  0.6503  0.6756 0.6914 0.7847 0.7978 0.8104 #> M1~~M1 0.7882 0.0228 20000  0.7127  0.7282 0.7423 0.8316 0.8448 0.8598 #> X~~X   1.0000 0.0000 20000  1.0000  1.0000 1.0000 1.0000 1.0000 1.0000 #> a1kb2  0.0983 0.0103 20000  0.0669  0.0733 0.0790 0.1192 0.1269 0.1359 #> a1k    0.2057 0.0175 20000  0.1516  0.1618 0.1720 0.2408 0.2518 0.2653 #> a2b2   0.0550 0.0150 20000  0.0054  0.0167 0.0260 0.0847 0.0947 0.1059 #> kb2    0.2136 0.0186 20000  0.1551  0.1678 0.1777 0.2504 0.2626 0.2794"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 3: The Latent Variable Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals ab defined product b using := operator lavaan model syntax.","code":"model <- \"   X =~ x1 + x2 + x3   M =~ x4 + x5 + x6   Y =~ x7 + x8 + x9   M ~ a * X   Y ~ b * M   ab := a * b \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 3: The Latent Variable Simple Mediation Model","text":"can now fit model using sem() function lavaan using Holzinger Swineford (1939) data set.","code":"data <- lavaan::HolzingerSwineford1939 fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> X=~x2  0.5554 0.1053 20000 0.2206 0.2841 0.3476 0.7607 0.8236 0.8986 #> X=~x3  0.7045 0.1179 20000 0.3249 0.3962 0.4727 0.9354 1.0058 1.0911 #> M=~x5  1.1106 0.0648 20000 0.8994 0.9427 0.9826 1.2371 1.2777 1.3187 #> M=~x6  0.9268 0.0550 20000 0.7500 0.7843 0.8177 1.0350 1.0703 1.1057 #> Y=~x8  1.1482 0.1641 20000 0.6385 0.7294 0.8268 1.4678 1.5677 1.6753 #> Y=~x9  0.8854 0.1234 20000 0.4847 0.5687 0.6426 1.1247 1.2029 1.2973 #> a      0.5107 0.0961 20000 0.2070 0.2609 0.3201 0.6985 0.7623 0.8332 #> b      0.1884 0.0514 20000 0.0187 0.0539 0.0874 0.2889 0.3209 0.3491 #> x1~~x1 0.5320 0.1300 20000 0.1142 0.1986 0.2753 0.7845 0.8650 0.9639 #> x2~~x2 1.1269 0.1036 20000 0.7771 0.8639 0.9243 1.3304 1.3860 1.4641 #> x3~~x3 0.8647 0.0949 20000 0.5482 0.6200 0.6802 1.0550 1.1102 1.1654 #> x4~~x4 0.3714 0.0474 20000 0.2182 0.2512 0.2780 0.4649 0.4930 0.5216 #> x5~~x5 0.4519 0.0587 20000 0.2510 0.3006 0.3368 0.5669 0.6019 0.6505 #> x6~~x6 0.3551 0.0432 20000 0.2064 0.2430 0.2708 0.4405 0.4662 0.4983 #> x7~~x7 0.7309 0.0827 20000 0.4504 0.5156 0.5688 0.8911 0.9449 0.9923 #> x8~~x8 0.4257 0.0829 20000 0.1389 0.2108 0.2636 0.5886 0.6382 0.6987 #> x9~~x9 0.6605 0.0703 20000 0.4271 0.4769 0.5219 0.7981 0.8432 0.8898 #> X~~X   0.8264 0.1588 20000 0.3023 0.4201 0.5171 1.1392 1.2304 1.3297 #> M~~M   0.7638 0.0967 20000 0.4361 0.5187 0.5752 0.9541 1.0159 1.0788 #> Y~~Y   0.4175 0.0893 20000 0.1372 0.1903 0.2433 0.5953 0.6483 0.7109 #> ab     0.0962 0.0318 20000 0.0096 0.0259 0.0395 0.1644 0.1898 0.2195"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> X=~x2  0.4295 0.0613 20000 0.1981 0.2518 0.2973 0.5393 0.5699 0.6031 #> X=~x3  0.5672 0.0595 20000 0.3240 0.3873 0.4330 0.6673 0.6962 0.7378 #> M=~x5  0.8531 0.0227 20000 0.7700 0.7882 0.8048 0.8931 0.9052 0.9181 #> M=~x6  0.8385 0.0239 20000 0.7460 0.7697 0.7881 0.8807 0.8943 0.9090 #> Y=~x8  0.7639 0.0554 20000 0.5374 0.5956 0.6431 0.8588 0.8863 0.9156 #> Y=~x9  0.5910 0.0550 20000 0.3928 0.4362 0.4737 0.6895 0.7217 0.7514 #> a      0.4691 0.0651 20000 0.2144 0.2762 0.3278 0.5843 0.6204 0.6576 #> b      0.2772 0.0698 20000 0.0291 0.0942 0.1395 0.4138 0.4577 0.5108 #> x1~~x1 0.3917 0.0966 20000 0.0900 0.1492 0.2091 0.5868 0.6622 0.7388 #> x2~~x2 0.8155 0.0515 20000 0.6363 0.6752 0.7092 0.9116 0.9366 0.9608 #> x3~~x3 0.6783 0.0657 20000 0.4556 0.5152 0.5547 0.8125 0.8500 0.8950 #> x4~~x4 0.2750 0.0388 20000 0.1613 0.1842 0.2041 0.3563 0.3845 0.4264 #> x5~~x5 0.2722 0.0385 20000 0.1571 0.1806 0.2024 0.3523 0.3788 0.4071 #> x6~~x6 0.2969 0.0399 20000 0.1738 0.2002 0.2243 0.3788 0.4075 0.4435 #> x7~~x7 0.6177 0.0661 20000 0.4227 0.4564 0.4918 0.7544 0.8006 0.8573 #> x8~~x8 0.4165 0.0831 20000 0.1617 0.2145 0.2625 0.5864 0.6453 0.7112 #> x9~~x9 0.6507 0.0641 20000 0.4354 0.4792 0.5246 0.7756 0.8098 0.8457 #> X~~X   1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> M~~M   0.7799 0.0596 20000 0.5676 0.6151 0.6586 0.8925 0.9237 0.9541 #> Y~~Y   0.9231 0.0393 20000 0.7391 0.7905 0.8288 0.9805 0.9911 0.9992 #> ab     0.1301 0.0380 20000 0.0134 0.0386 0.0592 0.2072 0.2370 0.2748"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4: The Simple Mediation Model with Missing Data","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(data)[1], 300) data[miss[1:100], \"X\"] <- NA data[miss[101:200], \"M\"] <- NA data[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4: The Simple Mediation Model with Missing Data","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4: The Simple Mediation Model with Missing Data","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan. Since missing values x, also set fixed.x = FALSE.","code":"fit <- sem(data = data, model = model, missing = \"fiml\", fixed.x = FALSE)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4: The Simple Mediation Model with Missing Data","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>              est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp        0.2286 0.0404 20000  0.0991  0.1246  0.1488 0.3074 0.3315 0.3590 #> b         0.4895 0.0365 20000  0.3720  0.3979  0.4181 0.5611 0.5821 0.6118 #> a         0.5039 0.0332 20000  0.3958  0.4184  0.4388 0.5689 0.5887 0.6077 #> Y~~Y      1.0664 0.0513 20000  0.8988  0.9337  0.9653 1.1677 1.1998 1.2341 #> M~~M      0.9896 0.0477 20000  0.8418  0.8670  0.8961 1.0820 1.1115 1.1435 #> X~~X      1.0335 0.0484 20000  0.8767  0.9106  0.9397 1.1278 1.1584 1.1946 #> Y~1       0.0090 0.0348 20000 -0.1048 -0.0810 -0.0597 0.0760 0.0977 0.1226 #> M~1      -0.0126 0.0333 20000 -0.1251 -0.0990 -0.0785 0.0529 0.0725 0.0940 #> X~1      -0.0294 0.0338 20000 -0.1422 -0.1196 -0.0966 0.0363 0.0571 0.0787 #> indirect  0.2467 0.0242 20000  0.1736  0.1885  0.2007 0.2959 0.3132 0.3305 #> direct    0.2286 0.0404 20000  0.0991  0.1246  0.1488 0.3074 0.3315 0.3590 #> total     0.4753 0.0383 20000  0.3526  0.3778  0.4005 0.5501 0.5734 0.6030"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4: The Simple Mediation Model with Missing Data","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, missing = \"fiml\", fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.1875 0.0329 20000 0.0816 0.1018 0.1235 0.2519 0.2711 0.2948 #> b        0.4418 0.0304 20000 0.3342 0.3617 0.3810 0.5012 0.5186 0.5368 #> a        0.4578 0.0272 20000 0.3668 0.3861 0.4033 0.5106 0.5263 0.5446 #> Y~~Y     0.6938 0.0263 20000 0.6040 0.6224 0.6408 0.7438 0.7592 0.7750 #> M~~M     0.7904 0.0249 20000 0.7034 0.7230 0.7393 0.8373 0.8509 0.8654 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.2023 0.0186 20000 0.1451 0.1550 0.1666 0.2397 0.2532 0.2659 #> direct   0.1875 0.0329 20000 0.0816 0.1018 0.1235 0.2519 0.2711 0.2948 #> total    0.3897 0.0291 20000 0.2925 0.3127 0.3317 0.4455 0.4628 0.4841"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 5: Standardized Regression Coefficients","text":"","code":"n <- 1000 X1 <- rnorm(n = n) X2 <- 0.50 * X1 + rnorm(n = n) Y <- 0.25 * X1 + 0.50 * X2 + rnorm(n = n) data <- data.frame(X1, X2, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 5: Standardized Regression Coefficients","text":"regress Y X1 X2.","code":"model <- \"   Y ~ X1 + X2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 5: Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE, likelihood = \"wishart\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 5: Standardized Regression Coefficients","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> Y~X1   0.2373 0.0368 20000 0.1194 0.1426 0.1646 0.3091 0.3308 0.3562 #> Y~X2   0.4817 0.0334 20000 0.3734 0.3978 0.4165 0.5472 0.5668 0.5931 #> Y~~Y   1.0592 0.0470 20000 0.9062 0.9384 0.9667 1.1513 1.1793 1.2054 #> X1~~X1 1.0050 0.0450 20000 0.8575 0.8891 0.9162 1.0939 1.1217 1.1526 #> X1~~X2 0.5124 0.0389 20000 0.3812 0.4123 0.4358 0.5883 0.6107 0.6380 #> X2~~X2 1.2334 0.0553 20000 1.0518 1.0917 1.1244 1.3398 1.3753 1.4095"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 5: Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> Y~X1   0.1930 0.0293 20000 0.0978 0.1172 0.1354 0.2498 0.2684 0.2887 #> Y~X2   0.4340 0.0275 20000 0.3413 0.3624 0.3794 0.4871 0.5035 0.5184 #> Y~~Y   0.6972 0.0241 20000 0.6178 0.6331 0.6489 0.7437 0.7587 0.7757 #> X1~~X1 1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> X1~~X2 0.4602 0.0250 20000 0.3766 0.3928 0.4103 0.5084 0.5227 0.5419 #> X2~~X2 1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000"},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"the-monte-carlo-method","dir":"Articles","previous_headings":"","what":"The Monte Carlo Method","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) generated multivariate normal distribution using parameter estimates \\(\\hat{\\boldsymbol{\\theta}}\\) sampling variance-covariance matrix \\(\\mathrm{Var} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\). \\[\\begin{equation}     \\hat{\\boldsymbol{\\theta}}^{\\ast}     \\sim     \\mathcal{N}     \\left(     \\hat{\\boldsymbol{\\theta}},     \\mathrm{Var}     \\left(     \\hat{\\boldsymbol{\\theta}}     \\right)     \\right) \\end{equation}\\] Confidence intervals defined parameters \\(g \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution, \\(\\alpha\\) significance level.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"semmcci","dir":"Articles","previous_headings":"","what":"semmcci","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package two main functions, namely, MC() MCStd(). output lavaan passed first argument MC() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCStd() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99–128. https://doi.org/10.1207/s15327906mbr3901_4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. https://doi.org/10.1080/19312458.2012.679848 Tofighi, D., & Kelley, K. (2019). Indirect effects sequential mediation models: Evaluating methods hypothesis testing confidence interval formation. Multivariate Behavioral Research, 55(2), 188–210. https://doi.org/10.1080/00273171.2019.1618545 Tofighi, D., & MacKinnon, D. P. (2015). Monte Carlo confidence intervals complex functions indirect effects. Structural Equation Modeling: Multidisciplinary Journal, 23(2), 194–205. https://doi.org/10.1080/10705511.2015.1057284","code":""},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder. Shu Fai Cheung. Contributor.","code":""},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . (2022). semmcci: Monte Carlo Confidence Intervals Structural Equation Modeling. R package version 0.9.1","code":"@Manual{,   address = {University of Macau},   author = {Ivan Jacob Agaloos Pesigan},   title = {semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling},   year = {2022},   note = {R package version 0.9.1}, }"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"semmcci","dir":"","previous_headings":"","what":"Monte Carlo Confidence Intervals in Structural Equation Modeling","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Ivan Jacob Agaloos Pesigan 2022-09-17","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated obtaining percentiles corresponding 100(1 - α)% generated sampling distribution, α significance level. Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package two main functions, namely, MC() MCStd(). output lavaan passed first argument MC() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCStd() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"common application Monte Carlo method generate confidence intervals indirect effect. simple mediation model, variable X effect variable Y, mediating variable M. mediating indirect effect product path coefficients fitted model.","code":"library(semmcci) library(lavaan)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"data","dir":"","previous_headings":"Example","what":"Data","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-specification","dir":"","previous_headings":"Example","what":"Model Specification","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-fitting","dir":"","previous_headings":"Example","what":"Model Fitting","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2373 0.0368 20000 0.1194 0.1426 0.1647 0.3091 0.3308 0.3561 #> b        0.4817 0.0334 20000 0.3734 0.3979 0.4165 0.5471 0.5667 0.5930 #> a        0.5098 0.0308 20000 0.4094 0.4305 0.4491 0.5702 0.5886 0.6057 #> Y~~Y     1.0581 0.0473 20000 0.9029 0.9361 0.9647 1.1517 1.1809 1.2134 #> M~~M     0.9712 0.0438 20000 0.8350 0.8594 0.8851 1.0556 1.0841 1.1115 #> indirect 0.2456 0.0225 20000 0.1777 0.1914 0.2029 0.2914 0.3071 0.3227 #> direct   0.2373 0.0368 20000 0.1194 0.1426 0.1647 0.3091 0.3308 0.3561 #> total    0.4829 0.0359 20000 0.3687 0.3915 0.4130 0.5528 0.5746 0.6026"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"standardized-monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Standardized Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.1930 0.0294 20000 0.0958 0.1171 0.1355 0.2496 0.2682 0.2904 #> b        0.4340 0.0274 20000 0.3395 0.3615 0.3801 0.4868 0.5028 0.5217 #> a        0.4602 0.0249 20000 0.3699 0.3931 0.4098 0.5075 0.5209 0.5379 #> Y~~Y     0.6972 0.0242 20000 0.6152 0.6320 0.6482 0.7430 0.7571 0.7733 #> M~~M     0.7882 0.0229 20000 0.7107 0.7286 0.7424 0.8320 0.8455 0.8632 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.1998 0.0170 20000 0.1473 0.1570 0.1674 0.2335 0.2444 0.2578 #> direct   0.1930 0.0294 20000 0.0958 0.1171 0.1355 0.2496 0.2682 0.2904 #> total    0.3928 0.0268 20000 0.3011 0.3220 0.3389 0.4439 0.4602 0.4785"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals — MC","title":"Monte Carlo Confidence Intervals — MC","text":"Calculates Monte Carlo confidence intervals free defined parameters","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"MC(object, R = 20000L, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals — MC","text":"object object class lavaan. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level. Default value alpha = c(0.001, 0.01, 0.05).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals — MC","text":"Returns object class semmcci list following elements: R Number Monte Carlo replications. alpha Significance level specified. lavaan lavaan object. mvn Method used generate multivariate normal random variates. thetahat Parameter estimates. thetahatstar Sampling distribution parameter estimates. ci Confidence intervals. list element ci matrix following columns: est Parameter estimates. se Standard errors square root diagonals Monte Carlo sampling distribution parameter estimates. R Number valid Monte Carlo replications. ... Percentiles correspond confidence intervals defined alpha. Note rows ci correspond model parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals — MC","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals — MC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model)  # Monte Carlo -------------------------------------------------------------- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) ) #> Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2799 0.0288 100 0.2137 0.2221 0.2361 0.3442 0.3526 0.3528 #> b    0.4975 0.0293 100 0.4278 0.4292 0.4360 0.5526 0.5754 0.5794 #> a    0.4697 0.0279 100 0.3962 0.3971 0.4130 0.5207 0.5277 0.5283 #> y~~y 0.8998 0.0384 100 0.7947 0.8077 0.8290 0.9577 0.9616 0.9627 #> m~~m 0.9809 0.0448 100 0.8911 0.8988 0.9129 1.0782 1.1003 1.1074 #> ab   0.2337 0.0180 100 0.1802 0.1822 0.1939 0.2603 0.2783 0.2789"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals — MCStd","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Calculates standardized Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"MCStd(object, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"object object class semmcci. Output MC() function. alpha Numeric vector. Significance level. Default value alpha = c(0.001, 0.01, 0.05).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Returns object class semmcci_std list following elements: R Number Monte Carlo replications. alpha Significance level specified. lavaan lavaan object. mvn Method used generate multivariate normal random variates. thetahat Parameter estimates. thetahatstar Sampling distribution parameter estimates. ci Confidence intervals. thetahat_std Standardized parameter estimates. thetahatstar_std Standardized sampling distribution parameter estimates. ci_std Standardized confidence intervals. list element ci_std matrix following columns: est Standardized parameter estimates. se Standard errors square root diagonals standardized Monte Carlo sampling distribution parameter estimates. R Number valid Monte Carlo replications. ... Percentiles correspond confidence intervals defined alpha. Note rows ci_std correspond standardized model parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"empirical sampling distribution parameter estimates argument object standardized, , randomly generated vector parameters standardized. Defined parameters computed standardized component parameters. Confidence intervals generated using standardized empirical sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model, fixed.x = FALSE)  # Monte Carlo -------------------------------------------------------------- output <- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) )  # Standardized Monte Carlo ------------------------------------------------- MCStd(output) #> Standardized Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2266 0.0288 100 0.1591 0.1607 0.1726 0.2815 0.2863 0.2894 #> b    0.4522 0.0265 100 0.3851 0.3901 0.4006 0.5001 0.5037 0.5044 #> a    0.4416 0.0273 100 0.3474 0.3663 0.3939 0.4891 0.4948 0.4973 #> y~~y 0.6537 0.0242 100 0.6052 0.6062 0.6158 0.7046 0.7142 0.7147 #> m~~m 0.8050 0.0239 100 0.7527 0.7551 0.7608 0.8448 0.8654 0.8792 #> x~~x 1.0000 0.0000 100 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> ab   0.1997 0.0183 100 0.1475 0.1537 0.1680 0.2381 0.2413 0.2429"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci — print.semmcci","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Print Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"# S3 method for semmcci print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci — print.semmcci","text":"x object class semmcci. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model)  # Monte Carlo -------------------------------------------------------------- print(   MC(     fit,     R = 100L, # use a large value e.g., 20000L for actual research     alpha = c(0.001, 0.01, 0.05)   ) ) #> Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.3068 0.0312 100 0.2235 0.2316 0.2492 0.3632 0.3657 0.3661 #> b    0.4566 0.0286 100 0.3721 0.3825 0.4002 0.5092 0.5236 0.5309 #> a    0.4819 0.0274 100 0.4079 0.4161 0.4305 0.5335 0.5418 0.5440 #> y~~y 0.9144 0.0408 100 0.8180 0.8254 0.8461 0.9953 1.0372 1.0451 #> m~~m 0.9916 0.0426 100 0.8811 0.8933 0.9081 1.0798 1.0892 1.0919 #> ab   0.2200 0.0190 100 0.1714 0.1772 0.1860 0.2587 0.2675 0.2681"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci_std — print.semmcci_std","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Print Method Object Class semmcci_std","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"","code":"# S3 method for semmcci_std print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"x object class semmcci_std. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model, fixed.x = FALSE)  # Monte Carlo -------------------------------------------------------------- output <- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) )  # Standardized Monte Carlo ------------------------------------------------- print(MCStd(output)) #> Standardized Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2171 0.0260 100 0.1513 0.1532 0.1591 0.2550 0.2677 0.2682 #> b    0.4467 0.0271 100 0.3803 0.3869 0.4014 0.4995 0.5168 0.5302 #> a    0.4538 0.0230 100 0.4069 0.4114 0.4197 0.5038 0.5085 0.5103 #> y~~y 0.6654 0.0221 100 0.6141 0.6148 0.6180 0.7026 0.7072 0.7106 #> m~~m 0.7941 0.0210 100 0.7396 0.7414 0.7462 0.8239 0.8307 0.8344 #> x~~x 1.0000 0.0000 100 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> ab   0.2027 0.0155 100 0.1717 0.1729 0.1754 0.2363 0.2432 0.2434"},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package 'lavaan' can generated using 'semmcci' package. 'semmcci' two main functions, namely, MC() MCStd(). output 'lavaan' passed first argument MC() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCStd() function. Preacher Selig (2012) doi:10.1080/19312458.2012.679848 .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder] contributors: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) [contributor]","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.2","text":"Random variates multivatiate normal distribution generated using Cholesky decomposition sampling variance-covariance matrix. Eigen decomposition used Cholesky decomposition fails. NA returned calculation defined parameter fails MC(). NA returned standardization fails MCStd().","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-101","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.1","title":"semmcci 1.0.1","text":"CRAN release: 2022-09-13","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.1","text":"Added reference DESCRIPTION file.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"major-1-0-0","dir":"Changelog","previous_headings":"","what":"Major","title":"semmcci 1.0.0","text":"Initial CRAN submission.","code":""}]

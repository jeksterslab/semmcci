[{"path":"https://github.com/jeksterslab/semmcci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Ivan Jacob Agaloos Pesigan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(data)[1], 300) data[miss[1:100], \"X\"] <- NA data[miss[101:200], \"M\"] <- NA data[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan. Since missing values x, also set fixed.x = FALSE.","code":"fit <- sem(data = data, model = model, missing = \"fiml\", fixed.x = FALSE)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = R, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>              est     se    R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp        0.2286 0.0404 5000  0.0967  0.1235  0.1494 0.3077 0.3328 0.3652 #> b         0.4895 0.0358 5000  0.3742  0.3987  0.4197 0.5594 0.5826 0.6072 #> a         0.5039 0.0337 5000  0.3949  0.4168  0.4380 0.5690 0.5900 0.6134 #> Y~~Y      1.0664 0.0519 5000  0.9051  0.9348  0.9654 1.1668 1.1982 1.2311 #> M~~M      0.9896 0.0472 5000  0.8453  0.8741  0.8951 1.0811 1.1113 1.1421 #> X~~X      1.0335 0.0492 5000  0.8616  0.9046  0.9357 1.1306 1.1605 1.1984 #> Y~1       0.0090 0.0358 5000 -0.1158 -0.0810 -0.0603 0.0784 0.1041 0.1284 #> M~1      -0.0126 0.0329 5000 -0.1144 -0.0969 -0.0751 0.0513 0.0698 0.0871 #> X~1      -0.0294 0.0340 5000 -0.1308 -0.1142 -0.0946 0.0375 0.0572 0.0804 #> indirect  0.2467 0.0241 5000  0.1748  0.1858  0.2005 0.2951 0.3101 0.3260 #> direct    0.2286 0.0404 5000  0.0967  0.1235  0.1494 0.3077 0.3328 0.3652 #> total     0.4753 0.0381 5000  0.3429  0.3768  0.4019 0.5496 0.5744 0.5983"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = B   ) ) #>         lhs op      rhs    label    est    se      z pvalue ci.lower ci.upper #> 1         Y  ~        X       cp  0.229 0.040  5.784  0.000    0.150    0.305 #> 2         Y  ~        M        b  0.490 0.036 13.599  0.000    0.420    0.561 #> 3         M  ~        X        a  0.504 0.035 14.543  0.000    0.435    0.571 #> 4         Y ~~        Y           1.066 0.052 20.599  0.000    0.967    1.170 #> 5         M ~~        M           0.990 0.047 20.942  0.000    0.895    1.081 #> 6         X ~~        X           1.033 0.049 21.101  0.000    0.937    1.133 #> 7         Y ~1                    0.009 0.035  0.254  0.800   -0.060    0.077 #> 8         M ~1                   -0.013 0.033 -0.383  0.702   -0.079    0.051 #> 9         X ~1                   -0.029 0.033 -0.878  0.380   -0.094    0.037 #> 10 indirect :=      a*b indirect  0.247 0.025 10.055  0.000    0.201    0.297 #> 11   direct :=       cp   direct  0.229 0.040  5.783  0.000    0.150    0.305 #> 12    total := cp+(a*b)    total  0.475 0.038 12.655  0.000    0.401    0.549"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"benchmark","dir":"Articles","previous_headings":"","what":"Benchmark","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark01 <- microbenchmark(   MC = {     fit <- sem(       data = data,       model = model,       missing = \"fiml\",       fixed.x = FALSE     )     MC(       fit,       R = R     )   },   NB = sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark01) #>   expr         min          lq        mean      median          uq         max #> 1   MC    110.9642    113.8126    118.9232    114.7464    128.4514    128.9179 #> 2   NB 117333.9430 117632.0586 117886.9450 117860.4669 118090.9924 118618.9256 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark01, unit = \"relative\") #>   expr      min       lq    mean   median       uq      max neval #> 1   MC    1.000    1.000   1.000    1.000   1.0000   1.0000    10 #> 2   NB 1057.404 1033.559 991.286 1027.139 919.3439 920.1119    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"plot","dir":"Articles","previous_headings":"Benchmark","what":"Plot","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"ggplot2::autoplot(benchmark01) boxplot(benchmark01)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark02 <- microbenchmark(   MC = MC(     fit,     R = R   ),   NB = sem(     data = data,     model = model,     missing = \"fiml\",     fixed.x = FALSE,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark02) #>   expr         min          lq        mean      median          uq        max #> 1   MC    109.1748    110.2007    118.3844    114.4791    127.3118    133.073 #> 2   NB 117849.1687 118414.1438 118548.9545 118573.6810 118801.8727 119071.964 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark02, unit = \"relative\") #>   expr      min       lq    mean   median       uq      max neval #> 1   MC    1.000    1.000    1.00    1.000   1.0000   1.0000    10 #> 2   NB 1079.454 1074.532 1001.39 1035.767 933.1572 894.7871    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark.html","id":"plot-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Plot","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"ggplot2::autoplot(benchmark02) boxplot(benchmark02)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 1: The Simple Mediation Model","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 1: The Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 1: The Simple Mediation Model","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2373 0.0365 20000 0.1212 0.1436 0.1663 0.3089 0.3300 0.3515 #> b        0.4817 0.0328 20000 0.3746 0.3977 0.4181 0.5470 0.5668 0.5836 #> a        0.5098 0.0311 20000 0.4078 0.4296 0.4484 0.5713 0.5905 0.6119 #> Y~~Y     1.0581 0.0476 20000 0.9044 0.9372 0.9653 1.1522 1.1808 1.2107 #> M~~M     0.9712 0.0438 20000 0.8218 0.8576 0.8859 1.0572 1.0858 1.1174 #> indirect 0.2456 0.0226 20000 0.1728 0.1915 0.2030 0.2914 0.3073 0.3242 #> direct   0.2373 0.0365 20000 0.1212 0.1436 0.1663 0.3089 0.3300 0.3515 #> total    0.4829 0.0359 20000 0.3633 0.3899 0.4137 0.5539 0.5738 0.5997"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.1930 0.0296 20000 0.0896 0.1147 0.1339 0.2501 0.2682 0.2890 #> b        0.4340 0.0276 20000 0.3419 0.3626 0.3794 0.4875 0.5049 0.5235 #> a        0.4602 0.0251 20000 0.3750 0.3945 0.4102 0.5091 0.5233 0.5392 #> Y~~Y     0.6972 0.0242 20000 0.6131 0.6322 0.6481 0.7431 0.7573 0.7768 #> M~~M     0.7882 0.0231 20000 0.7093 0.7262 0.7408 0.8317 0.8444 0.8594 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.1998 0.0170 20000 0.1453 0.1576 0.1671 0.2340 0.2450 0.2573 #> direct   0.1930 0.0296 20000 0.0896 0.1147 0.1339 0.2501 0.2682 0.2890 #> total    0.3928 0.0271 20000 0.3038 0.3214 0.3383 0.4444 0.4604 0.4809"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals---an-alternative-approach","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals - An Alternative Approach","title":"Example 1: The Simple Mediation Model","text":"example, confidence intervals standardized indirect effect generated specifying standardized indirect effect derived parameter using := operator. standardized indirect effect simple mediation model involves paths \\(\\) \\(b\\), standard deviations \\(X\\) \\(Y\\). given \\[\\begin{equation}   b   \\frac{s_X}{s_Y} \\end{equation}\\] \\[\\begin{equation}   s_X   =   \\sqrt{     s_{X}^{2}   } \\end{equation}\\] \\[\\begin{equation}   s_Y   =   \\sqrt{     c^{\\prime 2} s_{X}^{2}     + ^2 b^2 s_{X}^{2}     + b^2 s_{e_{M}}^{2}     + 2 c^{\\prime} b s_{X}^{2}     + s_{e_{Y}}^{2}   } \\end{equation}\\] \\(s_{e_{Y}}^{2}\\) \\(s_{e_{M}}^{2}\\) residual variances regression equations. standardized indirect effect can defined using := operator named parameters model. row indirect_std corresponds confidence intervals standardized indirect effect.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ s2_X * X   M ~~ s2_eM * M   Y ~~ s2_eY * Y   indirect_std := a * b * (sqrt(s2_X) / sqrt(cp^2 * s2_X + a^2 * b^2 * s2_X + b^2 * s2_eM + 2 * cp * b * a * s2_X + s2_eY)) \" fit <- sem(data = data, model = model, fixed.x = FALSE) MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>                 est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp           0.2373 0.0363 20000 0.1146 0.1426 0.1660 0.3079 0.3300 0.3581 #> b            0.4817 0.0326 20000 0.3731 0.3993 0.4185 0.5463 0.5670 0.5889 #> a            0.5098 0.0309 20000 0.4084 0.4303 0.4489 0.5703 0.5890 0.6117 #> s2_X         1.0040 0.0453 20000 0.8522 0.8874 0.9153 1.0924 1.1204 1.1538 #> s2_eM        0.9712 0.0436 20000 0.8244 0.8575 0.8867 1.0574 1.0842 1.1136 #> s2_eY        1.0581 0.0472 20000 0.9039 0.9375 0.9641 1.1495 1.1780 1.2062 #> indirect_std 0.1998 0.0169 20000 0.1480 0.1573 0.1675 0.2339 0.2454 0.2561"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 2: The Serial Mediation Model","text":"","code":"n <- 1000 X <- rnorm(n = n) M1 <- 0.50 * X + rnorm(n = n) M2 <- 0.15 * X + 0.50 * M1 + rnorm(n = n) Y <- 0.10 * X + 0.05 * M1 + 0.50 * M2 + rnorm(n = n) data <- data.frame(X, M1, M2, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 2: The Serial Mediation Model","text":"can define several indirect effects example: \\(X \\rightarrow M1 \\rightarrow M2 \\rightarrow Y\\) \\(X \\rightarrow M1 \\rightarrow M2\\) \\(X \\rightarrow M1 \\rightarrow Y\\) \\(M1 \\rightarrow M2 \\rightarrow Y\\) indirect effects defined using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b1 * M1 + b2 * M2   M2 ~ a2 * X + k * M1   M1 ~ a1 * X   # X -> M1 -> M2 -> Y   a1kb2 := a1 * k * b2   # X -> M1 -> M2   a1k := a1 * k   # X -> M1 -> Y   a2b2 := a2 * b2   # M1 -> M2 -> Y   kb2 := k * b2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 2: The Serial Mediation Model","text":"","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> cp     0.0868 0.0355 20000 -0.0298 -0.0053 0.0169 0.1554 0.1778 0.2017 #> b1     0.1190 0.0350 20000  0.0087  0.0290 0.0513 0.1880 0.2095 0.2301 #> b2     0.4809 0.0305 20000  0.3807  0.4022 0.4215 0.5404 0.5587 0.5832 #> a2     0.1373 0.0364 20000  0.0152  0.0447 0.0660 0.2092 0.2325 0.2580 #> k      0.4817 0.0331 20000  0.3739  0.3974 0.4166 0.5469 0.5672 0.5883 #> a1     0.5098 0.0310 20000  0.4082  0.4295 0.4483 0.5700 0.5895 0.6108 #> Y~~Y   0.9744 0.0439 20000  0.8263  0.8606 0.8885 1.0603 1.0885 1.1184 #> M2~~M2 1.0581 0.0477 20000  0.9042  0.9346 0.9641 1.1510 1.1797 1.2124 #> M1~~M1 0.9712 0.0431 20000  0.8373  0.8610 0.8872 1.0563 1.0825 1.1114 #> a1kb2  0.1181 0.0132 20000  0.0795  0.0860 0.0931 0.1452 0.1543 0.1631 #> a1k    0.2456 0.0226 20000  0.1773  0.1894 0.2022 0.2908 0.3057 0.3202 #> a2b2   0.0660 0.0180 20000  0.0068  0.0210 0.0315 0.1022 0.1137 0.1269 #> kb2    0.2317 0.0217 20000  0.1654  0.1789 0.1902 0.2751 0.2897 0.3110"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> cp     0.0723 0.0291 20000 -0.0227 -0.0036 0.0148 0.1291 0.1455 0.1645 #> b1     0.1098 0.0317 20000  0.0073  0.0298 0.0487 0.1720 0.1906 0.2176 #> b2     0.4779 0.0273 20000  0.3866  0.4049 0.4231 0.5300 0.5469 0.5640 #> a2     0.1151 0.0306 20000  0.0133  0.0339 0.0545 0.1746 0.1932 0.2160 #> k      0.4470 0.0283 20000  0.3453  0.3734 0.3914 0.5019 0.5174 0.5368 #> a1     0.4602 0.0249 20000  0.3764  0.3951 0.4103 0.5087 0.5238 0.5428 #> Y~~Y   0.6725 0.0243 20000  0.5910  0.6091 0.6236 0.7181 0.7326 0.7464 #> M2~~M2 0.7396 0.0239 20000  0.6543  0.6753 0.6913 0.7840 0.7974 0.8117 #> M1~~M1 0.7882 0.0229 20000  0.7054  0.7257 0.7412 0.8317 0.8439 0.8583 #> X~~X   1.0000 0.0000 20000  1.0000  1.0000 1.0000 1.0000 1.0000 1.0000 #> a1kb2  0.0983 0.0104 20000  0.0673  0.0729 0.0788 0.1195 0.1271 0.1364 #> a1k    0.2057 0.0177 20000  0.1501  0.1620 0.1718 0.2409 0.2529 0.2684 #> a2b2   0.0550 0.0149 20000  0.0062  0.0160 0.0259 0.0844 0.0946 0.1045 #> kb2    0.2136 0.0187 20000  0.1551  0.1672 0.1777 0.2516 0.2627 0.2769"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 3: The Latent Variable Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals ab defined product b using := operator lavaan model syntax.","code":"model <- \"   X =~ x1 + x2 + x3   M =~ x4 + x5 + x6   Y =~ x7 + x8 + x9   M ~ a * X   Y ~ b * M   ab := a * b \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 3: The Latent Variable Simple Mediation Model","text":"can now fit model using sem() function lavaan using Holzinger Swineford (1939) data set.","code":"data <- lavaan::HolzingerSwineford1939 fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> X=~x2  0.5554 0.1043 20000 0.2060 0.2879 0.3542 0.7594 0.8188 0.8805 #> X=~x3  0.7045 0.1172 20000 0.3329 0.4087 0.4743 0.9338 1.0108 1.0818 #> M=~x5  1.1106 0.0648 20000 0.8935 0.9417 0.9839 1.2390 1.2760 1.3211 #> M=~x6  0.9268 0.0554 20000 0.7477 0.7843 0.8185 1.0372 1.0687 1.1062 #> Y=~x8  1.1482 0.1644 20000 0.6201 0.7187 0.8247 1.4680 1.5729 1.6793 #> Y=~x9  0.8854 0.1241 20000 0.4805 0.5535 0.6425 1.1274 1.2060 1.2721 #> a      0.5107 0.0954 20000 0.2027 0.2718 0.3257 0.6987 0.7587 0.8183 #> b      0.1884 0.0517 20000 0.0078 0.0557 0.0878 0.2891 0.3240 0.3576 #> x1~~x1 0.5320 0.1299 20000 0.1110 0.1979 0.2763 0.7884 0.8720 0.9661 #> x2~~x2 1.1269 0.1033 20000 0.7807 0.8602 0.9252 1.3283 1.3878 1.4538 #> x3~~x3 0.8647 0.0951 20000 0.5633 0.6206 0.6763 1.0504 1.1053 1.1623 #> x4~~x4 0.3714 0.0476 20000 0.2212 0.2500 0.2783 0.4651 0.4966 0.5316 #> x5~~x5 0.4519 0.0586 20000 0.2670 0.3019 0.3383 0.5678 0.6035 0.6397 #> x6~~x6 0.3551 0.0427 20000 0.2172 0.2456 0.2709 0.4381 0.4644 0.4972 #> x7~~x7 0.7309 0.0841 20000 0.4524 0.5099 0.5654 0.8951 0.9520 1.0084 #> x8~~x8 0.4257 0.0829 20000 0.1567 0.2122 0.2650 0.5885 0.6385 0.7076 #> x9~~x9 0.6605 0.0709 20000 0.4332 0.4796 0.5216 0.7987 0.8478 0.9040 #> X~~X   0.8264 0.1590 20000 0.3187 0.4207 0.5163 1.1380 1.2474 1.3569 #> M~~M   0.7638 0.0972 20000 0.4527 0.5123 0.5728 0.9553 1.0114 1.0783 #> Y~~Y   0.4175 0.0890 20000 0.1170 0.1876 0.2430 0.5887 0.6468 0.7064 #> ab     0.0962 0.0319 20000 0.0036 0.0261 0.0398 0.1642 0.1930 0.2256"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd().","code":"fit <- sem(data = data, model = model) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> X=~x2  0.4295 0.0613 20000 0.1977 0.2528 0.2966 0.5391 0.5697 0.6034 #> X=~x3  0.5672 0.0601 20000 0.3216 0.3829 0.4327 0.6702 0.6968 0.7254 #> M=~x5  0.8531 0.0228 20000 0.7684 0.7887 0.8039 0.8939 0.9060 0.9176 #> M=~x6  0.8385 0.0235 20000 0.7532 0.7721 0.7882 0.8803 0.8926 0.9065 #> Y=~x8  0.7639 0.0553 20000 0.5373 0.5931 0.6414 0.8579 0.8854 0.9104 #> Y=~x9  0.5910 0.0545 20000 0.3884 0.4379 0.4747 0.6879 0.7170 0.7433 #> a      0.4691 0.0646 20000 0.2336 0.2852 0.3306 0.5844 0.6181 0.6533 #> b      0.2772 0.0698 20000 0.0225 0.0885 0.1341 0.4110 0.4562 0.5213 #> x1~~x1 0.3917 0.0964 20000 0.0908 0.1545 0.2066 0.5879 0.6538 0.7349 #> x2~~x2 0.8155 0.0515 20000 0.6359 0.6755 0.7093 0.9120 0.9361 0.9609 #> x3~~x3 0.6783 0.0663 20000 0.4738 0.5144 0.5509 0.8127 0.8534 0.8966 #> x4~~x4 0.2750 0.0391 20000 0.1585 0.1831 0.2035 0.3563 0.3844 0.4161 #> x5~~x5 0.2722 0.0387 20000 0.1581 0.1792 0.2010 0.3538 0.3779 0.4095 #> x6~~x6 0.2969 0.0392 20000 0.1782 0.2032 0.2250 0.3788 0.4039 0.4326 #> x7~~x7 0.6177 0.0664 20000 0.4116 0.4506 0.4897 0.7503 0.7964 0.8520 #> x8~~x8 0.4165 0.0829 20000 0.1711 0.2161 0.2641 0.5886 0.6482 0.7113 #> x9~~x9 0.6507 0.0635 20000 0.4475 0.4859 0.5267 0.7747 0.8083 0.8491 #> X~~X   1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> M~~M   0.7799 0.0593 20000 0.5732 0.6179 0.6585 0.8907 0.9187 0.9454 #> Y~~Y   0.9231 0.0388 20000 0.7283 0.7918 0.8311 0.9820 0.9921 0.9995 #> ab     0.1301 0.0377 20000 0.0100 0.0381 0.0580 0.2057 0.2366 0.2717"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4: The Simple Mediation Model with Missing Data","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(data)[1], 300) data[miss[1:100], \"X\"] <- NA data[miss[101:200], \"M\"] <- NA data[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4: The Simple Mediation Model with Missing Data","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4: The Simple Mediation Model with Missing Data","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan. Since missing values x, also set fixed.x = FALSE.","code":"fit <- sem(data = data, model = model, missing = \"fiml\", fixed.x = FALSE)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4: The Simple Mediation Model with Missing Data","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>              est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp        0.2286 0.0404 20000  0.0950  0.1253  0.1496 0.3085 0.3311 0.3638 #> b         0.4895 0.0362 20000  0.3726  0.3971  0.4185 0.5607 0.5819 0.6095 #> a         0.5039 0.0333 20000  0.3953  0.4173  0.4388 0.5691 0.5904 0.6106 #> Y~~Y      1.0664 0.0517 20000  0.8992  0.9329  0.9653 1.1670 1.1971 1.2317 #> M~~M      0.9896 0.0470 20000  0.8331  0.8692  0.8986 1.0812 1.1103 1.1341 #> X~~X      1.0335 0.0488 20000  0.8734  0.9084  0.9385 1.1290 1.1606 1.1888 #> Y~1       0.0090 0.0352 20000 -0.1049 -0.0795 -0.0590 0.0784 0.0998 0.1221 #> M~1      -0.0126 0.0334 20000 -0.1217 -0.0978 -0.0784 0.0531 0.0717 0.0930 #> X~1      -0.0294 0.0333 20000 -0.1403 -0.1168 -0.0944 0.0352 0.0566 0.0830 #> indirect  0.2467 0.0243 20000  0.1739  0.1886  0.2005 0.2962 0.3119 0.3351 #> direct    0.2286 0.0404 20000  0.0950  0.1253  0.1496 0.3085 0.3311 0.3638 #> total     0.4753 0.0384 20000  0.3551  0.3748  0.3996 0.5505 0.5746 0.6002"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-simple-miss.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4: The Simple Mediation Model with Missing Data","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2016 0.0347 20000 0.0851 0.1123 0.1335 0.2695 0.2898 0.3167 #> b        0.4501 0.0325 20000 0.3436 0.3656 0.3854 0.5124 0.5319 0.5541 #> a        0.4681 0.0295 20000 0.3677 0.3889 0.4096 0.5245 0.5413 0.5615 #> Y~~Y     0.6718 0.0288 20000 0.5753 0.5962 0.6144 0.7268 0.7432 0.7604 #> M~~M     0.7809 0.0275 20000 0.6847 0.7070 0.7249 0.8322 0.8487 0.8648 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.2107 0.0207 20000 0.1479 0.1589 0.1712 0.2524 0.2651 0.2812 #> direct   0.2016 0.0347 20000 0.0851 0.1123 0.1335 0.2695 0.2898 0.3167 #> total    0.4123 0.0311 20000 0.3084 0.3300 0.3497 0.4718 0.4905 0.5105"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 5: Standardized Regression Coefficients","text":"","code":"n <- 1000 X1 <- rnorm(n = n) X2 <- 0.50 * X1 + rnorm(n = n) Y <- 0.25 * X1 + 0.50 * X2 + rnorm(n = n) data <- data.frame(X1, X2, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 5: Standardized Regression Coefficients","text":"regress X1 X2 Y.","code":"model <- \"   Y ~ X1 + X2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 5: Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 5: Standardized Regression Coefficients","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> Y~X1   0.2373 0.0367 20000 0.1115 0.1434 0.1647 0.3097 0.3315 0.3598 #> Y~X2   0.4817 0.0330 20000 0.3747 0.3983 0.4168 0.5465 0.5663 0.5967 #> Y~~Y   1.0581 0.0478 20000 0.8989 0.9334 0.9645 1.1512 1.1819 1.2210 #> X1~~X1 1.0040 0.0449 20000 0.8583 0.8900 0.9154 1.0931 1.1183 1.1474 #> X1~~X2 0.5119 0.0388 20000 0.3752 0.4109 0.4360 0.5877 0.6095 0.6316 #> X2~~X2 1.2322 0.0553 20000 1.0573 1.0912 1.1247 1.3401 1.3765 1.4216"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-regression.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 5: Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> Y~X1   0.1930 0.0296 20000 0.0956 0.1154 0.1353 0.2511 0.2688 0.2917 #> Y~X2   0.4340 0.0276 20000 0.3435 0.3603 0.3782 0.4871 0.5037 0.5213 #> Y~~Y   0.6972 0.0242 20000 0.6119 0.6331 0.6492 0.7433 0.7592 0.7739 #> X1~~X1 1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> X1~~X2 0.4602 0.0248 20000 0.3776 0.3947 0.4104 0.5078 0.5217 0.5389 #> X2~~X2 1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000"},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder. Shu Fai Cheung. Contributor.","code":""},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . (2022). semmcci: Monte Carlo Confidence Intervals Structural Equation Modeling. R package version 0.9.1","code":"@Manual{,   address = {University of Macau},   author = {Ivan Jacob Agaloos Pesigan},   title = {semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling},   year = {2022},   note = {R package version 0.9.1}, }"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"semmcci","dir":"","previous_headings":"","what":"Monte Carlo Confidence Intervals in Structural Equation Modeling","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Ivan Jacob Agaloos Pesigan 2022-09-10","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package two main functions, namely, MC() MCStd(). output lavaan passed first argument MC() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCStd() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install released version semmcci GitHub :","code":"install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"the-monte-carlo-method","dir":"","previous_headings":"","what":"The Monte Carlo Method","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated obtaining percentiles corresponding 100(1 - α)% generated sampling distribution, α significance level.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"common application Monte Carlo method generate confidence intervals indirect effect. simple mediation model, variable X effect variable Y, mediating variable M. mediating indirect effect product path coefficients fitted model.","code":"library(semmcci) library(lavaan)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"data","dir":"","previous_headings":"Example","what":"Data","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"","code":"n <- 1000 X <- rnorm(n = n) M <- 0.50 * X + rnorm(n = n) Y <- 0.25 * X + 0.50 * M + rnorm(n = n) data <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-specification","dir":"","previous_headings":"Example","what":"Model Specification","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-fitting","dir":"","previous_headings":"Example","what":"Model Fitting","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = data, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) #> Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2613 0.0354 20000 0.1425 0.1705 0.1911 0.3304 0.3511 0.3719 #> b        0.5020 0.0317 20000 0.3941 0.4184 0.4392 0.5631 0.5817 0.6047 #> a        0.5102 0.0317 20000 0.4069 0.4286 0.4478 0.5720 0.5884 0.6125 #> Y~~Y     0.9682 0.0434 20000 0.8234 0.8588 0.8830 1.0538 1.0815 1.1099 #> M~~M     0.9649 0.0436 20000 0.8318 0.8538 0.8801 1.0510 1.0770 1.1116 #> indirect 0.2561 0.0227 20000 0.1855 0.2004 0.2126 0.3016 0.3165 0.3345 #> direct   0.2613 0.0354 20000 0.1425 0.1705 0.1911 0.3304 0.3511 0.3719 #> total    0.5175 0.0354 20000 0.4028 0.4263 0.4471 0.5860 0.6094 0.6278"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"standardized-monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Standardized Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd(). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances predictors assumed random.","code":"fit <- sem(data = data, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = c(0.001, 0.01, 0.05)) MCStd(unstd) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp       0.2127 0.0285 20000 0.1177 0.1380 0.1577 0.2692 0.2858 0.3021 #> b        0.4567 0.0263 20000 0.3633 0.3863 0.4033 0.5066 0.5225 0.5381 #> a        0.4565 0.0251 20000 0.3692 0.3898 0.4064 0.5043 0.5190 0.5319 #> Y~~Y     0.6575 0.0241 20000 0.5746 0.5940 0.6096 0.7038 0.7178 0.7368 #> M~~M     0.7916 0.0228 20000 0.7171 0.7307 0.7456 0.8348 0.8480 0.8637 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> indirect 0.2085 0.0169 20000 0.1551 0.1659 0.1752 0.2423 0.2529 0.2630 #> direct   0.2127 0.0285 20000 0.1177 0.1380 0.1577 0.2692 0.2858 0.3021 #> total    0.4212 0.0260 20000 0.3388 0.3532 0.3692 0.4712 0.4861 0.5041"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals — MC","title":"Monte Carlo Confidence Intervals — MC","text":"Calculates Monte Carlo confidence intervals free defined parameters","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"MC(object, R = 20000L, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals — MC","text":"object object class lavaan. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). Default value alpha = c(0.001, 0.01, 0.05).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals — MC","text":"Returns object class semmcci list following elements: lavaanlavaan object. muMean vector used Monte Carlo simulation. SigmaVariance-covariance matrix used Monte Carlo simulation. thetahatParameter estimates. thetahatstarSampling distribution parameter estimates. ciConfidence intervals. list element ci matrix following columns: estParameter estimates. seStandard errors square root diagonals Monte Carlo sampling distribution parameter estimates. RNumber Monte Carlo replications. ...Percentiles correspond confidence intervals defined alpha. Note rows ci correspond model parameters. Parameters zero standard errors constant confidence limits fixed parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals — MC","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. $$   \\hat{\\boldsymbol{\\theta}}^{\\ast}   \\sim   \\mathcal{N}   \\left(     \\boldsymbol{\\mu} = \\hat{\\boldsymbol{\\theta}},     \\boldsymbol{\\Sigma} = \\mathrm{Cov}     \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \\right) $$ Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals — MC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model)  # Monte Carlo -------------------------------------------------------------- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) ) #> Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2262 0.0388 100 0.1428 0.1452 0.1535 0.2892 0.3216 0.3302 #> b    0.5342 0.0286 100 0.4641 0.4663 0.4921 0.5922 0.6142 0.6212 #> a    0.5260 0.0303 100 0.4426 0.4574 0.4779 0.5905 0.5991 0.5998 #> y~~y 0.9887 0.0470 100 0.8683 0.8719 0.8937 1.0795 1.0973 1.1078 #> m~~m 1.0537 0.0444 100 0.9658 0.9672 0.9747 1.1289 1.1571 1.1700 #> ab   0.2810 0.0233 100 0.2245 0.2265 0.2373 0.3292 0.3370 0.3414"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals — MCStd","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Calculates standardized Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"MCStd(object, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"object object class semmcci. Output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\). Default value alpha = c(0.001, 0.01, 0.05).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Returns object class semmcci_std list following elements: lavaanlavaan object. muMean vector used Monte Carlo simulation. SigmaVariance-covariance matrix used Monte Carlo simulation. thetahatParameter estimates. thetahatstarSampling distribution parameter estimates. ciConfidence intervals. thetahat.stdStandardized parameter estimates. thetahatstar.stdStandardized sampling distribution parameter estimates. ci.stdStandardized confidence intervals. list element ci.std matrix following columns: estStandardized parameter estimates. seStandard errors square root diagonals standardized Monte Carlo sampling distribution parameter estimates. RNumber Monte Carlo replications. ...Percentiles correspond confidence intervals defined alpha. Note rows ci.std correspond standardized model parameters. Parameters zero standard errors constant confidence limits fixed parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"empirical sampling distribution parameter estimates argument object standardized, , randomly generated vector parameters standardized. Confidence intervals generated using standardized empirical sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model, fixed.x = FALSE)  # Monte Carlo -------------------------------------------------------------- output <- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) )  # Standardized Monte Carlo ------------------------------------------------- MCStd(output) #> Standardized Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2186 0.0280 100 0.1513 0.1557 0.1635 0.2689 0.2995 0.3055 #> b    0.4221 0.0244 100 0.3643 0.3688 0.3780 0.4668 0.4906 0.5037 #> a    0.4402 0.0282 100 0.3750 0.3792 0.3868 0.4910 0.5012 0.5065 #> y~~y 0.6928 0.0258 100 0.6348 0.6362 0.6391 0.7437 0.7511 0.7560 #> m~~m 0.8063 0.0247 100 0.7435 0.7488 0.7589 0.8504 0.8562 0.8594 #> x~~x 1.0000 0.0000 100 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> ab   0.1858 0.0171 100 0.1517 0.1518 0.1538 0.2228 0.2271 0.2275"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci — print.semmcci","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Print Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"# S3 method for semmcci print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci — print.semmcci","text":"x object class semmcci. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Returns matrix estimates, standard errors confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model)  # Monte Carlo -------------------------------------------------------------- print(   MC(     fit,     R = 100L, # use a large value e.g., 20000L for actual research     alpha = c(0.001, 0.01, 0.05)   ) ) #> Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2772 0.0373 100 0.1944 0.1954 0.1984 0.3353 0.3756 0.4030 #> b    0.4729 0.0320 100 0.4079 0.4092 0.4184 0.5310 0.5608 0.5725 #> a    0.5099 0.0320 100 0.4357 0.4389 0.4426 0.5685 0.5740 0.5779 #> y~~y 1.0212 0.0517 100 0.8903 0.8969 0.9229 1.1032 1.1143 1.1231 #> m~~m 0.9857 0.0441 100 0.8491 0.8606 0.8810 1.0509 1.0620 1.0649 #> ab   0.2411 0.0235 100 0.1928 0.1935 0.1985 0.2867 0.3024 0.3051"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci_std — print.semmcci_std","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Print Method Object Class semmcci_std","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"","code":"# S3 method for semmcci_std print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"x object class semmcci_std. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Returns matrix estimates, standard errors confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci_std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci_std — print.semmcci_std","text":"","code":"library(semmcci) library(lavaan)  # Generate Data ------------------------------------------------------------ n <- 1000 x <- rnorm(n = n) m <- 0.50 * x + rnorm(n = n) y <- 0.25 * x + 0.50 * m + rnorm(n = n) data <- data.frame(x, m, y)  # Fit Model in lavaan ------------------------------------------------------ model <- \"   y ~ cp * x + b * m   m ~ a * x   ab := a * b \" fit <- sem(data = data, model = model, fixed.x = FALSE)  # Monte Carlo -------------------------------------------------------------- output <- MC(   fit,   R = 100L, # use a large value e.g., 20000L for actual research   alpha = c(0.001, 0.01, 0.05) )  # Standardized Monte Carlo ------------------------------------------------- print(MCStd(output)) #> Standardized Monte Carlo Confidence Intervals #>         est     se   R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp   0.2485 0.0268 100 0.1669 0.1784 0.1998 0.2964 0.3230 0.3245 #> b    0.4535 0.0245 100 0.3981 0.4013 0.4118 0.5047 0.5123 0.5170 #> a    0.4744 0.0244 100 0.3970 0.4117 0.4302 0.5180 0.5271 0.5343 #> y~~y 0.6257 0.0245 100 0.5742 0.5767 0.5833 0.6659 0.6738 0.6763 #> m~~m 0.7750 0.0230 100 0.7145 0.7221 0.7317 0.8149 0.8303 0.8423 #> x~~x 1.0000 0.0000 100 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> ab   0.2151 0.0157 100 0.1727 0.1777 0.1873 0.2470 0.2495 0.2497"},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"semmcci: Monte Carlo Confidence Intervals\nin Structural Equation Modeling — semmcci","title":"semmcci: Monte Carlo Confidence Intervals\nin Structural Equation Modeling — semmcci","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package two main functions, namely, MC() MCStd(). output lavaan passed first argument MC() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCStd() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"semmcci: Monte Carlo Confidence Intervals\nin Structural Equation Modeling — semmcci","text":"Monte Carlo method, sampling distribution #' parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-#' covariance matrix. Confidence intervals defined parameters generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution, \\(\\alpha\\) significance level.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"semmcci: Monte Carlo Confidence Intervals\nin Structural Equation Modeling — semmcci","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99–128. doi:10.1207/s15327906mbr3901_4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848 Tofighi, D., & Kelley, K. (2019). Indirect effects sequential mediation models: Evaluating methods hypothesis testing confidence interval formation. Multivariate Behavioral Research, 55(2), 188–210. doi:10.1080/00273171.2019.1618545 Tofighi, D., & MacKinnon, D. P. (2015). Monte Carlo confidence intervals complex functions indirect effects. Structural Equation Modeling: Multidisciplinary Journal, 23(2), 194–205. doi:10.1080/10705511.2015.1057284","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semmcci: Monte Carlo Confidence Intervals\nin Structural Equation Modeling — semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"major-changes-0-9-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"semmcci 0.9.1","text":"Add news …","code":""}]

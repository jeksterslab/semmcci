\documentclass{article}

\input{latex/preamble/preamble}

%% begin.rcode
% #| label = "root",
% #| include = FALSE
% root <- rprojroot::is_rstudio_project
%% end.rcode

%% begin.rcode
% #| label = "knitr",
% #| include = FALSE,
% #| file = root$find_file(
% #|   "latex",
% #|   "r-scripts",
% #|   "knitr.R"
% #| )
%% end.rcode

%% begin.rcode
% #| label = "biblatex",
% #| echo = FALSE,
% #| warning = FALSE,
% #| results = "asis"
% cat(
%   .PreambleBiblatexCombined(
%     path = root$find_file(
%       "latex",
%       "bib"
%     ),
%     output_path = root$find_file(
%       "latex"
%     )
%   )
% )
%% end.rcode

\title{Examples}
\author{Ivan Jacob Agaloos Pesigan}
\date{}

\begin{document}

\maketitle

This vignette presents four examples
of generating Monte Carlo confidence intervals
using the \texttt{semmci} package.
The first example involves a simple mediation model.
The second example involves a serial mediation model.
The third example involves missing data.
The fourth example involves the standardized indirect effect
in a simple mediation model.

%% begin.rcode
% #| eval = FALSE
% library(semmcci)
% library(lavaan)
%% end.rcode

%% begin.rcode
% #| include = FALSE
% library(lavaan)
%% end.rcode

\section{Example 1: The Simple Mediation Model}

This is an example of a simple mediation model
where \texttt{x} is the predictor, \texttt{m} is the mediator,
and \texttt{y} is the dependent variable.

\subsection{Data}

%% begin.rcode
% n <- 1000
% x <- rnorm(n = n)
% m <- 0.50 * x + rnorm(n = n)
% y <- 0.25 * x + 0.50 * m + rnorm(n = n)
% data <- data.frame(x, m, y)
%% end.rcode

\subsection{Model Specification}

The indirect effect is defined by the product of the slopes
of paths \texttt{x} to \texttt{m} labeled as \texttt{a} and \texttt{m} to \texttt{y} labeled as \texttt{b}.
In this example, we are interested in the confidence intervals of \texttt{ab}
defined as the product of \texttt{a} and \texttt{b} using the \texttt{:=} operator
in the \texttt{lavaan} model syntax.

%% begin.rcode
% model <- "
%   y ~ cp * x + b * m
%   m ~ a * x
%   indirect := a * b
%   direct := cp
%   total := cp + (a * b)
% "
%% end.rcode

\subsection{Model Fitting}

We can now fit the model using the \texttt{sem()} function from \texttt{lavaan}.

%% begin.rcode
% fit <- sem(
%   data = data,
%   model = model
% )
% summary(fit)
%% end.rcode

\subsection{Monte Carlo Confidence Intervals}

The \texttt{fit} \texttt{lavaan} object can then be passed to the \texttt{mc} function from \texttt{semmcci}
to generate Monte Carlo confidence intervals for defined parameters.

%% begin.rcode
% MC(
%   fit,
%   R = 100L, # use a large value e.g., 20000L for actual research
%   alpha = c(0.001, 0.01, 0.05)
% )
%% end.rcode

\section{Example 2: The Serial Mediation Model}

This is an example of a serial mediation model with two mediators
where \texttt{x} is the predictor, \texttt{m1} is the first mediator, \texttt{m2} is the second mediator,
and \texttt{y} is the dependent variable.

\subsection{Data}

%% begin.rcode
% n <- 1000
% x <- rnorm(n = n)
% m1 <- 0.50 * x + rnorm(n = n)
% m2 <- 0.15 * x + 0.50 * m1 + rnorm(n = n)
% y <- 0.10 * x + 0.05 * m1 + 0.50 * m2 + rnorm(n = n)
% data <- data.frame(x, m1, m2, y)
%% end.rcode

\subsection{Model Specification}

We can define several indirect effects in this example:

\begin{itemize}
    \item $x \rightarrow m1 \rightarrow m2 \rightarrow y$
    \item $x \rightarrow m1 \rightarrow m2$
    \item $x \rightarrow m1 \rightarrow y$
    \item $m1 \rightarrow m2 \rightarrow y$
\end{itemize}


These indirect effects are defined using the \texttt{:=} operator
in the \texttt{lavaan} model syntax.

%% begin.rcode
% model <- "
%   y ~ cp * x + b1 * m1 + b2 * m2
%   m2 ~ a2 * x + k * m1
%   m1 ~ a1 * x
%   # x -> m1 -> m2 -> y
%   a1kb2 := a1 * k * b2
%   # x -> m1 -> m2
%   a1k := a1 * k
%   # x -> m1 -> y
%   a2b2 := a2 * b2
%   # m1 -> m2 -> y
%   kb2 := k * b2
% "
%% end.rcode

\subsection{Model Fitting}

%% begin.rcode
% fit <- sem(
%   data = data,
%   model = model
% )
% summary(fit)
%% end.rcode

\subsection{Monte Carlo Confidence Intervals}

%% begin.rcode
% # The argument `par = TRUE` can be specified to use multiple cores for a faster implementation.
% # The number of cores to use can be specified with `ncores`.
% MC(
%   fit,
%   R = 100L, # use a large value e.g., 20000L for actual research
%   alpha = c(0.001, 0.01, 0.05)
% )
%% end.rcode

\section{Example 3: Missing Data}

This is an example of a simple mediation model with missing data.

\subsection{Data}

%% begin.rcode
% n <- 1000
% x <- rnorm(n = n)
% m <- 0.50 * x + rnorm(n = n)
% y <- 0.25 * x + 0.50 * m + rnorm(n = n)
% data <- data.frame(x, m, y)

% # Create data set with missing values.

% miss <- sample(1:dim(data)[1], 300)
% data[miss[1:100], "x"] <- NA
% data[miss[101:200], "m"] <- NA
% data[miss[201:300], "y"] <- NA
%% end.rcode

\subsection{Model Specification}

%% begin.rcode
% model <- "
%   y ~ cp * x + b * m
%   m ~ a * x
%   ab := a * b
% "
%% end.rcode

\subsection{Model Fitting}

We are using \texttt{missing = "fiml"} to handle missing data in \texttt{lavaan}.
Since there are missing values in \texttt{x}, we also set \texttt{fixed.x = FALSE}.

%% begin.rcode
% fit <- sem(
%   data = data,
%   model = model,
%   missing = "fiml",
%   fixed.x = FALSE
% )
% summary(fit)
%% end.rcode

\subsection{Monte Carlo Confidence Intervals}

%% begin.rcode
% # The argument `par = TRUE` can be specified to use multiple cores for a faster implementation.
% # The number of cores to use can be specified with `ncores`.
% MC(
%   fit,
%   R = 100L, # use a large value e.g., 20000L for actual research
%   alpha = c(0.001, 0.01, 0.05)
% )
%% end.rcode

\section{Example 4.a: The Standardized Simple Mediation Model - Version a}

In this example, confidence intervals for the standardized indirect effect
are generated using \texttt{mc\_std}.

\subsection{Data}

%% begin.rcode
% n <- 1000
% x <- rnorm(n = n)
% m <- 0.50 * x + rnorm(n = n)
% y <- 0.25 * x + 0.50 * m + rnorm(n = n)
% data <- data.frame(x, m, y)
%% end.rcode

\subsection{Model Specification}

%% begin.rcode
% model <- "
%   y ~ cp * x + b * m
%   m ~ a * x
%   indirect := a * b
%   direct := cp
%   total := cp + (a * b)
% "
%% end.rcode

\subsection{Model Fitting}

%% begin.rcode
% fit <- sem(
%   data = data,
%   model = model,
%   fixed.x = FALSE
% )
% summary(fit)
%% end.rcode

\subsection{Monte Carlo Confidence Intervals}

%% begin.rcode
% # The argument `par = TRUE` can be specified to use multiple cores for a faster implementation
% # for both `MC` and `MCStd`.
% # The number of cores to use can be specified with `ncores`.
% out <- MC(
%   fit,
%   R = 100L, # use a large value e.g., 20000L for actual research
%   alpha = c(0.001, 0.01, 0.05)
% )
% MCStd(out)
%% end.rcode

\section{Example 4.b: The Standardized Simple Mediation Model - Version b}

In this example, confidence intervals for the standardized indirect effect
are generated by specifying the standardized indirect effect
as a derived parameter using the \texttt{:=} operator.


\subsection{Model Specification}

The standardized indirect effect in a simple mediation model
involves paths $a$, and $b$,
and the standard deviations of $x$ and $y$.
It is given by

\begin{equation}
  a b
  \frac{s_x}{s_y}
\end{equation}

\noindent where

\begin{equation}
  s_x
  =
  \sqrt{
    s_{x}^{2}
  }
\end{equation}

\noindent and

\begin{equation}
  s_y
  =
  \sqrt{
    c^{\prime 2} s_{x}^{2}
    + a^2 b^2 s_{x}^{2}
    + b^2 s_{e_{m}}^{2}
    + 2 c^{\prime} b a s_{x}^{2}
    + s_{e_{y}}^{2}
  }
\end{equation}

\noindent where

\noindent $s_{e_{y}}^{2}$ and $s_{e_{m}}^{2}$ are the residual variances
in the regression equations.

The standardized indirect effect can be defined using the \texttt{:=} operator
and the named parameters in the model.

%% begin.rcode
% model <- "
%   y ~ cp * x + b * m
%   m ~ a * x
%   x ~~ var_x * x
%   m ~~ var_em * m
%   y ~~ var_ey * y
%   std := a * b * (
%     sqrt(var_x) / sqrt(
%       cp^2 * var_x + a^2 * b^2 * var_x + b^2 * var_em + 2 * cp * b * a * var_x + var_ey
%     )
%   )
% "
%% end.rcode

\subsection{Model Fitting}

%% begin.rcode
% fit <- sem(
%   data = data,
%   model = model,
%   fixed.x = FALSE
% )
% summary(fit)
%% end.rcode

\subsection{Monte Carlo Confidence Intervals}

%% begin.rcode
% # The argument `par = TRUE` can be specified to use multiple cores for a faster implementation.
% # The number of cores to use can be specified with `ncores`.
% MC(
%   fit,
%   R = 100L, # use a large value e.g., 20000L for actual research
%   alpha = c(0.001, 0.01, 0.05)
% )
%% end.rcode

\nocite{Lib-R-Manual-2022}

\nocite{Lib-Mediation-Monte-Carlo-Method-MacKinnon-2004}

\nocite{Lib-Mediation-Monte-Carlo-Method-Preacher-2012}

\printbibliography

\end{document}

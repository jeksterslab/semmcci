[{"path":"https://github.com/jeksterslab/semmcci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Ivan Jacob Agaloos Pesigan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 100L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se   R   2.5%  97.5% #> cp       0.2333 0.0296 100 0.1806 0.2903 #> b        0.5082 0.0279 100 0.4555 0.5527 #> a        0.4820 0.0280 100 0.4220 0.5301 #> X~~X     1.0590 0.0426 100 0.9751 1.1296 #> Y~~Y     0.5462 0.0231 100 0.5064 0.5959 #> M~~M     0.7527 0.0337 100 0.7024 0.8208 #> indirect 0.2449 0.0179 100 0.2058 0.2738 #> direct   0.2333 0.0296 100 0.1806 0.2903 #> total    0.4782 0.0295 100 0.4162 0.5283"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = 100L   ) ) #>        lhs op      rhs    label   est    se      z pvalue ci.lower ci.upper #> 1        Y  ~        X       cp 0.233 0.025  9.395      0    0.183    0.278 #> 2        Y  ~        M        b 0.508 0.028 18.057      0    0.454    0.568 #> 3        M  ~        X        a 0.482 0.026 18.550      0    0.433    0.535 #> 4        X ~~        X          1.059 0.046 23.224      0    0.969    1.161 #> 5        Y ~~        Y          0.546 0.023 23.640      0    0.508    0.593 #> 6        M ~~        M          0.753 0.033 23.131      0    0.692    0.814 #> 7 indirect :=      a*b indirect 0.245 0.020 12.381      0    0.209    0.289 #> 8   direct :=       cp   direct 0.233 0.025  9.348      0    0.183    0.278 #> 9    total := cp+(a*b)    total 0.478 0.027 17.876      0    0.418    0.518"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"arguments","dir":"Articles","previous_headings":"Benchmark","what":"Arguments","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark_complete_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model     )     MC(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE     )   },   NB = sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_01, unit = \"ms\") #>   expr         min          lq        mean      median          uq         max #> 1   MC    73.29008    78.57166    80.04819    81.01251    81.77541    83.01604 #> 2   NB 23974.08770 24085.17547 24341.66664 24270.12572 24446.03987 25320.44143 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_01, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC   1.0000   1.0000   1.0000   1.0000   1.0000   1.0000    10 #> 2   NB 327.1123 306.5377 304.0877 299.5849 298.9412 305.0066    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"fit <- sem(   data = df,   model = model ) benchmark_complete_02 <- microbenchmark(   MC = MC(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE   ),   NB = sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_02, unit = \"ms\") #>   expr         min          lq        mean     median          uq         max #> 1   MC    22.19105    22.80138    24.84606    25.6487    26.08751    27.55809 #> 2   NB 24003.66879 24038.21729 24691.38615 24553.7816 25340.25937 25676.84530 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_02, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC    1.000    1.000   1.0000   1.0000   1.0000   1.0000    10 #> 2   NB 1081.682 1054.244 993.7748 957.3109 971.3558 931.7353    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(df)[1], 300) df[miss[1:100], \"X\"] <- NA df[miss[101:200], \"M\"] <- NA df[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 100L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se   R   2.5%  97.5% #> cp       0.2419 0.0332 100 0.1792 0.3070 #> b        0.5166 0.0308 100 0.4580 0.5785 #> a        0.4989 0.0319 100 0.4448 0.5615 #> X~~X     1.0951 0.0621 100 0.9875 1.2045 #> Y~~Y     0.5796 0.0307 100 0.5257 0.6413 #> M~~M     0.8045 0.0464 100 0.6983 0.8764 #> indirect 0.2577 0.0210 100 0.2234 0.3031 #> direct   0.2419 0.0332 100 0.1792 0.3070 #> total    0.4996 0.0322 100 0.4550 0.5681"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = 100L   ) ) #>         lhs op      rhs    label    est    se      z pvalue ci.lower ci.upper #> 1         Y  ~        X       cp  0.234 0.030  7.721  0.000    0.169    0.287 #> 2         Y  ~        M        b  0.511 0.035 14.704  0.000    0.442    0.585 #> 3         M  ~        X        a  0.481 0.028 17.117  0.000    0.425    0.532 #> 4         X ~~        X           1.059 0.049 21.539  0.000    0.979    1.148 #> 5         Y ~~        Y           0.554 0.029 19.264  0.000    0.490    0.607 #> 6         M ~~        M           0.756 0.032 23.389  0.000    0.693    0.820 #> 7         Y ~1                   -0.013 0.027 -0.473  0.636   -0.065    0.056 #> 8         M ~1                   -0.022 0.030 -0.744  0.457   -0.077    0.044 #> 9         X ~1                    0.002 0.036  0.069  0.945   -0.072    0.074 #> 10 indirect :=      a*b indirect  0.246 0.021 11.476  0.000    0.202    0.286 #> 11   direct :=       cp   direct  0.234 0.030  7.682  0.000    0.169    0.287 #> 12    total := cp+(a*b)    total  0.479 0.030 16.001  0.000    0.417    0.547"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"arguments","dir":"Articles","previous_headings":"Benchmark","what":"Arguments","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"benchmark_fiml_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model,       missing = \"fiml\"     )     MC(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE     )   },   NB = sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_01, unit = \"ms\") #>   expr        min        lq       mean     median        uq       max neval #> 1   MC   132.1629   138.583   140.4346   139.9045   144.533   149.449    10 #> 2   NB 54788.6186 54898.572 56286.6472 56420.0038 56645.360 59905.481    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_01, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC   1.0000   1.0000   1.0000   1.0000   1.0000   1.0000    10 #> 2   NB 414.5536 396.1422 400.8033 403.2752 391.9198 400.8422    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"fit <- sem(   data = df,   model = model,   missing = \"fiml\" ) benchmark_fiml_02 <- microbenchmark(   MC = MC(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE   ),   NB = sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_02, unit = \"ms\") #>   expr         min          lq        mean      median          uq         max #> 1   MC    22.98177    23.25239    24.72599    23.56153    26.72669    29.80562 #> 2   NB 54657.49906 55349.67282 55957.68857 56246.00780 56584.18076 56713.40083 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_02, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC    1.000    1.000    1.000    1.000    1.000    1.000    10 #> 2   NB 2378.298 2380.387 2263.112 2387.197 2117.141 1902.776    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(df)[1], 300) df[miss[1:100], \"X\"] <- NA df[miss[101:200], \"M\"] <- NA df[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- amelia(   x = df,   m = 5L,   p2s = 0 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"can now fit model using sem() function lavaan. need deal missing values stage.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"monte-carlo-confidence-intervals-multiple-imputation","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals (Multiple Imputation)","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"fit lavaan object mi mids object can passed MCMI() function semmcci generate Monte Carlo confidence intervals using multiple imputation described Pesigan Cheung (2023).","code":"MCMI(fit, R = 100L, alpha = 0.05, mi = mi) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se   R   2.5%  97.5% #> cp       0.2274 0.0303 100 0.1761 0.2971 #> b        0.5192 0.0332 100 0.4510 0.5769 #> a        0.4790 0.0292 100 0.4202 0.5305 #> X~~X     1.0613 0.0441 100 0.9796 1.1444 #> Y~~Y     0.5439 0.0241 100 0.4994 0.5876 #> M~~M     0.7642 0.0396 100 0.7030 0.8402 #> indirect 0.2486 0.0173 100 0.2160 0.2747 #> direct   0.2274 0.0303 100 0.1761 0.2971 #> total    0.4760 0.0291 100 0.4271 0.5509"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"nonparametric-bootstrap-confidence-intervals-multiple-imputation","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals (Multiple Imputation)","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"Nonparametric bootstrap confidence intervals can generated bmemLavaan using following.","code":"summary(   bmemLavaan::bmem(data = df, model = model, method = \"mi\", boot = 100L, m = 5L) ) #>  #> Estimate method:                          multiple imputation #> Sample size:                              1000       #> Number of request bootstrap draws:        100        #> Number of successful bootstrap draws:     100        #> Type of confidence interval:              perc #>  #> Values of statistics: #>  #>                      Value      SE      2.5%     97.5% #>   chisq               0.000    0.000    0.000    0.000    #>   GFI                 1.000    0.000    1.000    1.000    #>   AGFI                1.000    0.000    1.000    1.000    #>   RMSEA               0.000    0.000    0.000    0.000    #>   NFI                 1.000    0.000    1.000    1.000    #>   NNFI                1.000    0.000    1.000    1.000    #>   CFI                 1.000    0.000    1.000    1.000    #>   BIC                 7742.967 81.777   7575.258 7857.675 #>   SRMR                0.000    0.000    0.000    0.000    #>  #> Estimation of parameters: #>  #>                      Estimate   SE      2.5%     97.5% #> Regressions: #>   Y ~ #>     X        (cp)     0.234    0.030    0.176    0.296 #>     M         (b)     0.513    0.032    0.460    0.570 #>   M ~ #>     X         (a)     0.476    0.030    0.426    0.540 #>  #> Variances: #>     X                 1.057    0.046    0.950    1.144 #>     Y                 0.556    0.027    0.488    0.600 #>     M                 0.755    0.035    0.684    0.813 #>  #>  #>  #> Defined parameters: #>     a*b    (indr)     0.244    0.020    0.206    0.285 #>     cp     (drct)     0.234    0.030    0.176    0.296 #>     cp+(*) (totl)     0.479    0.030    0.428    0.539"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"benchmark-1","dir":"Articles","previous_headings":"","what":"Benchmark","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"benchmark_mi_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model     )     mi <- Amelia::amelia(       x = df,       m = m,       p2s = 0     )     MCMI(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE,       mi = mi     )   },   NB = bmemLavaan::bmem(     data = df,     model = model,     method = \"mi\",     boot = B,     m = m   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_01, unit = \"ms\") #>   expr        min         lq       mean     median         uq        max neval #> 1   MC   376.1783   390.6355   391.6246   393.7893   394.3092   394.8754    10 #> 2   NB 36225.9099 37363.2434 37432.9876 37511.3505 37756.7490 37824.7312    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_01, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC  1.00000  1.00000  1.00000  1.00000  1.00000  1.00000    10 #> 2   NB 96.29983 95.64734 95.58385 95.25741 95.75417 95.78903    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates-and-multiple-imputation","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"fit <- sem(   data = df,   model = model ) mi <- Amelia::amelia(   x = df,   m = m,   p2s = 0 ) benchmark_mi_02 <- microbenchmark(   MC = MCMI(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE,     mi = mi   ),   NB = bmemLavaan::bmem(     data = df,     model = model,     method = \"mi\",     boot = B,     m = m   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_02, unit = \"ms\") #>   expr        min         lq       mean     median         uq        max neval #> 1   MC   244.4224   247.5467   253.1821   250.5951   256.8383   267.1072    10 #> 2   NB 35681.6919 35806.0329 36505.1384 36562.3245 37173.6301 37346.2022    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_02, unit = \"relative\") #>   expr      min       lq     mean  median       uq      max neval #> 1   MC   1.0000   1.0000   1.0000   1.000   1.0000   1.0000    10 #> 2   NB 145.9837 144.6435 144.1853 145.902 144.7356 139.8173    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 1: The Simple Mediation Model","text":"","code":"summary(df) #>        X                   M                   Y            #>  Min.   :-3.199558   Min.   :-3.371276   Min.   :-3.61432   #>  1st Qu.:-0.636035   1st Qu.:-0.692640   1st Qu.:-0.66146   #>  Median : 0.011377   Median : 0.007125   Median :-0.04726   #>  Mean   :-0.003207   Mean   :-0.023968   Mean   :-0.01677   #>  3rd Qu.: 0.651951   3rd Qu.: 0.647363   3rd Qu.: 0.62640   #>  Max.   : 3.470910   Max.   : 2.963216   Max.   : 3.09950 colMeans(df) #>            X            M            Y  #> -0.003206987 -0.023968103 -0.016774294 var(df) #>           X         M         Y #> X 1.0600162 0.5108780 0.5069458 #> M 0.5108780 0.9996606 0.6272104 #> Y 0.5069458 0.6272104 0.9837255"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 1: The Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 1: The Simple Mediation Model","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals---an-alternative-approach","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals - An Alternative Approach","title":"Example 1: The Simple Mediation Model","text":"example, confidence intervals standardized indirect effect generated specifying standardized indirect effect derived parameter using := operator. standardized indirect effect simple mediation model involves paths \\(\\) \\(b\\), standard deviations \\(X\\) \\(Y\\). given \\[   b   \\frac{s_X}{s_Y} \\] \\[   s_X   =   \\sqrt{     s_{X}^{2}   } \\] \\[   s_Y   =   \\sqrt{     c^{\\prime 2} s_{X}^{2}     + ^2 b^2 s_{X}^{2}     + b^2 s_{e_{M}}^{2}     + 2 c^{\\prime} b s_{X}^{2}     + s_{e_{Y}}^{2}   } \\] \\(s_{e_{Y}}^{2}\\) \\(s_{e_{M}}^{2}\\) residual variances regression equations. standardized indirect effect can defined using := operator named parameters model. row indirect_std corresponds confidence intervals standardized indirect effect.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ s2_X * X   M ~~ s2_em * M   Y ~~ s2_ey * Y   indirect_std := a * b * (     sqrt(s2_X) / sqrt(       (         cp^2 * s2_X + a^2 * b^2 * s2_X       ) + (         b^2 * s2_em       ) + (         2 * cp * b * a * s2_X       ) + s2_ey     )   ) \" fit <- sem(data = df, model = model, fixed.x = FALSE) #> Error: lavaan->ldw_parse_step2():   #>    formula without valid operator at line 7, pos 5 #>     sqrt(s2_X) / sqrt( #>     ^ MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0263 20000 0.1810 0.2838 #> b        0.5082 0.0270 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4301 0.5330 #> Y~~Y     0.5462 0.0243 20000 0.4983 0.5936 #> M~~M     0.7527 0.0339 20000 0.6865 0.8192 #> X~~X     1.0590 0.0472 20000 0.9648 1.1504 #> indirect 0.2449 0.0188 20000 0.2093 0.2823 #> direct   0.2333 0.0263 20000 0.1810 0.2838 #> total    0.4782 0.0265 20000 0.4258 0.5303"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 2: The Serial Mediation Model","text":"","code":"summary(df) #>        X                  M1                 M2                 Y            #>  Min.   :-3.37174   Min.   :-3.22690   Min.   :-4.33590   Min.   :-4.29019   #>  1st Qu.:-0.67546   1st Qu.:-0.73709   1st Qu.:-0.82188   1st Qu.:-0.86035   #>  Median :-0.01313   Median :-0.01651   Median :-0.03903   Median :-0.02704   #>  Mean   :-0.02582   Mean   :-0.01823   Mean   :-0.01620   Mean   :-0.03338   #>  3rd Qu.: 0.66400   3rd Qu.: 0.72825   3rd Qu.: 0.80016   3rd Qu.: 0.81721   #>  Max.   : 3.49530   Max.   : 3.69001   Max.   : 3.65147   Max.   : 4.05239 colMeans(df) #>           X          M1          M2           Y  #> -0.02582443 -0.01823021 -0.01619576 -0.03337865 var(df) #>            X        M1        M2         Y #> X  1.0050488 0.5123920 0.3848638 0.3333458 #> M1 0.5123920 1.2334461 0.6645408 0.5108946 #> M2 0.3848638 0.6645408 1.4321822 0.8012638 #> Y  0.3333458 0.5108946 0.8012638 1.4504417"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 2: The Serial Mediation Model","text":"can define several indirect effects example: \\(X \\rightarrow M1 \\rightarrow M2 \\rightarrow Y\\) \\(X \\rightarrow M1 \\rightarrow M2\\) \\(X \\rightarrow M1 \\rightarrow Y\\) \\(M1 \\rightarrow M2 \\rightarrow Y\\) indirect effects defined using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b1 * M1 + b2 * M2   M2 ~ a2 * X + k * M1   M1 ~ a1 * X   # X -> M1 -> M2 -> Y   a1kb2 := a1 * k * b2   # X -> M1 -> M2   a1k := a1 * k   # X -> M1 -> Y   a2b2 := a2 * b2   # M1 -> M2 -> Y   kb2 := k * b2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 2: The Serial Mediation Model","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>           est     se     R   2.5%  97.5% #> cp     0.0868 0.0355 20000 0.0169 0.1554 #> b1     0.1190 0.0350 20000 0.0513 0.1880 #> b2     0.4809 0.0305 20000 0.4215 0.5404 #> a2     0.1373 0.0364 20000 0.0660 0.2092 #> k      0.4817 0.0331 20000 0.4166 0.5469 #> a1     0.5098 0.0310 20000 0.4483 0.5700 #> Y~~Y   0.9744 0.0439 20000 0.8885 1.0603 #> M2~~M2 1.0581 0.0477 20000 0.9653 1.1522 #> M1~~M1 0.9712 0.0431 20000 0.8872 1.0563 #> X~~X   1.0040 0.0000 20000 1.0040 1.0040 #> a1kb2  0.1181 0.0132 20000 0.0931 0.1452 #> a1k    0.2456 0.0226 20000 0.2022 0.2908 #> a2b2   0.0660 0.0180 20000 0.0315 0.1022 #> kb2    0.2317 0.0217 20000 0.1902 0.2751"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R   2.5%  97.5% #> cp     0.0723 0.0290 20000 0.0159 0.1291 #> b1     0.1098 0.0316 20000 0.0472 0.1710 #> b2     0.4779 0.0276 20000 0.4235 0.5314 #> a2     0.1151 0.0306 20000 0.0545 0.1738 #> k      0.4470 0.0282 20000 0.3909 0.5015 #> a1     0.4602 0.0249 20000 0.4098 0.5080 #> Y~~Y   0.6725 0.0243 20000 0.6230 0.7181 #> M2~~M2 0.7396 0.0238 20000 0.6912 0.7845 #> M1~~M1 0.7882 0.0228 20000 0.7419 0.8320 #> X~~X   1.0000 0.0000 20000 1.0000 1.0000 #> a1kb2  0.0983 0.0104 20000 0.0786 0.1196 #> a1k    0.2057 0.0177 20000 0.1716 0.2414 #> a2b2   0.0550 0.0150 20000 0.0259 0.0846 #> kb2    0.2136 0.0188 20000 0.1777 0.2514"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 3: The Latent Variable Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   X =~ x1 + x2 + x3   M =~ x4 + x5 + x6   Y =~ x7 + x8 + x9   M ~ a * X   Y ~ b * M   indirect := a * b \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 3: The Latent Variable Simple Mediation Model","text":"can now fit model using sem() function lavaan using Holzinger Swineford (1939) data set.","code":"df <- lavaan::HolzingerSwineford1939 fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> X=~x1    1.0000 0.0000 20000 1.0000 1.0000 #> X=~x2    0.5554 0.1043 20000 0.3545 0.7621 #> X=~x3    0.7045 0.1176 20000 0.4730 0.9373 #> M=~x4    1.0000 0.0000 20000 1.0000 1.0000 #> M=~x5    1.1106 0.0652 20000 0.9825 1.2401 #> M=~x6    0.9268 0.0555 20000 0.8184 1.0355 #> Y=~x7    1.0000 0.0000 20000 1.0000 1.0000 #> Y=~x8    1.1482 0.1647 20000 0.8260 1.4665 #> Y=~x9    0.8854 0.1241 20000 0.6414 1.1284 #> a        0.5107 0.0956 20000 0.3220 0.6951 #> b        0.1884 0.0516 20000 0.0875 0.2896 #> x1~~x1   0.5320 0.1296 20000 0.2776 0.7849 #> x2~~x2   1.1269 0.1032 20000 0.9250 1.3292 #> x3~~x3   0.8647 0.0952 20000 0.6798 1.0519 #> x4~~x4   0.3714 0.0475 20000 0.2785 0.4655 #> x5~~x5   0.4519 0.0582 20000 0.3378 0.5667 #> x6~~x6   0.3551 0.0425 20000 0.2715 0.4376 #> x7~~x7   0.7309 0.0833 20000 0.5681 0.8956 #> x8~~x8   0.4257 0.0828 20000 0.2657 0.5886 #> x9~~x9   0.6605 0.0710 20000 0.5204 0.8007 #> X~~X     0.8264 0.1590 20000 0.5120 1.1370 #> M~~M     0.7638 0.0972 20000 0.5725 0.9532 #> Y~~Y     0.4175 0.0893 20000 0.2422 0.5908 #> indirect 0.0962 0.0320 20000 0.0402 0.1642"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"fit <- sem(data = df, model = model) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> X=~x1    0.7800 0.0629 20000 0.6411 0.8907 #> X=~x2    0.4295 0.0612 20000 0.2988 0.5392 #> X=~x3    0.5672 0.0602 20000 0.4328 0.6676 #> M=~x4    0.8515 0.0230 20000 0.8026 0.8925 #> M=~x5    0.8531 0.0227 20000 0.8048 0.8936 #> M=~x6    0.8385 0.0235 20000 0.7884 0.8799 #> Y=~x7    0.6183 0.0543 20000 0.4990 0.7130 #> Y=~x8    0.7639 0.0553 20000 0.6411 0.8574 #> Y=~x9    0.5910 0.0545 20000 0.4748 0.6877 #> a        0.4691 0.0653 20000 0.3285 0.5848 #> b        0.2772 0.0698 20000 0.1348 0.4107 #> x1~~x1   0.3917 0.0964 20000 0.2067 0.5890 #> x2~~x2   0.8155 0.0514 20000 0.7092 0.9107 #> x3~~x3   0.6783 0.0664 20000 0.5542 0.8127 #> x4~~x4   0.2750 0.0389 20000 0.2034 0.3558 #> x5~~x5   0.2722 0.0385 20000 0.2015 0.3523 #> x6~~x6   0.2969 0.0391 20000 0.2257 0.3783 #> x7~~x7   0.6177 0.0658 20000 0.4917 0.7510 #> x8~~x8   0.4165 0.0829 20000 0.2649 0.5890 #> x9~~x9   0.6507 0.0635 20000 0.5271 0.7746 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> M~~M     0.7799 0.0599 20000 0.6581 0.8921 #> Y~~Y     0.9231 0.0389 20000 0.8313 0.9818 #> indirect 0.1301 0.0378 20000 0.0581 0.2062"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"","code":"summary(df) #>        X                  M                  Y            #>  Min.   :-3.19956   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.63268   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.02823   Median : 0.02825   Median :-0.04833   #>  Mean   : 0.00269   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.65754   3rd Qu.: 0.65240   3rd Qu.: 0.65293   #>  Max.   : 3.47091   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100        NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan.","code":"fit <- sem(data = df, model = model, missing = \"fiml\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>              est     se     R    2.5%  97.5% #> cp        0.2335 0.0295 20000  0.1752 0.2913 #> b         0.5113 0.0295 20000  0.4532 0.5680 #> a         0.4809 0.0286 20000  0.4256 0.5368 #> X~~X      1.0591 0.0499 20000  0.9619 1.1574 #> Y~~Y      0.5542 0.0268 20000  0.5019 0.6074 #> M~~M      0.7564 0.0361 20000  0.6851 0.8267 #> Y~1      -0.0127 0.0253 20000 -0.0621 0.0375 #> M~1      -0.0223 0.0292 20000 -0.0804 0.0344 #> X~1       0.0025 0.0338 20000 -0.0645 0.0688 #> indirect  0.2458 0.0203 20000  0.2074 0.2871 #> direct    0.2335 0.0295 20000  0.1752 0.2913 #> total     0.4794 0.0288 20000  0.4217 0.5353"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"fit <- sem(data = df, model = model, missing = \"fiml\") unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>              est     se     R   2.5%  97.5% #> cp        0.2409 0.0298 20000 0.1827 0.2998 #> b         0.5128 0.0269 20000 0.4589 0.5646 #> a         0.4946 0.0254 20000 0.4442 0.5433 #> X~~X      1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y      0.5568 0.0249 20000 0.5078 0.6052 #> M~~M      0.7554 0.0251 20000 0.7048 0.8027 #> indirect -0.0128 0.0188 20000 0.2174 0.2909 #> direct   -0.0222 0.0298 20000 0.1827 0.2998 #> total     0.0024 0.0256 20000 0.4426 0.5435"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"","code":"summary(df) #>        X                  M                  Y            #>  Min.   :-3.19956   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.63268   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.02823   Median : 0.02825   Median :-0.04833   #>  Mean   : 0.00269   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.65754   3rd Qu.: 0.65240   3rd Qu.: 0.65293   #>  Max.   : 3.47091   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100        NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"can now fit model using sem() function lavaan. need deal missing values stage.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"fit lavaan object mi mids object can passed MCMI() function semmcci generate Monte Carlo confidence intervals using multiple imputation described Pesigan Cheung (2023).","code":"MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0299 20000 0.1741 0.2917 #> b        0.5113 0.0301 20000 0.4529 0.5701 #> a        0.4811 0.0287 20000 0.4241 0.5374 #> X~~X     1.0617 0.0495 20000 0.9650 1.1591 #> Y~~Y     0.5533 0.0272 20000 0.5005 0.6069 #> M~~M     0.7568 0.0361 20000 0.6856 0.8278 #> indirect 0.2460 0.0204 20000 0.2070 0.2864 #> direct   0.2328 0.0299 20000 0.1741 0.2917 #> total    0.4788 0.0285 20000 0.4236 0.5349"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"Standardized Monte Carlo Confidence intervals can generated passing result MCMI() function MCStd() function.","code":"fit <- sem(data = df, model = model) unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0307 20000 0.1802 0.3000 #> b        0.5189 0.0277 20000 0.4587 0.5663 #> a        0.5031 0.0260 20000 0.4429 0.5454 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0250 20000 0.5071 0.6053 #> M~~M     0.7469 0.0258 20000 0.7026 0.8038 #> indirect 0.2610 0.0190 20000 0.2168 0.2915 #> direct   0.2450 0.0307 20000 0.1802 0.3000 #> total    0.5060 0.0261 20000 0.4416 0.5444"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 5: Composite Reliability","text":"Assuming latent variable variance constrained one, omega total reliability coefficient given \\[   \\omega_{\\mathrm{total}}   =   \\frac{   \\left(   \\sum_{= 1}^{k}   \\lambda_{}   \\right)^2   }{   \\left(   \\sum_{= 1}^{k}   \\lambda_{}   \\right)^2   +   \\sum_{= 1}^{k}   \\theta_{\\varepsilon_{ii}}   } \\] \\(\\lambda_{}\\) factor loading item \\(\\), \\(\\theta_{\\varepsilon_{ii}}\\) residual variance item \\(\\), \\(k\\) number items particular latent variable. model specification , variances latent variables eta1, eta2, eta3 constrained one, relevant parameters labeled particularly factor loadings error variances, omega total reliability coefficient per latent variable defined using := operator.","code":"model <- \"   # fix latent variable variances to 1   eta1 ~~ 1 * eta1   eta2 ~~ 1 * eta2   eta3 ~~ 1 * eta3   # factor loadings   eta1 =~ NA * x1 + l11 * x1 + l12 * x2 + l13 * x3   eta2 =~ NA * x4 + l24 * x4 + l25 * x5 + l26 * x6   eta3 =~ NA * x7 + l37 * x7 + l38 * x8 + l39 * x9   # error variances   x1 ~~ t1 * x1   x2 ~~ t2 * x2   x3 ~~ t3 * x3   x4 ~~ t4 * x4   x5 ~~ t5 * x5   x6 ~~ t6 * x6   x7 ~~ t7 * x7   x8 ~~ t8 * x8   x9 ~~ t9 * x9   # composite reliability   omega1 := (l11 + l12 + l13)^2 / ((l11 + l12 + l13)^2 + (t1 + t2 + t3))   omega2 := (l24 + l25 + l26)^2 / ((l24 + l25 + l26)^2 + (t4 + t5 + t6))   omega3 := (l37 + l38 + l39)^2 / ((l37 + l38 + l39)^2 + (t7 + t8 + t9)) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 5: Composite Reliability","text":"can now fit model using cfa() function lavaan.","code":"fit <- cfa(model = model, data = HolzingerSwineford1939)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"Model Fitting","what":"Monte Carlo Confidence Intervals","title":"Example 5: Composite Reliability","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>               est     se     R   2.5%  97.5% #> eta1~~eta1 1.0000 0.0000 20000 1.0000 1.0000 #> eta2~~eta2 1.0000 0.0000 20000 1.0000 1.0000 #> eta3~~eta3 1.0000 0.0000 20000 1.0000 1.0000 #> l11        0.8996 0.0808 20000 0.7380 1.0566 #> l12        0.4979 0.0770 20000 0.3474 0.6502 #> l13        0.6562 0.0746 20000 0.5098 0.8026 #> l24        0.9897 0.0568 20000 0.8783 1.0987 #> l25        1.1016 0.0628 20000 0.9772 1.2245 #> l26        0.9166 0.0533 20000 0.8116 1.0212 #> l37        0.6195 0.0693 20000 0.4829 0.7561 #> l38        0.7309 0.0653 20000 0.6030 0.8596 #> l39        0.6700 0.0655 20000 0.5427 0.7990 #> t1         0.5491 0.1140 20000 0.3263 0.7750 #> t2         1.1338 0.1032 20000 0.9318 1.3374 #> t3         0.8443 0.0913 20000 0.6642 1.0226 #> t4         0.3712 0.0475 20000 0.2777 0.4634 #> t5         0.4463 0.0584 20000 0.3314 0.5609 #> t6         0.3562 0.0433 20000 0.2724 0.4413 #> t7         0.7994 0.0816 20000 0.6406 0.9556 #> t8         0.4877 0.0737 20000 0.3426 0.6319 #> t9         0.5661 0.0708 20000 0.4259 0.7034 #> eta1~~eta2 0.4585 0.0642 20000 0.3337 0.5866 #> eta1~~eta3 0.4705 0.0728 20000 0.3269 0.6131 #> eta2~~eta3 0.2830 0.0693 20000 0.1469 0.4192 #> omega1     0.6253 0.0363 20000 0.5491 0.6909 #> omega2     0.8852 0.0116 20000 0.8601 0.9057 #> omega3     0.6878 0.0311 20000 0.6212 0.7437"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"example, use data Kwan & Chan (2011) child’s reading ability (\\(Y_{1}\\)) regressed parental occupational status (\\(X_{1}\\)), parental educational level (\\(X_{2}\\)), child’s home possession (\\(X_{3}\\)) \\[     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . \\] Note \\(\\zeta_{1}\\) stochastic error term expected value zero finite variance \\(\\psi_{1}\\), \\(\\alpha_{1}\\) intercept, \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) regression coefficients.","code":"covs #>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"regress Y1 X1, X2, X3.","code":"model <- \"   Y1 ~ X1 + X2 + X3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R    2.5%  97.5% #> Y1~X1  0.1207 0.0900 20000 -0.0589 0.2945 #> Y1~X2  0.0491 0.0913 20000 -0.1294 0.2286 #> Y1~X3  0.2194 0.0709 20000  0.0784 0.3562 #> Y1~~Y1 0.9002 0.0405 20000  0.8005 0.9579 #> X1~~X1 1.0000 0.0000 20000  1.0000 1.0000 #> X1~~X2 0.6606 0.0406 20000  0.5745 0.7348 #> X1~~X3 0.3547 0.0627 20000  0.2252 0.4715 #> X2~~X2 1.0000 0.0000 20000  1.0000 1.0000 #> X2~~X3 0.3743 0.0622 20000  0.2480 0.4901 #> X3~~X3 1.0000 0.0000 20000  1.0000 1.0000"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"example, use data Kwan & Chan (2011) child’s reading ability (\\(Y_{1}\\)) regressed parental occupational status (\\(X_{1}\\)), parental educational level (\\(X_{2}\\)), child’s home possession (\\(X_{3}\\)) \\[     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . \\] Note \\(\\zeta_{1}\\) stochastic error term expected value zero finite variance \\(\\psi_{1}\\), \\(\\alpha_{1}\\) intercept, \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) regression coefficients.","code":"#>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 covs #>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"regress Y1 X1, X2, X3. label regression coefficients gamma1, gamma2, gamma3. specify difference coefficients using := operator.","code":"model <- \"   Y1 ~ gamma1 * X1 + gamma2 * X2 + gamma3 * X3   gamma12 := gamma1 - gamma2   gamma13 := gamma1 - gamma3   gamma23 := gamma2 - gamma3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R    2.5%  97.5% #> gamma1   0.1207 0.0900 20000 -0.0589 0.2945 #> gamma2   0.0491 0.0913 20000 -0.1294 0.2286 #> gamma3   0.2194 0.0709 20000  0.0784 0.3562 #> Y1~~Y1   0.9002 0.0405 20000  0.8005 0.9579 #> X1~~X1   1.0000 0.0000 20000  1.0000 1.0000 #> X1~~X2   0.6606 0.0406 20000  0.5745 0.7348 #> X1~~X3   0.3547 0.0627 20000  0.2252 0.4715 #> X2~~X2   1.0000 0.0000 20000  1.0000 1.0000 #> X2~~X3   0.3743 0.0622 20000  0.2480 0.4901 #> X3~~X3   1.0000 0.0000 20000  1.0000 1.0000 #> gamma12  0.0716 0.1631 20000 -0.2469 0.3936 #> gamma13 -0.0987 0.1242 20000 -0.3412 0.1438 #> gamma23 -0.1703 0.1271 20000 -0.4168 0.0827"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"example, use data Kwan & Chan (2011) child’s reading ability (\\(Y_{1}\\)) regressed home educational resources home educational resources (\\(Y_{2}\\)) regressed parental occupational status (\\(X_{1}\\)), parental educational level (\\(X_{2}\\)), child’s home possession (\\(X_{3}\\)) \\[     Y_{1}     =     \\alpha_{1}     +     \\beta_{1}     Y_{2}     +     \\zeta_{1} , \\] \\[     Y_{2}     =     \\alpha_{2}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{2} . \\] Note \\(\\zeta_{1}\\) \\(\\zeta_{2}\\) stochastic error terms expected value zero finite variance \\(\\psi_{1}\\) \\(\\psi_{2}\\), \\(\\alpha_{1}\\) \\(\\alpha_{2}\\) intercepts, \\(\\beta_{1}\\), \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) regression coefficients.","code":"covs #>           Y1      Y2       X1      X2      X3 #> Y1 6088.8281 15.7012 271.1429 49.5848 20.0337 #> Y2   15.7012  0.7084   1.9878  1.0043  0.2993 #> X1  271.1429  1.9878 226.2577 29.9232  4.8812 #> X2   49.5848  1.0043  29.9232  9.0692  1.0312 #> X3   20.0337  0.2993   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"regress Y1 Y2 Y2 X1, X2, X3. label error variances psi1 psi2. \\(R^{2}\\) \\(\\bar{R}^{2}\\) defined using := operator lavaan model syntax using following equations \\[     R^{2}     =     1 - \\psi^{\\ast} \\] \\[     \\bar{R}^{2}     =     1     -     \\left(     \\frac{n - 1}{n - p + 1}     \\right)     \\left(     1 - R^2     \\right) \\] \\(\\psi^{\\ast}\\) standardized error variance, \\(n\\) sample size, \\(p\\) number regressor variables.","code":"model <- \"   Y1 ~ Y2   Y2 ~ X1 + X2 + X3   Y1 ~~ psi1 * Y1   Y2 ~~ psi2 * Y2   rsq1 := 1 - psi1   rsqbar1 := 1 - (     (200 - 1) / (200 - 1 + 1)   ) * (     1 - rsq1   )   rsq2 := 1 - psi2   rsqbar2 := 1 - (     (200 - 1) / (200 - 3 + 1)   ) * (     1 - rsq2   ) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs ) #> Error: lavaan->ldw_parse_step2():   #>    formula without valid operator at line 7, pos 5 #>     (200 - 1) / (200 - 1 + 1) #>     ^"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: parameterization \\(R^{2}\\) \\(\\bar{R}^{2}\\) interpreted using output MCStd() function since input functions defined := require standardized estimates.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) #> Error in eval(expr, envir, enclos): object 'fit' not found MCStd(unstd, alpha = 0.05) #> Error in eval(expr, envir, enclos): object 'unstd' not found"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"example, use data Kwan & Chan (2014) three groups (Hong Kong, Japan, Korea) child’s reading ability (\\(Y_{1}\\)) regressed parental occupational status (\\(X_{1}\\)), parental educational level (\\(X_{2}\\)), child’s home possession (\\(X_{3}\\)) \\[     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . \\] Note \\(\\zeta_{1}\\) stochastic error term expected value zero finite variance \\(\\psi_{1}\\), \\(\\alpha_{1}\\) intercept, \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) regression coefficients. Covariance Matrix Hong Kong Covariance Matrix Japan Covariance Matrix Korea","code":"knitr::kable(   x = covs_hongkong, digits = 4,   caption = \"Covariance Matrix for Hong Kong\" ) nobs_hongkong #> [1] 4625 knitr::kable(   x = covs_japan, digits = 4,   caption = \"Covariance Matrix for Japan\" ) nobs_japan #> [1] 5943 knitr::kable(   x = covs_korea, digits = 4,   caption = \"Covariance Matrix for Korea\" ) nobs_korea #> [1] 5151"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"regress Y1 X1, X2, X3. label regression coefficient \\(\\gamma_{1}\\) three groups gamma1.g1, gamma1.g2, gamma1.g3, \\(\\gamma_{2}\\) three groups gamma2.g1, gamma2.g2, gamma2.g3, \\(\\gamma_{3}\\) three groups gamma3.g1, gamma3.g2, gamma3.g3.","code":"model <- \"   Y1 ~ c(gamma1.g1, gamma1.g2, gamma1.g3) * X1   Y1 ~ c(gamma2.g1, gamma2.g2, gamma2.g3) * X2   Y1 ~ c(gamma3.g1, gamma3.g2, gamma3.g3) * X3   gamma1.g12 := gamma1.g1 - gamma1.g2   gamma1.g13 := gamma1.g1 - gamma1.g3   gamma1.g23 := gamma1.g2 - gamma1.g3   gamma2.g12 := gamma2.g1 - gamma2.g2   gamma2.g13 := gamma2.g1 - gamma2.g3   gamma2.g23 := gamma2.g2 - gamma2.g3   gamma3.g12 := gamma3.g1 - gamma3.g2   gamma3.g13 := gamma3.g1 - gamma3.g3   gamma3.g23 := gamma3.g2 - gamma3.g3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = list(covs_hongkong, covs_japan, covs_korea),   sample.nobs = list(nobs_hongkong, nobs_japan, nobs_korea) )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                est     se     R    2.5%   97.5% #> gamma1.g1   0.0568 0.0191 20000  0.0194  0.0941 #> gamma2.g1   0.1985 0.0186 20000  0.1615  0.2355 #> gamma3.g1   0.2500 0.0150 20000  0.2208  0.2789 #> Y1~~Y1      0.8215 0.0103 20000  0.8006  0.8410 #> X1~~X1      1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2      0.6917 0.0077 20000  0.6764  0.7064 #> X1~~X3      0.4702 0.0115 20000  0.4476  0.4922 #> X2~~X2      1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3      0.4471 0.0118 20000  0.4238  0.4700 #> X3~~X3      1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g2   0.1390 0.0164 20000  0.1068  0.1712 #> gamma2.g2   0.1792 0.0158 20000  0.1479  0.2099 #> gamma3.g2   0.1688 0.0139 20000  0.1416  0.1961 #> Y1~~Y1.g2   0.8371 0.0088 20000  0.8196  0.8539 #> X1~~X1.g2   1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g2   0.6525 0.0075 20000  0.6375  0.6669 #> X1~~X3.g2   0.5023 0.0097 20000  0.4831  0.5209 #> X2~~X2.g2   1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g2   0.4452 0.0103 20000  0.4247  0.4652 #> X3~~X3.g2   1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g3   0.0863 0.0170 20000  0.0527  0.1194 #> gamma2.g3   0.2557 0.0164 20000  0.2235  0.2877 #> gamma3.g3   0.2289 0.0139 20000  0.2016  0.2564 #> Y1~~Y1.g3   0.7761 0.0103 20000  0.7556  0.7959 #> X1~~X1.g3   1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g3   0.6580 0.0079 20000  0.6422  0.6734 #> X1~~X3.g3   0.4738 0.0108 20000  0.4526  0.4947 #> X2~~X2.g3   1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g3   0.4353 0.0113 20000  0.4132  0.4570 #> X3~~X3.g3   1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g12 -0.0821 0.0251 20000 -0.1311 -0.0336 #> gamma1.g13 -0.0294 0.0257 20000 -0.0800  0.0207 #> gamma1.g23  0.0527 0.0236 20000  0.0069  0.0992 #> gamma2.g12  0.0193 0.0244 20000 -0.0288  0.0675 #> gamma2.g13 -0.0572 0.0248 20000 -0.1058 -0.0079 #> gamma2.g23 -0.0765 0.0228 20000 -0.1215 -0.0318 #> gamma3.g12  0.0811 0.0204 20000  0.0411  0.1208 #> gamma3.g13  0.0211 0.0204 20000 -0.0187  0.0612 #> gamma3.g23 -0.0601 0.0196 20000 -0.0988 -0.0217"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"example, use data Kwan & Chan (2014) three groups (Hong Kong, Japan, Korea) child’s reading ability (\\(Y_{1}\\)) regressed parental occupational status (\\(X_{1}\\)), parental educational level (\\(X_{2}\\)), child’s home possession (\\(X_{3}\\)) \\[     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . \\] Note \\(\\zeta_{1}\\) stochastic error term expected value zero finite variance \\(\\psi_{1}\\), \\(\\alpha_{1}\\) intercept, \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) regression coefficients. Covariance Matrix Hong Kong Covariance Matrix Japan Covariance Matrix Korea","code":"knitr::kable(   x = covs_hongkong, digits = 4,   caption = \"Covariance Matrix for Hong Kong\" ) nobs_hongkong #> [1] 4625 knitr::kable(   x = covs_japan, digits = 4,   caption = \"Covariance Matrix for Japan\" ) nobs_japan #> [1] 5943 nobs_korea <- 5151 covs_korea <- matrix(   data = c(     8187.6921, 31.6266, 37.3062, 30.9021,     31.6266, 0.9271, 0.6338, 0.4088,     37.3062, 0.6338, 1.0007, 0.3902,     30.9021, 0.4088, 0.3902, 0.8031   ),   nrow = 4 ) colnames(covs_korea) <- rownames(covs_korea) <- varnames knitr::kable(   x = covs_korea, digits = 4,   caption = \"Covariance Matrix for Korea\" )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"regress Y1 X1, X2, X3. label error variance \\(\\zeta_{1}\\) three groups psi1.g1, psi1.g2, psi1.g3. \\(R^{2}\\) defined using := operator lavaan model syntax using following equation \\[     R^{2}     =     1 - \\psi^{\\ast} \\] \\(\\psi^{\\ast}\\) standardized error variance.","code":"model <- \"   Y1 ~ X1 + X2 + X3   Y1 ~~ c(psi1.g1, psi1.g2, psi1.g3) * Y1   rsq.g1 := 1 - psi1.g1   rsq.g2 := 1 - psi1.g2   rsq.g3 := 1 - psi1.g3   rsq.g12 := rsq.g1 - rsq.g2   rsq.g13 := rsq.g1 - rsq.g3   rsq.g23 := rsq.g2 - rsq.g3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2014). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = list(covs_hongkong, covs_japan, covs_korea),   sample.nobs = list(nobs_hongkong, nobs_japan, nobs_korea) )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: parameterization \\(R^{2}\\) interpreted using output MCStd() function since input functions defined := require standardized estimates.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>               est     se     R    2.5%   97.5% #> Y1~X1      0.0568 0.0191 20000  0.0194  0.0941 #> Y1~X2      0.1985 0.0186 20000  0.1615  0.2355 #> Y1~X3      0.2500 0.0150 20000  0.2208  0.2789 #> psi1.g1    0.8215 0.0103 20000  0.8006  0.8410 #> X1~~X1     1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2     0.6917 0.0077 20000  0.6764  0.7064 #> X1~~X3     0.4702 0.0115 20000  0.4476  0.4922 #> X2~~X2     1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3     0.4471 0.0118 20000  0.4238  0.4700 #> X3~~X3     1.0000 0.0000 20000  1.0000  1.0000 #> Y1~X1.g2   0.1390 0.0164 20000  0.1068  0.1712 #> Y1~X2.g2   0.1792 0.0158 20000  0.1479  0.2099 #> Y1~X3.g2   0.1688 0.0139 20000  0.1416  0.1961 #> psi1.g2    0.8371 0.0088 20000  0.8196  0.8539 #> X1~~X1.g2  1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g2  0.6525 0.0075 20000  0.6375  0.6669 #> X1~~X3.g2  0.5023 0.0097 20000  0.4831  0.5209 #> X2~~X2.g2  1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g2  0.4452 0.0103 20000  0.4247  0.4652 #> X3~~X3.g2  1.0000 0.0000 20000  1.0000  1.0000 #> Y1~X1.g3   0.0863 0.0170 20000  0.0527  0.1194 #> Y1~X2.g3   0.2557 0.0164 20000  0.2235  0.2877 #> Y1~X3.g3   0.2289 0.0139 20000  0.2016  0.2564 #> psi1.g3    0.7761 0.0103 20000  0.7556  0.7959 #> X1~~X1.g3  1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g3  0.6580 0.0079 20000  0.6422  0.6734 #> X1~~X3.g3  0.4738 0.0108 20000  0.4526  0.4947 #> X2~~X2.g3  1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g3  0.4353 0.0113 20000  0.4132  0.4570 #> X3~~X3.g3  1.0000 0.0000 20000  1.0000  1.0000 #> rsq.g1     0.1785 0.0103 20000  0.1590  0.1994 #> rsq.g2     0.1629 0.0088 20000  0.1461  0.1804 #> rsq.g3     0.2239 0.0103 20000  0.2041  0.2444 #> rsq.g12    0.0155 0.0136 20000 -0.0108  0.0425 #> rsq.g13   -0.0455 0.0145 20000 -0.0741 -0.0170 #> rsq.g23   -0.0610 0.0135 20000 -0.0878 -0.0344"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"semmcci: Methods (MI)","text":"","code":"summary(df) #>        X                  M                  Y            #>  Min.   :-3.19956   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.63268   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.02823   Median : 0.02825   Median :-0.04833   #>  Mean   : 0.00269   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.65754   3rd Qu.: 0.65240   3rd Qu.: 0.65293   #>  Max.   : 3.47091   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100        NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"semmcci: Methods (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"semmcci: Methods (MI)","text":"","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"semmcci: Methods (MI)","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"semmcci: Methods (MI)","text":"","code":"unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"print","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MI)","text":"","code":"print(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0298 20000 0.1744 0.2915 #> b        0.5113 0.0300 20000 0.4527 0.5699 #> a        0.4811 0.0287 20000 0.4249 0.5375 #> X~~X     1.0617 0.0498 20000 0.9633 1.1595 #> Y~~Y     0.5533 0.0273 20000 0.5005 0.6070 #> M~~M     0.7568 0.0362 20000 0.6861 0.8292 #> indirect 0.2460 0.0204 20000 0.2075 0.2872 #> direct   0.2328 0.0298 20000 0.1744 0.2915 #> total    0.4788 0.0283 20000 0.4237 0.5348"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MI)","text":"","code":"summary(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0298 20000 0.1744 0.2915 #> b        0.5113 0.0300 20000 0.4527 0.5699 #> a        0.4811 0.0287 20000 0.4249 0.5375 #> X~~X     1.0617 0.0498 20000 0.9633 1.1595 #> Y~~Y     0.5533 0.0273 20000 0.5005 0.6070 #> M~~M     0.7568 0.0362 20000 0.6861 0.8292 #> indirect 0.2460 0.0204 20000 0.2075 0.2872 #> direct   0.2328 0.0298 20000 0.1744 0.2915 #> total    0.4788 0.0283 20000 0.4237 0.5348"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MI)","text":"","code":"coef(unstd) #>        cp         b         a      X~~X      Y~~Y      M~~M  indirect    direct  #> 0.2328242 0.5113353 0.4810732 1.0617011 0.5533052 0.7567771 0.2459664 0.2328242  #>     total  #> 0.4787907"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MI)","text":"","code":"vcov(unstd) #>                     cp             b             a          X~~X          Y~~Y #> cp        8.872611e-04 -4.825737e-04 -3.824669e-05 -4.321272e-06 -2.555582e-05 #> b        -4.825737e-04  8.984624e-04 -1.424868e-05 -9.094629e-06 -2.138968e-05 #> a        -3.824669e-05 -1.424868e-05  8.245502e-04 -9.762738e-06  2.345948e-05 #> X~~X     -4.321272e-06 -9.094629e-06 -9.762738e-06  2.482004e-03 -3.637155e-05 #> Y~~Y     -2.555582e-05 -2.138968e-05  2.345948e-05 -3.637155e-05  7.461613e-04 #> M~~M     -1.184334e-05  1.451844e-06 -7.325707e-05 -3.164943e-05  1.253165e-06 #> indirect -2.515291e-04  4.250558e-04  4.146088e-04 -9.410465e-06  1.205793e-06 #> direct    8.872611e-04 -4.825737e-04 -3.824669e-05 -4.321272e-06 -2.555582e-05 #> total     6.357320e-04 -5.751788e-05  3.763621e-04 -1.373174e-05 -2.435003e-05 #>                   M~~M      indirect        direct         total #> cp       -1.184334e-05 -2.515291e-04  8.872611e-04  6.357320e-04 #> b         1.451844e-06  4.250558e-04 -4.825737e-04 -5.751788e-05 #> a        -7.325707e-05  4.146088e-04 -3.824669e-05  3.763621e-04 #> X~~X     -3.164943e-05 -9.410465e-06 -4.321272e-06 -1.373174e-05 #> Y~~Y      1.253165e-06  1.205793e-06 -2.555582e-05 -2.435003e-05 #> M~~M      1.309822e-03 -3.670129e-05 -1.184334e-05 -4.854463e-05 #> indirect -3.670129e-05  4.171909e-04 -2.515291e-04  1.656619e-04 #> direct   -1.184334e-05 -2.515291e-04  8.872611e-04  6.357320e-04 #> total    -4.854463e-05  1.656619e-04  6.357320e-04  8.013939e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MI)","text":"","code":"confint(unstd, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1743744 0.2915214 #> b        0.4527060 0.5699042 #> a        0.4248983 0.5375377 #> X~~X     0.9632929 1.1594564 #> Y~~Y     0.5004785 0.6069742 #> M~~M     0.6861364 0.8292369 #> indirect 0.2074642 0.2872096 #> direct   0.1743744 0.2915214 #> total    0.4236592 0.5347576"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"semmcci: Methods (MI)","text":"","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05) std <- MCStd(unstd, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"print-1","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MI)","text":"","code":"print(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0304 20000 0.1807 0.2994 #> b        0.5189 0.0272 20000 0.4593 0.5655 #> a        0.5031 0.0261 20000 0.4428 0.5452 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0251 20000 0.5064 0.6057 #> M~~M     0.7469 0.0258 20000 0.7028 0.8039 #> indirect 0.2610 0.0189 20000 0.2179 0.2921 #> direct   0.2450 0.0304 20000 0.1807 0.2994 #> total    0.5060 0.0264 20000 0.4420 0.5446"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"summary-1","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MI)","text":"","code":"summary(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0304 20000 0.1807 0.2994 #> b        0.5189 0.0272 20000 0.4593 0.5655 #> a        0.5031 0.0261 20000 0.4428 0.5452 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0251 20000 0.5064 0.6057 #> M~~M     0.7469 0.0258 20000 0.7028 0.8039 #> indirect 0.2610 0.0189 20000 0.2179 0.2921 #> direct   0.2450 0.0304 20000 0.1807 0.2994 #> total    0.5060 0.0264 20000 0.4420 0.5446"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"coef-1","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MI)","text":"","code":"coef(std) #>        cp         b         a      X~~X      Y~~Y      M~~M  indirect    direct  #> 0.2449797 0.5188628 0.5030687 1.0000000 0.5428754 0.7469219 0.2610236 0.2449797  #>     total  #> 0.5060033"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"vcov-1","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MI)","text":"","code":"vcov(std) #>                     cp             b             a          X~~X          Y~~Y #> cp        9.215025e-04 -5.956069e-04  4.381277e-06  1.765064e-20 -1.585313e-04 #> b        -5.956069e-04  7.376605e-04 -3.232885e-06 -2.078606e-20 -3.419181e-04 #> a         4.381277e-06 -3.232885e-06  6.814976e-04 -1.500755e-20 -1.676857e-04 #> X~~X      1.765064e-20 -2.078606e-20 -1.500755e-20  1.180947e-32  1.385308e-20 #> Y~~Y     -1.585313e-04 -3.419181e-04 -1.676857e-04  1.385308e-20  6.300103e-04 #> M~~M     -4.427549e-06  3.161828e-06 -6.734774e-04  1.243354e-20  1.658590e-04 #> indirect -2.928057e-04  3.635322e-04  3.480811e-04 -1.878354e-20 -2.549488e-04 #> direct    9.215025e-04 -5.956069e-04  4.381277e-06  1.765064e-20 -1.585313e-04 #> total     6.286968e-04 -2.320747e-04  3.524624e-04 -1.132895e-21 -4.134800e-04 #>                   M~~M      indirect        direct         total #> cp       -4.427549e-06 -2.928057e-04  9.215025e-04  6.286968e-04 #> b         3.161828e-06  3.635322e-04 -5.956069e-04 -2.320747e-04 #> a        -6.734774e-04  3.480811e-04  4.381277e-06  3.524624e-04 #> X~~X      1.243354e-20 -1.878354e-20  1.765064e-20 -1.132895e-21 #> Y~~Y      1.658590e-04 -2.549488e-04 -1.585313e-04 -4.134800e-04 #> M~~M      6.664645e-04 -3.440059e-04 -4.427549e-06 -3.484334e-04 #> indirect -3.440059e-04  3.590863e-04 -2.928057e-04  6.628063e-05 #> direct   -4.427549e-06 -2.928057e-04  9.215025e-04  6.286968e-04 #> total    -3.484334e-04  6.628063e-05  6.286968e-04  6.949775e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"confint-1","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MI)","text":"","code":"confint(std, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1807323 0.2993557 #> b        0.4592814 0.5655437 #> a        0.4428161 0.5451581 #> X~~X     1.0000000 1.0000000 #> Y~~Y     0.5063594 0.6056866 #> M~~M     0.7028027 0.8039139 #> indirect 0.2178821 0.2920912 #> direct   0.1807323 0.2993557 #> total    0.4419650 0.5445680"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"semmcci: Methods (MC)","text":"","code":"summary(df) #>        X                   M                   Y            #>  Min.   :-3.199558   Min.   :-3.371276   Min.   :-3.61432   #>  1st Qu.:-0.636035   1st Qu.:-0.692640   1st Qu.:-0.66146   #>  Median : 0.011377   Median : 0.007125   Median :-0.04726   #>  Mean   :-0.003207   Mean   :-0.023968   Mean   :-0.01677   #>  3rd Qu.: 0.651951   3rd Qu.: 0.647363   3rd Qu.: 0.62640   #>  Max.   : 3.470910   Max.   : 2.963216   Max.   : 3.09950 colMeans(df) #>            X            M            Y  #> -0.003206987 -0.023968103 -0.016774294 var(df) #>           X         M         Y #> X 1.0600162 0.5108780 0.5069458 #> M 0.5108780 0.9996606 0.6272104 #> Y 0.5069458 0.6272104 0.9837255"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"semmcci: Methods (MC)","text":"","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"semmcci: Methods (MC)","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"semmcci: Methods (MC)","text":"","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"print","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MC)","text":"","code":"print(unstd) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MC)","text":"","code":"summary(unstd) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MC)","text":"","code":"coef(unstd) #>        cp         b         a      Y~~Y      M~~M      X~~X  indirect    direct  #> 0.2333230 0.5081833 0.4819530 0.5461589 0.7526879 1.0589562 0.2449205 0.2333230  #>     total  #> 0.4782435"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MC)","text":"","code":"vcov(unstd) #>                     cp             b             a         Y~~Y          M~~M #> cp        6.975724e-04 -3.570594e-04  1.739434e-06 2.065846e-06 -4.029921e-06 #> b        -3.570594e-04  7.379603e-04 -7.450590e-06 1.744389e-06  6.618803e-06 #> a         1.739434e-06 -7.450590e-06  6.982971e-04 8.322624e-06 -5.021764e-06 #> Y~~Y      2.065846e-06  1.744389e-06  8.322624e-06 5.962836e-04  4.504744e-06 #> M~~M     -4.029921e-06  6.618803e-06 -5.021764e-06 4.504744e-06  1.148370e-03 #> X~~X      0.000000e+00  0.000000e+00  0.000000e+00 0.000000e+00  0.000000e+00 #> indirect -1.708943e-04  3.516821e-04  3.515320e-04 4.920373e-06  3.808621e-07 #> direct    6.975724e-04 -3.570594e-04  1.739434e-06 2.065846e-06 -4.029921e-06 #> total     5.266782e-04 -5.377290e-06  3.532714e-04 6.986219e-06 -3.649059e-06 #>          X~~X      indirect        direct         total #> cp          0 -1.708943e-04  6.975724e-04  5.266782e-04 #> b           0  3.516821e-04 -3.570594e-04 -5.377290e-06 #> a           0  3.515320e-04  1.739434e-06  3.532714e-04 #> Y~~Y        0  4.920373e-06  2.065846e-06  6.986219e-06 #> M~~M        0  3.808621e-07 -4.029921e-06 -3.649059e-06 #> X~~X        0  0.000000e+00  0.000000e+00  0.000000e+00 #> indirect    0  3.486997e-04 -1.708943e-04  1.778055e-04 #> direct      0 -1.708943e-04  6.975724e-04  5.266782e-04 #> total       0  1.778055e-04  5.266782e-04  7.044836e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MC)","text":"","code":"confint(unstd, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1819362 0.2849104 #> b        0.4552649 0.5613296 #> a        0.4301663 0.5339651 #> Y~~Y     0.4979155 0.5944224 #> M~~M     0.6857891 0.8187138 #> X~~X     1.0589562 1.0589562 #> indirect 0.2093636 0.2830510 #> direct   0.1819362 0.2849104 #> total    0.4261341 0.5305578"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"semmcci: Methods (MC)","text":"","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) std <- MCStd(unstd, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"print-1","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MC)","text":"","code":"print(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"summary-1","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MC)","text":"","code":"summary(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"coef-1","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MC)","text":"","code":"coef(std) #>        cp         b         a      Y~~Y      M~~M      X~~X  indirect    direct  #> 0.2422015 0.5122827 0.4962890 0.5557501 0.7536972 1.0000000 0.2542403 0.2422015  #>     total  #> 0.4964418"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"vcov-1","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MC)","text":"","code":"vcov(std) #>                     cp             b             a          Y~~Y          M~~M #> cp        7.091899e-04 -4.651025e-04  8.245583e-06 -1.168207e-04 -8.275421e-06 #> b        -4.651025e-04  6.083075e-04  2.339914e-05 -3.134309e-04 -2.305571e-05 #> a         8.245583e-06  2.339914e-05  5.769659e-04 -1.801830e-04 -5.706892e-04 #> Y~~Y     -1.168207e-04 -3.134309e-04 -1.801830e-04  5.569665e-04  1.782647e-04 #> M~~M     -8.275421e-06 -2.305571e-05 -5.706892e-04  1.782647e-04  5.651409e-04 #> X~~X      2.671076e-20 -3.148100e-20 -2.273202e-21  1.405878e-20  1.628771e-21 #> indirect -2.265255e-04  3.136098e-04  3.069966e-04 -2.474505e-04 -3.036457e-04 #> direct    7.091899e-04 -4.651025e-04  8.245583e-06 -1.168207e-04 -8.275421e-06 #> total     4.826644e-04 -1.514927e-04  3.152422e-04 -3.642712e-04 -3.119212e-04 #>                   X~~X      indirect        direct         total #> cp        2.671076e-20 -2.265255e-04  7.091899e-04  4.826644e-04 #> b        -3.148100e-20  3.136098e-04 -4.651025e-04 -1.514927e-04 #> a        -2.273202e-21  3.069966e-04  8.245583e-06  3.152422e-04 #> Y~~Y      1.405878e-20 -2.474505e-04 -1.168207e-04 -3.642712e-04 #> M~~M      1.628771e-21 -3.036457e-04 -8.275421e-06 -3.119212e-04 #> X~~X      1.187973e-32 -1.666048e-20  2.671076e-20  1.005028e-20 #> indirect -1.666048e-20  3.130369e-04 -2.265255e-04  8.651139e-05 #> direct    2.671076e-20 -2.265255e-04  7.091899e-04  4.826644e-04 #> total     1.005028e-20  8.651139e-05  4.826644e-04  5.691757e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"confint-1","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MC)","text":"","code":"confint(std, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1896616 0.2941122 #> b        0.4635708 0.5604860 #> a        0.4476424 0.5416327 #> Y~~Y     0.5089400 0.6015440 #> M~~M     0.7066340 0.7996163 #> X~~X     1.0000000 1.0000000 #> indirect 0.2198992 0.2890635 #> direct   0.1896616 0.2941122 #> total    0.4477209 0.5416757"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"the-monte-carlo-method","dir":"Articles","previous_headings":"","what":"The Monte Carlo Method","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) generated multivariate normal distribution using parameter estimates \\(\\hat{\\boldsymbol{\\theta}}\\) corresponding sampling variance-covariance matrix \\(\\widehat{\\mathrm{Var}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\). \\[\\begin{equation}     \\hat{\\boldsymbol{\\theta}}^{\\ast}     \\sim     \\mathcal{N}     \\left(     \\hat{\\boldsymbol{\\theta}},     \\widehat{\\mathrm{Var}}     \\left(     \\hat{\\boldsymbol{\\theta}}     \\right)     \\right) \\end{equation}\\] Confidence intervals defined parameters \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution, \\(\\alpha\\) significance level.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"semmcci","dir":"Articles","previous_headings":"","what":"semmcci","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo confidence intervals free defined parameters Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package three main functions, namely, MC(), MCMI(), MCStd(). output lavaan passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023: https://doi.org/10.3758/s13428-023-02114-4).","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"cite semmcci publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"semmcci: Session","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] Amelia_1.8.2          Rcpp_1.0.12           microbenchmark_1.4.10 #> [4] lavaan_0.6-18         semmcci_1.1.4.9000    #>  #> loaded via a namespace (and not attached): #>  [1] tidyr_1.3.1       utf8_1.2.4        generics_0.1.3    shape_1.4.6.1     #>  [5] bmemLavaan_0.5    lattice_0.22-6    mitml_0.4-5       lme4_1.1-35.4     #>  [9] magrittr_2.0.3    evaluate_0.24.0   grid_4.4.1        iterators_1.0.14  #> [13] mice_3.16.0       jomo_2.7-6        foreach_1.5.2     glmnet_4.1-8      #> [17] rprojroot_2.0.4   Matrix_1.7-0      nnet_7.3-19       backports_1.5.0   #> [21] snowfall_1.84-6.3 survival_3.6-4    purrr_1.0.2       fansi_1.0.6       #> [25] rProject_0.0.13   mi_1.1            pbivnorm_0.6.0    codetools_0.2-20  #> [29] abind_1.4-5       mnormt_2.1.1      cli_3.6.3.9000    rlang_1.1.4       #> [33] splines_4.4.1     pan_1.9           rsem_0.5.1        tools_4.4.1       #> [37] parallel_4.4.1    nloptr_2.1.1      coda_0.19-4.1     minqa_1.2.7       #> [41] dplyr_1.1.4       boot_1.3-30       broom_1.0.6       rpart_4.1.23      #> [45] vctrs_0.6.5       sem_3.1-15        R6_2.5.1          stats4_4.4.1      #> [49] lifecycle_1.0.4   MASS_7.3-60.2     foreign_0.8-86    pkgconfig_2.0.3   #> [53] pillar_1.9.0      glue_1.7.0        tidyselect_1.2.1  tibble_3.2.1      #> [57] arm_1.14-4        xfun_0.45         highr_0.11        knitr_1.47        #> [61] nlme_3.1-164      snow_0.4-4        compiler_4.4.1    quadprog_1.5-8"},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"semmcci: Session","text":"","code":"installed.packages()[, c(\"Package\", \"Version\")] #>                 Package           Version      #> Amelia          \"Amelia\"          \"1.8.2\"      #> arm             \"arm\"             \"1.14-4\"     #> bmemLavaan      \"bmemLavaan\"      \"0.5\"        #> mi              \"mi\"              \"1.1\"        #> pkgload         \"pkgload\"         \"1.4.0\"      #> ps              \"ps\"              \"1.7.7\"      #> roxygen2        \"roxygen2\"        \"7.3.2\"      #> rProject        \"rProject\"        \"0.0.13\"     #> rsem            \"rsem\"            \"0.5.1\"      #> sem             \"sem\"             \"3.1-15\"     #> semmcci         \"semmcci\"         \"1.1.4.9000\" #> tinytex         \"tinytex\"         \"0.51.1\"     #> abind           \"abind\"           \"1.4-5\"      #> arrow           \"arrow\"           \"16.1.0\"     #> ash             \"ash\"             \"1.0-15\"     #> AsioHeaders     \"AsioHeaders\"     \"1.22.1-2\"   #> askpass         \"askpass\"         \"1.2.0\"      #> assertthat      \"assertthat\"      \"0.2.1\"      #> backports       \"backports\"       \"1.5.0\"      #> base64enc       \"base64enc\"       \"0.1-3\"      #> betaDelta       \"betaDelta\"       \"1.0.5.9000\" #> betaMC          \"betaMC\"          \"1.3.2.9000\" #> betaNB          \"betaNB\"          \"1.0.4.9000\" #> betaSandwich    \"betaSandwich\"    \"1.0.7.9000\" #> BH              \"BH\"              \"1.84.0-0\"   #> bibtex          \"bibtex\"          \"0.5.1\"      #> BiocManager     \"BiocManager\"     \"1.30.23\"    #> bit             \"bit\"             \"4.0.5\"      #> bit64           \"bit64\"           \"4.0.5\"      #> bitops          \"bitops\"          \"1.0-7\"      #> blob            \"blob\"            \"1.2.4\"      #> brew            \"brew\"            \"1.0-10\"     #> brio            \"brio\"            \"1.1.5\"      #> broom           \"broom\"           \"1.0.6\"      #> bslib           \"bslib\"           \"0.7.0\"      #> cachem          \"cachem\"          \"1.1.0\"      #> callr           \"callr\"           \"3.7.6\"      #> car             \"car\"             \"3.1-2\"      #> caracas         \"caracas\"         \"2.1.1\"      #> carData         \"carData\"         \"3.0-5\"      #> cellranger      \"cellranger\"      \"1.1.0\"      #> cffr            \"cffr\"            \"1.0.1\"      #> checkmate       \"checkmate\"       \"2.3.1\"      #> cli             \"cli\"             \"3.6.3.9000\" #> clipr           \"clipr\"           \"0.8.0\"      #> clock           \"clock\"           \"0.7.0\"      #> coda            \"coda\"            \"0.19-4.1\"   #> cOde            \"cOde\"            \"1.1.1\"      #> collections     \"collections\"     \"0.3.7\"      #> colorspace      \"colorspace\"      \"2.1-0\"      #> commonmark      \"commonmark\"      \"1.9.1\"      #> conflicted      \"conflicted\"      \"1.2.0\"      #> corpcor         \"corpcor\"         \"1.6.10\"     #> covr            \"covr\"            \"3.6.4\"      #> cowplot         \"cowplot\"         \"1.1.3\"      #> cpp11           \"cpp11\"           \"0.4.7\"      #> crayon          \"crayon\"          \"1.5.3\"      #> credentials     \"credentials\"     \"2.0.1\"      #> crosstalk       \"crosstalk\"       \"1.2.1\"      #> cTMed           \"cTMed\"           \"0.9.1\"      #> ctsem           \"ctsem\"           \"3.10.0\"     #> curl            \"curl\"            \"5.2.1\"      #> cyclocomp       \"cyclocomp\"       \"1.1.1\"      #> data.table      \"data.table\"      \"1.15.4\"     #> DBI             \"DBI\"             \"1.2.3\"      #> dbplyr          \"dbplyr\"          \"2.5.0\"      #> Deriv           \"Deriv\"           \"4.1.3\"      #> desc            \"desc\"            \"1.4.3\"      #> deSolve         \"deSolve\"         \"1.40\"       #> devtools        \"devtools\"        \"2.4.5.9000\" #> diagram         \"diagram\"         \"1.6.5\"      #> dials           \"dials\"           \"1.2.1\"      #> DiceDesign      \"DiceDesign\"      \"1.10\"       #> diffobj         \"diffobj\"         \"0.3.5\"      #> digest          \"digest\"          \"0.6.36\"     #> distributional  \"distributional\"  \"0.4.0\"      #> distro          \"distro\"          \"0.1.0\"      #> doBy            \"doBy\"            \"4.6.22\"     #> docopt          \"docopt\"          \"0.7.1\"      #> doFuture        \"doFuture\"        \"1.0.1\"      #> downlit         \"downlit\"         \"0.4.4\"      #> dplyr           \"dplyr\"           \"1.1.4\"      #> DT              \"DT\"              \"0.33\"       #> dtplyr          \"dtplyr\"          \"1.3.1\"      #> duckdb          \"duckdb\"          \"1.0.0\"      #> dynr            \"dynr\"            \"0.1.16-105\" #> dynUtils        \"dynUtils\"        \"0.9.1\"      #> ellipse         \"ellipse\"         \"0.5.0\"      #> ellipsis        \"ellipsis\"        \"0.3.2\"      #> evaluate        \"evaluate\"        \"0.24.0\"     #> expm            \"expm\"            \"0.999-9\"    #> fansi           \"fansi\"           \"1.0.6\"      #> farver          \"farver\"          \"2.1.2\"      #> fastDummies     \"fastDummies\"     \"1.7.3\"      #> fastmap         \"fastmap\"         \"1.2.0\"      #> fclust          \"fclust\"          \"2.1.1.1\"    #> fda             \"fda\"             \"6.1.8\"      #> fdrtool         \"fdrtool\"         \"1.2.17\"     #> fds             \"fds\"             \"1.8\"        #> FNN             \"FNN\"             \"1.1.4\"      #> fontawesome     \"fontawesome\"     \"0.5.2\"      #> forcats         \"forcats\"         \"1.0.0\"      #> foreach         \"foreach\"         \"1.5.2\"      #> Formula         \"Formula\"         \"1.2-5\"      #> fs              \"fs\"              \"1.6.4\"      #> fst             \"fst\"             \"0.9.8\"      #> fstcore         \"fstcore\"         \"0.9.18\"     #> furrr           \"furrr\"           \"0.3.1\"      #> future          \"future\"          \"1.33.2\"     #> future.apply    \"future.apply\"    \"1.11.2\"     #> gargle          \"gargle\"          \"1.5.2\"      #> generics        \"generics\"        \"0.1.3\"      #> gert            \"gert\"            \"2.0.1\"      #> ggplot2         \"ggplot2\"         \"3.5.1\"      #> ggrepel         \"ggrepel\"         \"0.9.5\"      #> gh              \"gh\"              \"1.4.1\"      #> gitcreds        \"gitcreds\"        \"0.1.2\"      #> glasso          \"glasso\"          \"1.11\"       #> glmnet          \"glmnet\"          \"4.1-8\"      #> globals         \"globals\"         \"0.16.3\"     #> glue            \"glue\"            \"1.7.0\"      #> googledrive     \"googledrive\"     \"2.1.1\"      #> googlesheets4   \"googlesheets4\"   \"1.1.1\"      #> gower           \"gower\"           \"1.0.1\"      #> GPfit           \"GPfit\"           \"1.0-8\"      #> gridExtra       \"gridExtra\"       \"2.3\"        #> gsubfn          \"gsubfn\"          \"0.7\"        #> gtable          \"gtable\"          \"0.3.5\"      #> gtools          \"gtools\"          \"3.9.5\"      #> hardhat         \"hardhat\"         \"1.4.0\"      #> haven           \"haven\"           \"2.5.4\"      #> hdrcde          \"hdrcde\"          \"3.4\"        #> here            \"here\"            \"1.0.1\"      #> highr           \"highr\"           \"0.11\"       #> Hmisc           \"Hmisc\"           \"5.1-3\"      #> hms             \"hms\"             \"1.1.3\"      #> htmlTable       \"htmlTable\"       \"2.4.2\"      #> htmltools       \"htmltools\"       \"0.5.8.1\"    #> htmlwidgets     \"htmlwidgets\"     \"1.6.4\"      #> httpgd          \"httpgd\"          \"2.0.2\"      #> httpuv          \"httpuv\"          \"1.6.15\"     #> httr            \"httr\"            \"1.4.7\"      #> httr2           \"httr2\"           \"1.0.1\"      #> ids             \"ids\"             \"1.0.1\"      #> ifaTools        \"ifaTools\"        \"0.23\"       #> igraph          \"igraph\"          \"2.0.3\"      #> infer           \"infer\"           \"1.0.7\"      #> ini             \"ini\"             \"0.3.1\"      #> inline          \"inline\"          \"0.3.19\"     #> ipred           \"ipred\"           \"0.9-14\"     #> isoband         \"isoband\"         \"0.2.7\"      #> iterators       \"iterators\"       \"1.0.14\"     #> jomo            \"jomo\"            \"2.7-6\"      #> jpeg            \"jpeg\"            \"0.1-10\"     #> jquerylib       \"jquerylib\"       \"0.1.4\"      #> jsonlite        \"jsonlite\"        \"1.8.8\"      #> jsonvalidate    \"jsonvalidate\"    \"1.3.2\"      #> kernlab         \"kernlab\"         \"0.9-32\"     #> knitr           \"knitr\"           \"1.47\"       #> ks              \"ks\"              \"1.14.2\"     #> labeling        \"labeling\"        \"0.4.3\"      #> Lahman          \"Lahman\"          \"11.0-0\"     #> languageserver  \"languageserver\"  \"0.3.16\"     #> later           \"later\"           \"1.3.2\"      #> latex2exp       \"latex2exp\"       \"0.9.6\"      #> lava            \"lava\"            \"1.8.0\"      #> lavaan          \"lavaan\"          \"0.6-18\"     #> lazyeval        \"lazyeval\"        \"0.2.2\"      #> lhs             \"lhs\"             \"1.1.6\"      #> lifecycle       \"lifecycle\"       \"1.0.4\"      #> lintr           \"lintr\"           \"3.1.2\"      #> listenv         \"listenv\"         \"0.9.1\"      #> littler         \"littler\"         \"0.3.20\"     #> lme4            \"lme4\"            \"1.1-35.4\"   #> locfit          \"locfit\"          \"1.5-9.10\"   #> longMI          \"longMI\"          \"1.0.0\"      #> loo             \"loo\"             \"2.7.0\"      #> lubridate       \"lubridate\"       \"1.9.3\"      #> magick          \"magick\"          \"2.8.3\"      #> magrittr        \"magrittr\"        \"2.0.3\"      #> markdown        \"markdown\"        \"1.13\"       #> MatrixModels    \"MatrixModels\"    \"0.5-3\"      #> matrixStats     \"matrixStats\"     \"1.3.0\"      #> mclust          \"mclust\"          \"6.1.1\"      #> memoise         \"memoise\"         \"2.0.1\"      #> metaSEM         \"metaSEM\"         \"1.4.0\"      #> mice            \"mice\"            \"3.16.0\"     #> microbenchmark  \"microbenchmark\"  \"1.4.10\"     #> mime            \"mime\"            \"0.12\"       #> miniUI          \"miniUI\"          \"0.1.1.1\"    #> minqa           \"minqa\"           \"1.2.7\"      #> mitml           \"mitml\"           \"0.4-5\"      #> mize            \"mize\"            \"0.2.4\"      #> mnormt          \"mnormt\"          \"2.1.1\"      #> modeldata       \"modeldata\"       \"1.4.0\"      #> modelenv        \"modelenv\"        \"0.1.1\"      #> modelr          \"modelr\"          \"0.1.11\"     #> MplusAutomation \"MplusAutomation\" \"1.1.1\"      #> multicool       \"multicool\"       \"1.0.1\"      #> munsell         \"munsell\"         \"0.5.1\"      #> mvtnorm         \"mvtnorm\"         \"1.2-5\"      #> nloptr          \"nloptr\"          \"2.1.1\"      #> numDeriv        \"numDeriv\"        \"2016.8-1.1\" #> nycflights13    \"nycflights13\"    \"1.0.2\"      #> OpenMx          \"OpenMx\"          \"2.21.11\"    #> openssl         \"openssl\"         \"2.2.0\"      #> ordinal         \"ordinal\"         \"2023.12-4\"  #> pan             \"pan\"             \"1.9\"        #> pander          \"pander\"          \"0.6.5\"      #> parallelly      \"parallelly\"      \"1.37.1\"     #> parsnip         \"parsnip\"         \"1.2.1\"      #> patchwork       \"patchwork\"       \"1.2.0\"      #> pbapply         \"pbapply\"         \"1.7-2\"      #> pbivnorm        \"pbivnorm\"        \"0.6.0\"      #> pbkrtest        \"pbkrtest\"        \"0.5.2\"      #> pcaPP           \"pcaPP\"           \"2.0-4\"      #> pdftools        \"pdftools\"        \"3.4.0\"      #> pillar          \"pillar\"          \"1.9.0\"      #> pkgbuild        \"pkgbuild\"        \"1.4.4\"      #> pkgconfig       \"pkgconfig\"       \"2.0.3\"      #> pkgdown         \"pkgdown\"         \"2.0.9\"      #> pkgload         \"pkgload\"         \"1.3.4\"      #> plogr           \"plogr\"           \"0.2.0\"      #> plyr            \"plyr\"            \"1.8.9\"      #> png             \"png\"             \"0.1-8\"      #> posterior       \"posterior\"       \"1.5.0\"      #> pracma          \"pracma\"          \"2.4.4\"      #> praise          \"praise\"          \"1.0.0\"      #> prettyunits     \"prettyunits\"     \"1.2.0\"      #> printr          \"printr\"          \"0.3\"        #> processx        \"processx\"        \"3.8.4\"      #> prodlim         \"prodlim\"         \"2023.08.28\" #> profvis         \"profvis\"         \"0.3.8\"      #> progress        \"progress\"        \"1.2.3\"      #> progressr       \"progressr\"       \"0.14.0\"     #> promises        \"promises\"        \"1.3.0\"      #> proto           \"proto\"           \"1.0.0\"      #> ps              \"ps\"              \"1.7.6\"      #> psych           \"psych\"           \"2.4.3\"      #> purrr           \"purrr\"           \"1.0.2\"      #> qgraph          \"qgraph\"          \"1.9.8\"      #> qpdf            \"qpdf\"            \"1.3.3\"      #> quadprog        \"quadprog\"        \"1.5-8\"      #> quantreg        \"quantreg\"        \"5.98\"       #> quarto          \"quarto\"          \"1.4\"        #> QuickJSR        \"QuickJSR\"        \"1.2.2\"      #> R.cache         \"R.cache\"         \"0.16.0\"     #> R.methodsS3     \"R.methodsS3\"     \"1.8.2\"      #> R.oo            \"R.oo\"            \"1.26.0\"     #> R.utils         \"R.utils\"         \"2.12.3\"     #> R6              \"R6\"              \"2.5.1\"      #> ragg            \"ragg\"            \"1.3.2\"      #> rainbow         \"rainbow\"         \"3.8\"        #> rappdirs        \"rappdirs\"        \"0.3.3\"      #> rbibutils       \"rbibutils\"       \"2.2.16\"     #> rcmdcheck       \"rcmdcheck\"       \"1.4.0\"      #> RColorBrewer    \"RColorBrewer\"    \"1.1-3\"      #> Rcpp            \"Rcpp\"            \"1.0.12\"     #> RcppArmadillo   \"RcppArmadillo\"   \"0.12.8.4.0\" #> RcppEigen       \"RcppEigen\"       \"0.3.4.0.0\"  #> RcppGSL         \"RcppGSL\"         \"0.3.13\"     #> RcppParallel    \"RcppParallel\"    \"5.1.7\"      #> RcppTOML        \"RcppTOML\"        \"0.2.2\"      #> RCurl           \"RCurl\"           \"1.98-1.14\"  #> Rdpack          \"Rdpack\"          \"2.6\"        #> readr           \"readr\"           \"2.1.5\"      #> readxl          \"readxl\"          \"1.4.3\"      #> recipes         \"recipes\"         \"1.0.10\"     #> RefManageR      \"RefManageR\"      \"1.4.0\"      #> rematch         \"rematch\"         \"2.0.0\"      #> rematch2        \"rematch2\"        \"2.1.2\"      #> remotes         \"remotes\"         \"2.5.0\"      #> reprex          \"reprex\"          \"2.1.0\"      #> reshape2        \"reshape2\"        \"1.4.4\"      #> reticulate      \"reticulate\"      \"1.38.0\"     #> rex             \"rex\"             \"1.2.1\"      #> rhub            \"rhub\"            \"2.0.0\"      #> rlang           \"rlang\"           \"1.1.4\"      #> RMariaDB        \"RMariaDB\"        \"1.3.2\"      #> rmarkdown       \"rmarkdown\"       \"2.27\"       #> roxygen2        \"roxygen2\"        \"7.3.1\"      #> rpf             \"rpf\"             \"1.0.14\"     #> RPostgres       \"RPostgres\"       \"1.4.7\"      #> rProject        \"rProject\"        \"0.0.13\"     #> rprojroot       \"rprojroot\"       \"2.0.4\"      #> rsample         \"rsample\"         \"1.2.1\"      #> RSQLite         \"RSQLite\"         \"2.3.7\"      #> rstan           \"rstan\"           \"2.32.6\"     #> rstantools      \"rstantools\"      \"2.4.0\"      #> rstudioapi      \"rstudioapi\"      \"0.16.0\"     #> rversions       \"rversions\"       \"2.1.2\"      #> rvest           \"rvest\"           \"1.0.4\"      #> Ryacas          \"Ryacas\"          \"1.1.5\"      #> sass            \"sass\"            \"0.4.9\"      #> scales          \"scales\"          \"1.3.0\"      #> selectr         \"selectr\"         \"0.4-2\"      #> semlbci         \"semlbci\"         \"0.11.2\"     #> semmcci         \"semmcci\"         \"1.1.4.9000\" #> sessioninfo     \"sessioninfo\"     \"1.2.2\"      #> shape           \"shape\"           \"1.4.6.1\"    #> shiny           \"shiny\"           \"1.8.1.1\"    #> simStateSpace   \"simStateSpace\"   \"1.2.2.9000\" #> slider          \"slider\"          \"0.3.1\"      #> snow            \"snow\"            \"0.4-4\"      #> snowfall        \"snowfall\"        \"1.84-6.3\"   #> sourcetools     \"sourcetools\"     \"0.1.7-1\"    #> SparseM         \"SparseM\"         \"1.83\"       #> SQUAREM         \"SQUAREM\"         \"2021.1\"     #> StanHeaders     \"StanHeaders\"     \"2.32.9\"     #> statmod         \"statmod\"         \"1.5.0\"      #> stringi         \"stringi\"         \"1.8.4\"      #> stringr         \"stringr\"         \"1.5.1\"      #> styler          \"styler\"          \"1.10.3\"     #> symSEM          \"symSEM\"          \"0.4\"        #> sys             \"sys\"             \"3.4.2\"      #> systemfonts     \"systemfonts\"     \"1.1.0\"      #> tensorA         \"tensorA\"         \"0.36.2.1\"   #> testthat        \"testthat\"        \"3.2.1.9000\" #> texreg          \"texreg\"          \"1.39.3\"     #> textshaping     \"textshaping\"     \"0.4.0\"      #> tibble          \"tibble\"          \"3.2.1\"      #> tidymodels      \"tidymodels\"      \"1.2.0\"      #> tidyr           \"tidyr\"           \"1.3.1\"      #> tidyselect      \"tidyselect\"      \"1.2.1\"      #> tidyverse       \"tidyverse\"       \"2.0.0\"      #> timechange      \"timechange\"      \"0.3.0\"      #> timeDate        \"timeDate\"        \"4032.109\"   #> tinytex         \"tinytex\"         \"0.51.1\"     #> tune            \"tune\"            \"1.2.1\"      #> tzdb            \"tzdb\"            \"0.4.0\"      #> ucminf          \"ucminf\"          \"1.2.2\"      #> unigd           \"unigd\"           \"0.1.2\"      #> urlchecker      \"urlchecker\"      \"1.0.1\"      #> usethis         \"usethis\"         \"2.2.3\"      #> utf8            \"utf8\"            \"1.2.4\"      #> uuid            \"uuid\"            \"1.2-0\"      #> V8              \"V8\"              \"4.4.2\"      #> vctrs           \"vctrs\"           \"0.6.5\"      #> viridis         \"viridis\"         \"0.6.5\"      #> viridisLite     \"viridisLite\"     \"0.4.2\"      #> vroom           \"vroom\"           \"1.6.5\"      #> waldo           \"waldo\"           \"0.5.2\"      #> warp            \"warp\"            \"0.2.1\"      #> whisker         \"whisker\"         \"0.4.1\"      #> whoami          \"whoami\"          \"1.3.0\"      #> withr           \"withr\"           \"3.0.0\"      #> workflows       \"workflows\"       \"1.1.4\"      #> workflowsets    \"workflowsets\"    \"1.1.0\"      #> xfun            \"xfun\"            \"0.45\"       #> xml2            \"xml2\"            \"1.3.6\"      #> xmlparsedata    \"xmlparsedata\"    \"1.0.5\"      #> xopen           \"xopen\"           \"1.0.1\"      #> xtable          \"xtable\"          \"1.8-4\"      #> yaml            \"yaml\"            \"2.3.8\"      #> yardstick       \"yardstick\"       \"1.3.1\"      #> zip             \"zip\"             \"2.3.1\"      #> base            \"base\"            \"4.4.1\"      #> boot            \"boot\"            \"1.3-30\"     #> class           \"class\"           \"7.3-22\"     #> cluster         \"cluster\"         \"2.1.6\"      #> codetools       \"codetools\"       \"0.2-20\"     #> compiler        \"compiler\"        \"4.4.1\"      #> datasets        \"datasets\"        \"4.4.1\"      #> foreign         \"foreign\"         \"0.8-86\"     #> graphics        \"graphics\"        \"4.4.1\"      #> grDevices       \"grDevices\"       \"4.4.1\"      #> grid            \"grid\"            \"4.4.1\"      #> KernSmooth      \"KernSmooth\"      \"2.23-24\"    #> lattice         \"lattice\"         \"0.22-6\"     #> MASS            \"MASS\"            \"7.3-60.2\"   #> Matrix          \"Matrix\"          \"1.7-0\"      #> methods         \"methods\"         \"4.4.1\"      #> mgcv            \"mgcv\"            \"1.9-1\"      #> nlme            \"nlme\"            \"3.1-164\"    #> nnet            \"nnet\"            \"7.3-19\"     #> parallel        \"parallel\"        \"4.4.1\"      #> rpart           \"rpart\"           \"4.1.23\"     #> spatial         \"spatial\"         \"7.3-17\"     #> splines         \"splines\"         \"4.4.1\"      #> stats           \"stats\"           \"4.4.1\"      #> stats4          \"stats4\"          \"4.4.1\"      #> survival        \"survival\"        \"3.6-4\"      #> tcltk           \"tcltk\"           \"4.4.1\"      #> tools           \"tools\"           \"4.4.1\"      #> utils           \"utils\"           \"4.4.1\""},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"semmcci: Session","text":"","code":"#> Architecture:                       x86_64 #> CPU op-mode(s):                     32-bit, 64-bit #> Address sizes:                      46 bits physical, 48 bits virtual #> Byte Order:                         Little Endian #> CPU(s):                             24 #> On-line CPU(s) list:                0-23 #> Vendor ID:                          GenuineIntel #> Model name:                         Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz #> CPU family:                         6 #> Model:                              79 #> Thread(s) per core:                 1 #> Core(s) per socket:                 12 #> Socket(s):                          2 #> Stepping:                           1 #> CPU max MHz:                        2900.0000 #> CPU min MHz:                        1200.0000 #> BogoMIPS:                           4389.73 #> Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear flush_l1d #> L1d cache:                          768 KiB (24 instances) #> L1i cache:                          768 KiB (24 instances) #> L2 cache:                           6 MiB (24 instances) #> L3 cache:                           60 MiB (2 instances) #> NUMA node(s):                       2 #> NUMA node0 CPU(s):                  0,2,4,6,8,10,12,14,16,18,20,22 #> NUMA node1 CPU(s):                  1,3,5,7,9,11,13,15,17,19,21,23 #> Vulnerability Gather data sampling: Not affected #> Vulnerability Itlb multihit:        KVM: Mitigation: VMX unsupported #> Vulnerability L1tf:                 Mitigation; PTE Inversion #> Vulnerability Mds:                  Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Meltdown:             Mitigation; PTI #> Vulnerability Mmio stale data:      Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Retbleed:             Not affected #> Vulnerability Spec rstack overflow: Not affected #> Vulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, IBRS_FW, RSB filling, PBRSB-eIBRS Not affected #> Vulnerability Srbds:                Not affected #> Vulnerability Tsx async abort:      Mitigation; Clear CPU buffers; SMT disabled"},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"semmcci: Session","text":"","code":"#>                total        used        free      shared  buff/cache   available #> Mem:           125Gi       3.3Gi        57Gi       4.7Gi        64Gi       116Gi #> Swap:             0B          0B          0B #> Total:         125Gi       3.3Gi        57Gi"},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder. Shu Fai Cheung. Contributor.","code":""},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. https://doi.org/10.3758/s13428-023-02114-4","code":"@Article{,   author = {Ivan Jacob Agaloos Pesigan and Shu Fai Cheung},   title = {Monte Carlo confidence intervals for the indirect effect with missing data},   year = {2023},   doi = {10.3758/s13428-023-02114-4},   journal = {Behavior Research Methods}, }"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"semmcci","dir":"","previous_headings":"","what":"Monte Carlo Confidence Intervals in Structural Equation Modeling","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Ivan Jacob Agaloos Pesigan 2024-07-05","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated obtaining percentiles corresponding 100(1 - α)% generated sampling distribution, α significance level. Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package three main functions, namely, MC(), MCMI(), MCStd(). output lavaan passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023: https://doi.org/10.3758/s13428-023-02114-4).","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"common application Monte Carlo method generate confidence intervals indirect effect. simple mediation model, variable X effect variable Y, mediating variable M. mediating indirect effect product path coefficients fitted model.","code":"library(semmcci) library(lavaan)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"data","dir":"","previous_headings":"Example","what":"Data","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"","code":"summary(df) #>        X                  M                  Y            #>  Min.   :-2.94554   Min.   :-3.31844   Min.   :-3.19579   #>  1st Qu.:-0.65195   1st Qu.:-0.63960   1st Qu.:-0.70557   #>  Median : 0.01835   Median : 0.01995   Median :-0.05567   #>  Mean   :-0.00430   Mean   : 0.00386   Mean   :-0.03656   #>  3rd Qu.: 0.67347   3rd Qu.: 0.64251   3rd Qu.: 0.59781   #>  Max.   : 3.60896   Max.   : 3.28255   Max.   : 2.89636   #>  NA's   :100        NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-specification","dir":"","previous_headings":"Example","what":"Model Specification","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can now fit model using sem() function lavaan. use full-information maximum likelihood deal missing values. fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"fit <- sem(data = df, model = model, missing = \"fiml\") mc <- MC(fit, R = 20000L, alpha = 0.05) mc #> Monte Carlo Confidence Intervals #>              est     se     R    2.5%  97.5% #> cp        0.2340 0.0306 20000  0.1751 0.2937 #> b         0.5134 0.0306 20000  0.4524 0.5736 #> a         0.4701 0.0295 20000  0.4125 0.5277 #> X~~X      0.9766 0.0460 20000  0.8867 1.0663 #> Y~~Y      0.5495 0.0272 20000  0.4956 0.6031 #> M~~M      0.7246 0.0351 20000  0.6562 0.7938 #> Y~1      -0.0385 0.0253 20000 -0.0881 0.0112 #> M~1       0.0060 0.0283 20000 -0.0491 0.0623 #> X~1      -0.0041 0.0325 20000 -0.0674 0.0600 #> indirect  0.2413 0.0208 20000  0.2012 0.2831 #> direct    0.2340 0.0306 20000  0.1751 0.2937 #> total     0.4753 0.0294 20000  0.4173 0.5322"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals---multiple-imputation","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals - Multiple Imputation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"MCMI() function can used handle missing values using multiple imputation. MCMI() accepts output mice::mice(), Amelia::amelia(), list multiply imputed data sets. example, impute multivariate missing data normal model. fit model using lavaan using default listwise deletion. fit lavaan object mi object can passed MCMI() function generate Monte Carlo confidence intervals.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 ) fit <- sem(data = df, model = model) mcmi <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) mcmi #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0316 20000 0.1716 0.2952 #> b        0.5155 0.0318 20000 0.4533 0.5772 #> a        0.4701 0.0296 20000 0.4114 0.5280 #> X~~X     0.9775 0.0456 20000 0.8885 1.0672 #> Y~~Y     0.5475 0.0273 20000 0.4944 0.6009 #> M~~M     0.7274 0.0350 20000 0.6585 0.7953 #> indirect 0.2424 0.0214 20000 0.2017 0.2858 #> direct   0.2333 0.0316 20000 0.1716 0.2952 #> total    0.4757 0.0299 20000 0.4172 0.5340"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"standardized-monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Standardized Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCMI() function MCStd().","code":"MCStd(mc, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>              est     se     R   2.5%  97.5% #> cp        0.2359 0.0304 20000 0.1766 0.2956 #> b         0.5078 0.0277 20000 0.4527 0.5610 #> a         0.4790 0.0266 20000 0.4265 0.5294 #> X~~X      1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y      0.5717 0.0257 20000 0.5208 0.6211 #> M~~M      0.7705 0.0254 20000 0.7198 0.8181 #> indirect -0.0393 0.0192 20000 0.2060 0.2811 #> direct    0.0062 0.0304 20000 0.1766 0.2956 #> total    -0.0041 0.0264 20000 0.4260 0.5293 MCStd(mcmi, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2325 0.0316 20000 0.1728 0.2965 #> b        0.5091 0.0287 20000 0.4533 0.5655 #> a        0.4813 0.0266 20000 0.4250 0.5300 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5728 0.0260 20000 0.5174 0.6195 #> M~~M     0.7683 0.0254 20000 0.7191 0.8194 #> indirect 0.2450 0.0196 20000 0.2063 0.2838 #> direct   0.2325 0.0316 20000 0.1728 0.2965 #> total    0.4776 0.0268 20000 0.4254 0.5297"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"cite semmcci publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (List) — Func","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Calculates Monte Carlo confidence intervals defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (List) — Func","text":"","code":"Func(coef, func, ..., est, alpha = c(0.001, 0.01, 0.05), ncores = NULL)"},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (List) — Func","text":"coef List. list parameters. func R function. first argument x argument coef. function algebraically manipulates coef return new numeric vector. best named vector output. function can take additional named arguments passed using .... ... Additional arguments pass func. est Numeric vector. Vector original parameter estimates. alpha Numeric vector. Significance level \\(\\alpha\\). ncores Positive integer. Number cores use. ncores = NULL, use single core.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"Func\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (List) — Func","text":"distribution parameters provided list (params) definition function paremeters provided function (func). Confidence intervals defined parameters generated using generated sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (List) — Func","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (List) — Func","text":"","code":"library(semmcci)  ## Generate Parameters ----------------------------------------------------- coef <- lapply(   X = 1:5,   FUN = function(i) {     rnorm(n = 1)   } )  ## Func() ------------------------------------------------------------------ ### Define func ------------------------------------------------------------ func <- function(x) {   out <- exp(x)   names(out) <- \"exp\"   return(out) } ### Generate Confidence Intervals ------------------------------------------ Func(   coef,   func = func,   est = 1,   alpha = 0.05 ) #>        est     se R   2.5%  97.5% #> exp 2.7183 0.7372 5 0.1033 1.8047"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals — MC","title":"Monte Carlo Confidence Intervals — MC","text":"Calculates Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"MC(   lav,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals — MC","text":"lav Object class lavaan. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals — MC","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MC\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals — MC","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals — MC","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals — MC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"library(semmcci) library(lavaan) #> This is lavaan 0.6-18 #> lavaan is FREE software! Please report any bugs.  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- MC(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #> Monte Carlo Confidence Intervals #>                       est     se R    2.5%  97.5% #> cp                 0.3796 0.2695 5  0.0821 0.6708 #> b                  0.4880 0.0889 5  0.4749 0.6736 #> a                  0.5426 0.3560 5 -0.0026 0.8971 #> cond~~cond         0.2496 0.0128 5  0.2260 0.2568 #> reaction~~reaction 1.7760 0.1978 5  1.4029 1.8400 #> pmi~~pmi           1.7238 0.2483 5  1.4316 2.0547 #> reaction~1         0.5868 0.4777 5 -0.3956 0.6504 #> pmi~1              5.3616 0.1764 5  5.1393 5.5821 #> cond~1             0.4939 0.0413 5  0.4566 0.5488 #> indirect           0.2648 0.1950 5 -0.0091 0.4848 #> direct             0.3796 0.2695 5  0.0821 0.6708 #> total              0.6444 0.2665 5  0.2695 0.8630"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Function) — MCFunc","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Calculates Monte Carlo confidence intervals defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"","code":"MCFunc(   coef,   vcov,   func,   ...,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL,   ncores = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"coef Numeric vector. Vector estimated parameters. vcov Numeric matrix. Sampling variance-covariance matrix estimated parameters. func R function. first argument x argument coef. function algebraically manipulates coef return new numeric vector. best named vector output. function can take additional named arguments passed using .... ... Additional arguments pass func. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility. ncores Positive integer. Number cores use. ncores = NULL, use single core.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCFunc\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated using simulated sampling distribution. Parameters defined using func argument.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"","code":"library(semmcci)  ## MCFunc() ---------------------------------------------------------------- ### Define func ------------------------------------------------------------ func <- function(x) {   out <- exp(x)   names(out) <- \"exp\"   return(out) } ### Generate Confidence Intervals ------------------------------------------ MCFunc(   coef = 0,   vcov = matrix(1),   func = func,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #>     est     se R   2.5%  97.5% #> exp   1 0.9025 5 0.3264 2.2427"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Calculates Monte Carlo confidence intervals defined parameters fitted model object coef vcov methods.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"","code":"MCGeneric(   object,   def,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"object R object. Fitted model object coef vcov methods return named vector estimated parameters sampling variance-covariance matrix, respectively. def List character strings. list defined functions parameters. string valid R expression parsed result single value evaluated. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCGeneric\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated using simulated sampling distribution. Parameters defined using def argument.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MCGeneric() ------------------------------------------------------------- MCGeneric(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05,   def = list(     \"a * b\",     \"cp + (a * b)\"   ) ) #>                 est     se R    2.5%  97.5% #> a * b        0.1730 0.1408 5 -0.0086 0.3181 #> cp + (a * b) 0.4381 0.2928 5  0.2206 0.9274"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Calculates Monte Carlo confidence intervals free defined parameters. Missing values handled using multilple imputation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"","code":"MCMI(   lav,   mi,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"lav Object class lavaan. mi Object class mids (output mice::mice()), object class amelia (output Amelia::amelia()), list multiply imputed data sets. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCMI\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix obtained using multiple imputation. Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Rubin, D. B. (1987). Multiple imputation nonresponse surveys. John Wiley & Sons, Inc.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ MCMI(   fit,   mi = mi,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>                       est     se R    2.5%  97.5% #> cp                 0.1898 0.2146 5 -0.2255 0.2660 #> b                  0.4956 0.0323 5  0.5484 0.6197 #> a                  0.5468 0.2245 5  0.5823 1.0874 #> cond~~cond         0.2491 0.0454 5  0.1903 0.2961 #> reaction~~reaction 1.9358 0.1579 5  1.8539 2.1737 #> pmi~~pmi           1.6766 0.2002 5  1.3031 1.7436 #> indirect           0.2708 0.1480 5  0.3226 0.6713 #> direct             0.1898 0.2146 5 -0.2255 0.2660 #> total              0.4606 0.3050 5  0.2269 0.9266"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals — MCStd","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Calculates standardized Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"MCStd(mc, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"mc Output MC() MCMI() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCStd\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"empirical sampling distribution parameter estimates argument mc standardized, , randomly generated vector parameters standardized. Defined parameters computed standardized component parameters. Confidence intervals generated using standardized empirical sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 )  ## Standardized Monte Carlo ------------------------------------------------ MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R    2.5%  97.5% #> cp                 0.0287 0.1014 5 -0.1926 0.0600 #> b                  0.4144 0.0596 5  0.3900 0.5319 #> a                  0.1591 0.0724 5  0.1106 0.2792 #> cond~~cond         1.0000 0.0000 5  1.0000 1.0000 #> reaction~~reaction 0.8237 0.0425 5  0.7317 0.8293 #> pmi~~pmi           0.9747 0.0285 5  0.9220 0.9875 #> indirect           0.4890 0.0407 5  0.0455 0.1473 #> direct             4.0773 0.1014 5 -0.1926 0.0600 #> total              0.9513 0.1268 5 -0.1471 0.1602  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 )  ## Standardized Monte Carlo ------------------------------------------------ MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R    2.5%  97.5% #> cp                 0.0536 0.0767 5 -0.0081 0.1877 #> b                  0.4060 0.1245 5  0.2546 0.5377 #> a                  0.1487 0.0627 5  0.0716 0.2291 #> cond~~cond         1.0000 0.0000 5  1.0000 1.0000 #> reaction~~reaction 0.8258 0.0951 5  0.6945 0.9177 #> pmi~~pmi           0.9779 0.0184 5  0.9473 0.9941 #> indirect           0.0604 0.0163 5  0.0353 0.0753 #> direct             0.0536 0.0767 5 -0.0081 0.1877 #> total              0.1140 0.0699 5  0.0654 0.2437"},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Estimates — coef.semmcci","title":"Parameter Estimates — coef.semmcci","text":"Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Estimates — coef.semmcci","text":"","code":"# S3 method for semmcci coef(object, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Estimates — coef.semmcci","text":"object Object class semmcci. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Estimates — coef.semmcci","text":"Returns vector parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parameter Estimates — coef.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Estimates — coef.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) coef(unstd) #>                 cp                  b                  a         cond~~cond  #>          0.2387180          0.4812565          0.5722387          0.2491255  #> reaction~~reaction           pmi~~pmi         reaction~1              pmi~1  #>          1.9301333          1.7263351          0.7027880          5.2689670  #>             cond~1           indirect             direct              total  #>          0.4852165          0.2753936          0.2387180          0.5141116  coef(std) #>                 cp                  b                  a         cond~~cond  #>         0.07697822         0.41806030         0.21242103         1.00000000  #> reaction~~reaction           pmi~~pmi         reaction~1              pmi~1  #>         0.80562787         0.95487731         0.45404397         3.91865219  #>             cond~1           indirect             direct              total  #>         0.97213491         0.08880480         0.07697822         0.16578301   # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) coef(unstd) #>                 cp                  b                  a         cond~~cond  #>          0.1685092          0.4589709          0.5011024          0.2492432  #> reaction~~reaction           pmi~~pmi           indirect             direct  #>          1.9960264          1.7489519          0.2325101          0.1685092  #>              total  #>          0.4010193  coef(std) #>                 cp                  b                  a         cond~~cond  #>         0.03267557         0.42341103         0.24847576         1.00000000  #> reaction~~reaction           pmi~~pmi           indirect             direct  #>         0.81277998         0.93825980         0.10520738         0.03267557  #>              total  #>         0.13788295"},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Monte Carlo Confidence Intervals Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"","code":"# S3 method for semmcci confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"object Object class semmcci. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Returns matrix confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) confint(unstd) #>                          2.5 %    97.5 % #> cp                  0.14744403 0.7424726 #> b                   0.39090186 0.6275559 #> a                   0.25381433 0.9820780 #> cond~~cond          0.17972964 0.2524786 #> reaction~~reaction  1.34975722 2.2492023 #> pmi~~pmi            1.29018738 1.9165882 #> reaction~1         -0.06055857 1.1563419 #> pmi~1               5.03084449 5.5610594 #> cond~1              0.40614698 0.4774202 #> indirect            0.10571688 0.6181068 #> direct              0.14744403 0.7424726 #> total               0.28138005 0.9628996 confint(std) #>                         2.5 %    97.5 % #> cp                 0.04537408 0.2215256 #> b                  0.33150148 0.5391836 #> a                  0.08727263 0.3392317 #> cond~~cond         1.00000000 1.0000000 #> reaction~~reaction 0.64807453 0.8778464 #> pmi~~pmi           0.88325556 0.9923690 #> indirect           0.03291196 0.1751982 #> direct             0.04537408 0.2215256 #> total              0.08728626 0.2877587  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) confint(unstd) #>                          2.5 %    97.5 % #> cp                 -0.14995801 0.4109224 #> b                   0.44634838 0.6073850 #> a                  -0.12663687 0.7490378 #> cond~~cond          0.21245147 0.2869141 #> reaction~~reaction  1.70126346 2.2532347 #> pmi~~pmi            1.63113261 2.0323056 #> indirect           -0.07290374 0.4550059 #> direct             -0.14995801 0.4109224 #> total               0.25450317 0.6908409 confint(std) #>                          2.5 %    97.5 % #> cp                 -0.04435560 0.1136109 #> b                   0.39462158 0.5548349 #> a                  -0.04176436 0.2736435 #> cond~~cond          1.00000000 1.0000000 #> reaction~~reaction  0.69848874 0.8389369 #> pmi~~pmi            0.92487793 0.9958554 #> indirect           -0.01983783 0.1410071 #> direct             -0.04435560 0.1136109 #> total               0.07658417 0.2139349"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci — print.semmcci","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Print Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"# S3 method for semmcci print(x, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci — print.semmcci","text":"x object class semmcci. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used x. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) print(unstd) #> Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.2643 0.2646 5 -0.2829 -0.2777 -0.2547 0.4166 0.4398 0.4450 #> b                  0.5458 0.0674 5  0.5008  0.5008  0.5011 0.6426 0.6453 0.6459 #> a                  0.4206 0.2513 5  0.0697  0.0704  0.0735 0.6149 0.6202 0.6214 #> cond~~cond         0.2471 0.0336 5  0.1787  0.1792  0.1813 0.2582 0.2586 0.2587 #> reaction~~reaction 1.8502 0.2348 5  1.6943  1.6959  1.7031 2.2717 2.2997 2.3060 #> pmi~~pmi           1.6964 0.1276 5  1.5665  1.5686  1.5782 1.8779 1.8829 1.8840 #> reaction~1         0.3254 0.4592 5 -0.0541 -0.0532 -0.0493 0.8715 0.8743 0.8749 #> pmi~1              5.4071 0.1391 5  5.2776  5.2787  5.2835 5.6046 5.6136 5.6157 #> cond~1             0.4478 0.0523 5  0.3865  0.3877  0.3931 0.5175 0.5185 0.5187 #> indirect           0.2296 0.1439 5  0.0450  0.0451  0.0459 0.3691 0.3773 0.3791 #> direct             0.2643 0.2646 5 -0.2829 -0.2777 -0.2547 0.4166 0.4398 0.4450 #> total              0.4938 0.2891 5 -0.0057 -0.0047 -0.0003 0.6268 0.6350 0.6368 print(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0845 0.0832 5 -0.0924 -0.0907 -0.0832 0.1283 0.1359 0.1376 #> b                  0.4632 0.0496 5  0.4084  0.4095  0.4144 0.5310 0.5316 0.5318 #> a                  0.1585 0.0795 5  0.0243  0.0246  0.0259 0.1926 0.1930 0.1931 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7659 0.0496 5  0.7162  0.7162  0.7163 0.8258 0.8292 0.8300 #> pmi~~pmi           0.9749 0.0177 5  0.9627  0.9627  0.9629 0.9993 0.9994 0.9994 #> indirect           0.2093 0.0401 5  0.0129  0.0130  0.0133 0.0977 0.0983 0.0984 #> direct             4.0990 0.0832 5 -0.0924 -0.0907 -0.0832 0.1283 0.1359 0.1376 #> total              0.9009 0.0846 5 -0.0019 -0.0016 -0.0003 0.1912 0.1959 0.1969  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) print(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.2706 0.2655 5  0.0096  0.0133  0.0296 0.6207 0.6217 0.6220 #> b                  0.5224 0.0836 5  0.3956  0.3971  0.4035 0.6054 0.6087 0.6095 #> a                  0.4154 0.2309 5 -0.0809 -0.0744 -0.0457 0.4843 0.4848 0.4849 #> cond~~cond         0.2471 0.0211 5  0.2068  0.2070  0.2082 0.2567 0.2574 0.2576 #> reaction~~reaction 1.9278 0.2548 5  1.4165  1.4214  1.4433 2.0870 2.1063 2.1106 #> pmi~~pmi           1.6481 0.3208 5  1.1216  1.1281  1.1570 1.9128 1.9247 1.9274 #> indirect           0.2176 0.1185 5 -0.0319 -0.0286 -0.0142 0.2681 0.2714 0.2722 #> direct             0.2706 0.2655 5  0.0096  0.0133  0.0296 0.6207 0.6217 0.6220 #> total              0.4882 0.2215 5  0.2402  0.2433  0.2572 0.7662 0.7695 0.7702 print(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0609 0.0876 5  0.0027  0.0039  0.0092 0.2072 0.2089 0.2093 #> b                  0.4932 0.0621 5  0.3578  0.3589  0.3637 0.5207 0.5273 0.5288 #> a                  0.1505 0.0920 5 -0.0307 -0.0283 -0.0173 0.2122 0.2171 0.2182 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7440 0.0538 5  0.7066  0.7073  0.7102 0.8321 0.8327 0.8328 #> pmi~~pmi           0.9773 0.0177 5  0.9524  0.9528  0.9546 0.9980 0.9988 0.9990 #> indirect           0.0742 0.0401 5 -0.0110 -0.0100 -0.0055 0.0942 0.0968 0.0973 #> direct             0.0609 0.0876 5  0.0027  0.0039  0.0092 0.2072 0.2089 0.2093 #> total              0.1351 0.0780 5  0.0683  0.0695  0.0747 0.2581 0.2603 0.2609"},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package 'lavaan' can generated using 'semmcci' package. 'semmcci' three main functions, namely, MC(), MCMI(), MCStd(). output 'lavaan' passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023) doi:10.3758/s13428-023-02114-4 .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder] contributors: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) [contributor]","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class semmcci — summary.semmcci","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Summary Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"","code":"# S3 method for semmcci summary(object, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"object Object class semmcci. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used object. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) summary(unstd) #> Monte Carlo Confidence Intervals #>                       est     se R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp                 0.3992 0.2061 5 0.1500 0.1502 0.1512 0.5686 0.5689 0.5690 #> b                  0.5120 0.0748 5 0.4092 0.4094 0.4100 0.5632 0.5642 0.5644 #> a                  0.5764 0.2205 5 0.4136 0.4163 0.4280 0.9527 0.9668 0.9700 #> cond~~cond         0.2496 0.0289 5 0.2273 0.2277 0.2293 0.2992 0.3007 0.3011 #> reaction~~reaction 1.9422 0.3038 5 1.5006 1.5031 1.5142 2.2388 2.2634 2.2689 #> pmi~~pmi           1.7423 0.0742 5 1.8380 1.8396 1.8469 2.0352 2.0413 2.0426 #> reaction~1         0.4668 0.3236 5 0.3228 0.3260 0.3405 1.0954 1.1112 1.1148 #> pmi~1              5.3099 0.1170 5 5.0949 5.0952 5.0962 5.3526 5.3584 5.3597 #> cond~1             0.4929 0.0288 5 0.4549 0.4553 0.4572 0.5275 0.5291 0.5294 #> indirect           0.2951 0.1275 5 0.2177 0.2179 0.2188 0.5150 0.5313 0.5349 #> direct             0.3992 0.2061 5 0.1500 0.1502 0.1512 0.5686 0.5689 0.5690 #> total              0.6944 0.2397 5 0.3802 0.3818 0.3888 0.8968 0.8999 0.9006 summary(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> cp                 0.1257 0.0762 5 0.0464 0.0465 0.0470 0.2044 0.2052 0.2054 #> b                  0.4358 0.0527 5 0.3897 0.3901 0.3919 0.5060 0.5064 0.5065 #> a                  0.2131 0.0777 5 0.1392 0.1404 0.1455 0.3310 0.3345 0.3352 #> cond~~cond         1.0000 0.0000 5 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7709 0.0294 5 0.6976 0.6983 0.7016 0.7699 0.7703 0.7704 #> pmi~~pmi           0.9546 0.0375 5 0.8876 0.8881 0.8903 0.9785 0.9802 0.9806 #> indirect           0.2941 0.0388 5 0.0697 0.0700 0.0711 0.1642 0.1687 0.1698 #> direct             3.9304 0.0762 5 0.0464 0.0465 0.0470 0.2044 0.2052 0.2054 #> total              0.9866 0.0873 5 0.1217 0.1221 0.1240 0.3067 0.3083 0.3087  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) summary(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.4425 0.3137 5 -0.1079 -0.1024 -0.0780 0.7189 0.7491 0.7559 #> b                  0.4900 0.1186 5  0.3351  0.3371  0.3462 0.6223 0.6239 0.6243 #> a                  0.5306 0.2507 5  0.1450  0.1509  0.1774 0.7809 0.7874 0.7888 #> cond~~cond         0.2498 0.0187 5  0.2274  0.2275  0.2279 0.2695 0.2703 0.2705 #> reaction~~reaction 1.9688 0.2009 5  1.8590  1.8590  1.8591 2.2633 2.2657 2.2662 #> pmi~~pmi           1.7175 0.3344 5  1.4483  1.4495  1.4547 2.1547 2.1561 2.1564 #> indirect           0.2611 0.1523 5  0.0649  0.0681  0.0819 0.4636 0.4738 0.4761 #> direct             0.4425 0.3137 5 -0.1079 -0.1024 -0.0780 0.7189 0.7491 0.7559 #> total              0.7036 0.2681 5  0.3680  0.3687  0.3720 0.9674 0.9887 0.9934 summary(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.1027 0.0948 5 -0.0309 -0.0292 -0.0215 0.2201 0.2293 0.2313 #> b                  0.4442 0.1074 5  0.2628  0.2652  0.2759 0.5450 0.5523 0.5540 #> a                  0.2048 0.0986 5  0.0473  0.0496  0.0599 0.2931 0.2946 0.2949 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7735 0.0750 5  0.6543  0.6566  0.6666 0.8424 0.8435 0.8438 #> pmi~~pmi           0.9581 0.0347 5  0.9130  0.9132  0.9140 0.9949 0.9972 0.9977 #> indirect           0.0910 0.0440 5  0.0187  0.0197  0.0240 0.1337 0.1360 0.1365 #> direct             0.1027 0.0948 5 -0.0309 -0.0292 -0.0215 0.2201 0.2293 0.2313 #> total              0.1936 0.0838 5  0.1055  0.1057  0.1067 0.2962 0.3026 0.3040"},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Sampling Covariance Matrix Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"","code":"# S3 method for semmcci vcov(object, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"object Object class semmcci. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Returns matrix variance-covariance matrix parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) vcov(unstd) #>                              cp            b             a    cond~~cond #> cp                  0.125135262  0.013061418 -0.0065597624 -0.0041953422 #> b                   0.013061418  0.006585548  0.0026543860 -0.0015173795 #> a                  -0.006559762  0.002654386  0.0055801794  0.0003611214 #> cond~~cond         -0.004195342 -0.001517380  0.0003611214  0.0006702984 #> reaction~~reaction  0.053257525 -0.002417496 -0.0239255156 -0.0030806386 #> pmi~~pmi           -0.041884590 -0.011531893  0.0096994127  0.0077945921 #> reaction~1         -0.171811285 -0.045924137 -0.0087045930  0.0108513141 #> pmi~1               0.002473798 -0.003016505 -0.0063146018  0.0002148146 #> cond~1              0.003819982 -0.001703650 -0.0008498995  0.0004304245 #> indirect            0.003120249  0.004146997  0.0034758321 -0.0005766639 #> direct              0.125135262  0.013061418 -0.0065597624 -0.0041953422 #> total               0.128255512  0.017208415 -0.0030839303 -0.0047720061 #>                    reaction~~reaction     pmi~~pmi   reaction~1         pmi~1 #> cp                       0.0532575254 -0.041884590 -0.171811285  2.473798e-03 #> b                       -0.0024174963 -0.011531893 -0.045924137 -3.016505e-03 #> a                       -0.0239255156  0.009699413 -0.008704593 -6.314602e-03 #> cond~~cond              -0.0030806386  0.007794592  0.010851314  2.148146e-04 #> reaction~~reaction       0.1396823031 -0.042279748 -0.043395042  3.882915e-02 #> pmi~~pmi                -0.0422797478  0.104310776  0.081724666  2.067293e-03 #> reaction~1              -0.0433950421  0.081724666  0.392570185  7.519096e-03 #> pmi~1                    0.0388291544  0.002067293  0.007519096  1.365747e-02 #> cond~1                   0.0002367733  0.003064736  0.006620248 -5.705291e-05 #> indirect                -0.0107376215 -0.001680137 -0.024669376 -3.936370e-03 #> direct                   0.0532575254 -0.041884590 -0.171811285  2.473798e-03 #> total                    0.0425199038 -0.043564727 -0.196480661 -1.462572e-03 #>                           cond~1      indirect       direct        total #> cp                  3.819982e-03  0.0031202495  0.125135262  0.128255512 #> b                  -1.703650e-03  0.0041469970  0.013061418  0.017208415 #> a                  -8.498995e-04  0.0034758321 -0.006559762 -0.003083930 #> cond~~cond          4.304245e-04 -0.0005766639 -0.004195342 -0.004772006 #> reaction~~reaction  2.367733e-04 -0.0107376215  0.053257525  0.042519904 #> pmi~~pmi            3.064736e-03 -0.0016801369 -0.041884590 -0.043564727 #> reaction~1          6.620248e-03 -0.0246693764 -0.171811285 -0.196480661 #> pmi~1              -5.705291e-05 -0.0039363704  0.002473798 -0.001462572 #> cond~1              1.164976e-03 -0.0011731708  0.003819982  0.002646811 #> indirect           -1.173171e-03  0.0033353806  0.003120249  0.006455630 #> direct              3.819982e-03  0.0031202495  0.125135262  0.128255512 #> total               2.646811e-03  0.0064556301  0.128255512  0.134711142 vcov(std) #>                               cp             b             a    cond~~cond #> cp                  1.235279e-02 -1.972837e-03 -5.388231e-04  1.968405e-18 #> b                  -1.972837e-03  4.813292e-03  1.518648e-03  9.838873e-19 #> a                  -5.388231e-04  1.518648e-03  5.616189e-04 -7.451041e-19 #> cond~~cond          1.968405e-18  9.838873e-19 -7.451041e-19  1.540744e-32 #> reaction~~reaction -2.407313e-03 -3.532272e-03 -1.155553e-03 -1.358322e-18 #> pmi~~pmi            2.220038e-04 -4.975985e-04 -1.850682e-04  2.724001e-19 #> indirect           -6.824198e-04  1.368899e-03  4.641667e-04 -1.805322e-19 #> direct              1.235279e-02 -1.972837e-03 -5.388231e-04  1.968405e-18 #> total               1.167037e-02 -6.039382e-04 -7.465640e-05  1.787873e-18 #>                    reaction~~reaction      pmi~~pmi      indirect        direct #> cp                      -2.407313e-03  2.220038e-04 -6.824198e-04  1.235279e-02 #> b                       -3.532272e-03 -4.975985e-04  1.368899e-03 -1.972837e-03 #> a                       -1.155553e-03 -1.850682e-04  4.641667e-04 -5.388231e-04 #> cond~~cond              -1.358322e-18  2.724001e-19 -1.805322e-19  1.968405e-18 #> reaction~~reaction       3.887688e-03  3.633575e-04 -9.689746e-04 -2.407313e-03 #> pmi~~pmi                 3.633575e-04  6.120123e-05 -1.531451e-04  2.220038e-04 #> indirect                -9.689746e-04 -1.531451e-04  4.040353e-04 -6.824198e-04 #> direct                  -2.407313e-03  2.220038e-04 -6.824198e-04  1.235279e-02 #> total                   -3.376287e-03  6.885878e-05 -2.783845e-04  1.167037e-02 #>                            total #> cp                  1.167037e-02 #> b                  -6.039382e-04 #> a                  -7.465640e-05 #> cond~~cond          1.787873e-18 #> reaction~~reaction -3.376287e-03 #> pmi~~pmi            6.885878e-05 #> indirect           -2.783845e-04 #> direct              1.167037e-02 #> total               1.139198e-02  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) vcov(unstd) #>                              cp             b             a    cond~~cond #> cp                  0.128153657 -0.0164549194  0.0769192875 -0.0039600394 #> b                  -0.016454919  0.0069630083 -0.0078475127 -0.0010820080 #> a                   0.076919288 -0.0078475127  0.0678911916 -0.0006641964 #> cond~~cond         -0.003960039 -0.0010820080 -0.0006641964  0.0011114405 #> reaction~~reaction -0.060772283  0.0085113276 -0.0321506311  0.0018176797 #> pmi~~pmi            0.004596774  0.0033715106 -0.0161468004 -0.0028179488 #> indirect            0.029558704 -0.0003221215  0.0279461369 -0.0012012187 #> direct              0.128153657 -0.0164549194  0.0769192875 -0.0039600394 #> total               0.157712362 -0.0167770409  0.1048654244 -0.0051612581 #>                    reaction~~reaction      pmi~~pmi      indirect       direct #> cp                       -0.060772283  0.0045967741  0.0295587042  0.128153657 #> b                         0.008511328  0.0033715106 -0.0003221215 -0.016454919 #> a                        -0.032150631 -0.0161468004  0.0279461369  0.076919288 #> cond~~cond                0.001817680 -0.0028179488 -0.0012012187 -0.003960039 #> reaction~~reaction        0.030119203 -0.0069802787 -0.0116077840 -0.060772283 #> pmi~~pmi                 -0.006980279  0.0284001899 -0.0054403777  0.004596774 #> indirect                 -0.011607784 -0.0054403777  0.0130823217  0.029558704 #> direct                   -0.060772283  0.0045967741  0.0295587042  0.128153657 #> total                    -0.072380067 -0.0008436036  0.0426410259  0.157712362 #>                            total #> cp                  0.1577123616 #> b                  -0.0167770409 #> a                   0.1048654244 #> cond~~cond         -0.0051612581 #> reaction~~reaction -0.0723800668 #> pmi~~pmi           -0.0008436036 #> indirect            0.0426410259 #> direct              0.1577123616 #> total               0.2003533875 vcov(std) #>                               cp             b             a    cond~~cond #> cp                  1.521690e-02 -2.118069e-03  1.042759e-02 -8.363144e-18 #> b                  -2.118069e-03  3.592506e-03 -2.081952e-03  2.270838e-18 #> a                   1.042759e-02 -2.081952e-03  1.125981e-02 -3.667848e-18 #> cond~~cond         -8.363144e-18  2.270838e-18 -3.667848e-18  2.465190e-32 #> reaction~~reaction -2.623307e-04 -2.026326e-03 -4.513940e-04 -8.638834e-19 #> pmi~~pmi           -3.805508e-03  1.041762e-03 -4.493807e-03  1.678058e-18 #> indirect            3.707067e-03 -2.366491e-04  3.998682e-03 -7.348684e-19 #> direct              1.521690e-02 -2.118069e-03  1.042759e-02 -8.363144e-18 #> total               1.892396e-02 -2.354718e-03  1.442628e-02 -9.098012e-18 #>                    reaction~~reaction      pmi~~pmi      indirect        direct #> cp                      -2.623307e-04 -3.805508e-03  3.707067e-03  1.521690e-02 #> b                       -2.026326e-03  1.041762e-03 -2.366491e-04 -2.118069e-03 #> a                       -4.513940e-04 -4.493807e-03  3.998682e-03  1.042759e-02 #> cond~~cond              -8.638834e-19  1.678058e-18 -7.348684e-19 -8.363144e-18 #> reaction~~reaction       1.406469e-03  4.673654e-05 -4.881840e-04 -2.623307e-04 #> pmi~~pmi                 4.673654e-05  1.853845e-03 -1.542932e-03 -3.805508e-03 #> indirect                -4.881840e-04 -1.542932e-03  1.513215e-03  3.707067e-03 #> direct                  -2.623307e-04 -3.805508e-03  3.707067e-03  1.521690e-02 #> total                   -7.505147e-04 -5.348441e-03  5.220282e-03  1.892396e-02 #>                            total #> cp                  1.892396e-02 #> b                  -2.354718e-03 #> a                   1.442628e-02 #> cond~~cond         -9.098012e-18 #> reaction~~reaction -7.505147e-04 #> pmi~~pmi           -5.348441e-03 #> indirect            5.220282e-03 #> direct              1.892396e-02 #> total               2.414425e-02"},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-1149000","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.4.9000","title":"semmcci 1.1.4.9000","text":"Latest development version","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-114","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.4","title":"semmcci 1.1.4","text":"CRAN release: 2024-03-17","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.4","text":"Added Func() MCFunc() functions.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-113","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.3","title":"semmcci 1.1.3","text":"CRAN release: 2023-10-14","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.3","text":"Minor edits setting seed. Added MCGeneric() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-112","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.2","title":"semmcci 1.1.2","text":"CRAN release: 2023-08-12","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.2","text":"Addressed M1Mac CRAN build issues.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.1","text":"Minor documentation edits.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"minor-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor","title":"semmcci 1.1.0","text":"Added MCMI() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-104","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.4","title":"semmcci 1.0.4","text":"CRAN release: 2022-12-17","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.4","text":"Minor refactoring data generation functions.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-103","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.3","title":"semmcci 1.0.3","text":"CRAN release: 2022-10-16","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.3","text":"Added decomposition, pd, tol arguments MC().","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-102","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.2","title":"semmcci 1.0.2","text":"CRAN release: 2022-10-04","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.2","text":"Random variates multivatiate normal distribution generated using Cholesky decomposition sampling variance-covariance matrix. Eigen decomposition used Cholesky decomposition fails. NA returned calculation defined parameter fails MC(). NA returned standardization fails MCStd(). Added methods.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-101","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.1","title":"semmcci 1.0.1","text":"CRAN release: 2022-09-13","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.1","text":"Initial CRAN release.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"major-1-0-0","dir":"Changelog","previous_headings":"","what":"Major","title":"semmcci 1.0.0","text":"Initial CRAN submission.","code":""}]

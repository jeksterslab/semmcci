[{"path":"https://github.com/jeksterslab/semmcci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ivan Jacob Agaloos Pesigan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 100L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se   R   2.5%  97.5% #> cp       0.2333 0.0296 100 0.1806 0.2903 #> b        0.5082 0.0279 100 0.4555 0.5527 #> a        0.4820 0.0280 100 0.4220 0.5301 #> X~~X     1.0590 0.0426 100 0.9751 1.1296 #> Y~~Y     0.5462 0.0231 100 0.5064 0.5959 #> M~~M     0.7527 0.0337 100 0.7024 0.8208 #> indirect 0.2449 0.0179 100 0.2058 0.2738 #> direct   0.2333 0.0296 100 0.1806 0.2903 #> total    0.4782 0.0295 100 0.4162 0.5283"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = 100L   ) ) #>        lhs op      rhs    label   est    se      z pvalue ci.lower ci.upper #> 1        Y  ~        X       cp 0.233 0.025  9.395      0    0.183    0.278 #> 2        Y  ~        M        b 0.508 0.028 18.057      0    0.454    0.568 #> 3        M  ~        X        a 0.482 0.026 18.550      0    0.433    0.535 #> 4        X ~~        X          1.059 0.046 23.224      0    0.969    1.161 #> 5        Y ~~        Y          0.546 0.023 23.640      0    0.508    0.593 #> 6        M ~~        M          0.753 0.033 23.131      0    0.692    0.814 #> 7 indirect :=      a*b indirect 0.245 0.020 12.381      0    0.209    0.289 #> 8   direct :=       cp   direct 0.233 0.025  9.348      0    0.183    0.278 #> 9    total := cp+(a*b)    total 0.478 0.027 17.876      0    0.418    0.518"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"arguments","dir":"Articles","previous_headings":"Benchmark","what":"Arguments","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark_complete_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model     )     MC(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE     )   },   NB = sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_01, unit = \"ms\") #>   expr         min          lq        mean      median          uq         max #> 1   MC    62.14825    64.53126    67.27993    66.10667    67.67751    82.28363 #> 2   NB 20076.49060 21097.11114 21056.66693 21199.09220 21257.40636 21546.92772 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_01, unit = \"relative\") #>   expr      min       lq    mean   median       uq      max neval #> 1   MC   1.0000   1.0000   1.000   1.0000   1.0000   1.0000    10 #> 2   NB 323.0419 326.9286 312.971 320.6801 314.0985 261.8616    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"fit <- sem(   data = df,   model = model ) benchmark_complete_02 <- microbenchmark(   MC = MC(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE   ),   NB = sem(     data = df,     model = model,     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_02, unit = \"ms\") #>   expr         min          lq        mean     median          uq         max #> 1   MC    19.59999    19.89196    21.31238    21.5501    22.50735    23.00763 #> 2   NB 20503.10680 20530.37817 20776.18543 20687.2049 20828.37083 21718.77052 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-complete.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark_complete_02, unit = \"relative\") #>   expr      min       lq     mean   median      uq      max neval #> 1   MC    1.000    1.000   1.0000   1.0000   1.000   1.0000    10 #> 2   NB 1046.077 1032.094 974.8414 959.9589 925.403 943.9811    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(df)[1], 300) df[miss[1:100], \"X\"] <- NA df[miss[101:200], \"M\"] <- NA df[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 100L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se   R   2.5%  97.5% #> cp       0.2419 0.0332 100 0.1792 0.3070 #> b        0.5166 0.0308 100 0.4580 0.5785 #> a        0.4989 0.0319 100 0.4448 0.5615 #> X~~X     1.0951 0.0621 100 0.9856 1.2026 #> Y~~Y     0.5796 0.0307 100 0.5257 0.6413 #> M~~M     0.8045 0.0464 100 0.7325 0.9106 #> indirect 0.2577 0.0210 100 0.2234 0.3031 #> direct   0.2419 0.0332 100 0.1792 0.3070 #> total    0.4996 0.0322 100 0.4550 0.5681"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"Nonparametric bootstrap confidence intervals can generated lavaan using following.","code":"parameterEstimates(   sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = 100L   ) ) #>         lhs op      rhs    label    est    se      z pvalue ci.lower ci.upper #> 1         Y  ~        X       cp  0.234 0.030  7.721  0.000    0.169    0.287 #> 2         Y  ~        M        b  0.511 0.035 14.704  0.000    0.442    0.585 #> 3         M  ~        X        a  0.481 0.028 17.117  0.000    0.425    0.532 #> 4         X ~~        X           1.059 0.049 21.539  0.000    0.979    1.148 #> 5         Y ~~        Y           0.554 0.029 19.264  0.000    0.490    0.607 #> 6         M ~~        M           0.756 0.032 23.389  0.000    0.693    0.820 #> 7         Y ~1                   -0.013 0.027 -0.473  0.636   -0.065    0.056 #> 8         M ~1                   -0.022 0.030 -0.744  0.457   -0.077    0.044 #> 9         X ~1                    0.002 0.036  0.069  0.945   -0.072    0.074 #> 10 indirect :=      a*b indirect  0.246 0.021 11.476  0.000    0.202    0.286 #> 11   direct :=       cp   direct  0.234 0.030  7.682  0.000    0.169    0.287 #> 12    total := cp+(a*b)    total  0.479 0.030 16.001  0.000    0.417    0.547"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"arguments","dir":"Articles","previous_headings":"Benchmark","what":"Arguments","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"benchmark_fiml_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model,       missing = \"fiml\"     )     MC(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE     )   },   NB = sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_01, unit = \"ms\") #>   expr        min        lq       mean     median         uq        max neval #> 1   MC   106.5657   107.333   109.2974   108.5297   111.7913   113.4185    10 #> 2   NB 46897.5716 47470.718 47936.1980 47855.8885 48482.9339 48959.5930    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_01, unit = \"relative\") #>   expr      min      lq     mean   median       uq      max neval #> 1   MC   1.0000   1.000   1.0000   1.0000   1.0000   1.0000    10 #> 2   NB 440.0815 442.275 438.5848 440.9474 433.6916 431.6722    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"fit <- sem(   data = df,   model = model,   missing = \"fiml\" ) benchmark_fiml_02 <- microbenchmark(   MC = MC(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE   ),   NB = sem(     data = df,     model = model,     missing = \"fiml\",     se = \"bootstrap\",     bootstrap = B   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_02, unit = \"ms\") #>   expr         min          lq        mean      median          uq        max #> 1   MC    19.12036    20.06588    21.29987    20.41911    23.00196    24.2131 #> 2   NB 47174.69427 47190.17818 47779.39203 47463.06558 48740.24230 48910.4056 #>   neval #> 1    10 #> 2    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-fiml.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (FIML)","text":"","code":"summary(benchmark_fiml_02, unit = \"relative\") #>   expr      min       lq     mean   median      uq      max neval #> 1   MC    1.000    1.000    1.000    1.000    1.00    1.000    10 #> 2   NB 2467.249 2351.762 2243.178 2324.444 2118.96 2019.998    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"n <- 1000 a <- 0.50 b <- 0.50 cp <- 0.25 s2_em <- 1 - a^2 s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em)) ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey)) X <- rnorm(n = n) M <- a * X + em Y <- cp * X + b * M + ey df <- data.frame(X, M, Y)  # Create data set with missing values.  miss <- sample(1:dim(df)[1], 300) df[miss[1:100], \"X\"] <- NA df[miss[101:200], \"M\"] <- NA df[miss[201:300], \"Y\"] <- NA"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- amelia(   x = df,   m = 5L,   p2s = 0 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"can now fit model using sem() function lavaan. need deal missing values stage.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"monte-carlo-confidence-intervals-multiple-imputation","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals (Multiple Imputation)","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"fit lavaan object mi mids object can passed MCMI() function semmcci generate Monte Carlo confidence intervals using multiple imputation described Pesigan Cheung (2023).","code":"MCMI(fit, R = 100L, alpha = 0.05, mi = mi) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se   R   2.5%  97.5% #> cp       0.2274 0.0295 100 0.1787 0.2818 #> b        0.5192 0.0342 100 0.4534 0.5839 #> a        0.4790 0.0281 100 0.4249 0.5266 #> X~~X     1.0613 0.0443 100 0.9775 1.1328 #> Y~~Y     0.5439 0.0244 100 0.5010 0.5911 #> M~~M     0.7642 0.0397 100 0.7048 0.8397 #> indirect 0.2486 0.0189 100 0.2103 0.2755 #> direct   0.2274 0.0295 100 0.1787 0.2818 #> total    0.4760 0.0288 100 0.4243 0.5329"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"nonparametric-bootstrap-confidence-intervals-multiple-imputation","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals (Multiple Imputation)","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"Nonparametric bootstrap confidence intervals can generated bmemLavaan using following.","code":"summary(   bmemLavaan::bmem(data = df, model = model, method = \"mi\", boot = 100L, m = 5L) ) #>  #> Estimate method:                          multiple imputation #> Sample size:                              1000       #> Number of request bootstrap draws:        100        #> Number of successful bootstrap draws:     100        #> Type of confidence interval:              perc #>  #> Values of statistics: #>  #>                      Value      SE      2.5%     97.5% #>   chisq               0.000    0.000    0.000    0.000    #>   GFI                 1.000    0.000    1.000    1.000    #>   AGFI                1.000    0.000    1.000    1.000    #>   RMSEA               0.000    0.000    0.000    0.000    #>   NFI                 1.000    0.000    1.000    1.000    #>   NNFI                1.000    0.000    1.000    1.000    #>   CFI                 1.000    0.000    1.000    1.000    #>   BIC                 7742.967 81.777   7575.258 7857.675 #>   SRMR                0.000    0.000    0.000    0.000    #>  #> Estimation of parameters: #>  #>                      Estimate   SE      2.5%     97.5% #> Regressions: #>   Y ~ #>     X        (cp)     0.234    0.030    0.176    0.296 #>     M         (b)     0.513    0.032    0.460    0.570 #>   M ~ #>     X         (a)     0.476    0.030    0.426    0.540 #>  #> Variances: #>     X                 1.057    0.046    0.950    1.144 #>     Y                 0.556    0.027    0.488    0.600 #>     M                 0.755    0.035    0.684    0.813 #>  #>  #>  #> Defined parameters: #>     a*b    (indr)     0.244    0.020    0.206    0.285 #>     cp     (drct)     0.234    0.030    0.176    0.296 #>     cp+(*) (totl)     0.479    0.030    0.428    0.539"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"benchmark-1","dir":"Articles","previous_headings":"","what":"Benchmark","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"benchmark_mi_01 <- microbenchmark(   MC = {     fit <- sem(       data = df,       model = model     )     mi <- Amelia::amelia(       x = df,       m = m,       p2s = 0     )     MCMI(       fit,       R = R,       decomposition = \"chol\",       pd = FALSE,       mi = mi     )   },   NB = bmemLavaan::bmem(     data = df,     model = model,     method = \"mi\",     boot = B,     m = m   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_01, unit = \"ms\") #>   expr        min         lq       mean     median         uq        max neval #> 1   MC   286.9558   291.8004   299.6028   300.8081   302.4125   318.1991    10 #> 2   NB 27535.4995 28374.7050 28381.0975 28491.6816 28602.0170 28769.4820    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_01, unit = \"relative\") #>   expr      min       lq     mean   median       uq      max neval #> 1   MC  1.00000  1.00000  1.00000  1.00000  1.00000  1.00000    10 #> 2   NB 95.95727 97.24011 94.72909 94.71714 94.57946 90.41346    10"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"benchmark---monte-carlo-method-with-precalculated-estimates-and-multiple-imputation","dir":"Articles","previous_headings":"","what":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"fit <- sem(   data = df,   model = model ) mi <- Amelia::amelia(   x = df,   m = m,   p2s = 0 ) benchmark_mi_02 <- microbenchmark(   MC = MCMI(     fit,     R = R,     decomposition = \"chol\",     pd = FALSE,     mi = mi   ),   NB = bmemLavaan::bmem(     data = df,     model = model,     method = \"mi\",     boot = B,     m = m   ),   times = 10 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_02, unit = \"ms\") #>   expr        min         lq       mean     median         uq        max neval #> 1   MC   209.2922   209.5504   214.6654   215.0918   217.9261   224.7139    10 #> 2   NB 27313.5481 27775.3864 27949.8485 27854.4705 27969.5159 28784.7319    10"},{"path":"https://github.com/jeksterslab/semmcci/articles/benchmark-mi.html","id":"summary-of-benchmark-results-relative-to-the-faster-method-1","dir":"Articles","previous_headings":"Benchmark - Monte Carlo Method with Precalculated Estimates and Multiple Imputation","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping (MI)","text":"","code":"summary(benchmark_mi_02, unit = \"relative\") #>   expr      min       lq    mean   median      uq     max neval #> 1   MC   1.0000   1.0000   1.000   1.0000   1.000   1.000    10 #> 2   NB 130.5044 132.5475 130.202 129.5004 128.344 128.095    10"},{"path":[]},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 1: The Simple Mediation Model","text":"","code":"summary(df) #>        X                   M                   Y            #>  Min.   :-3.199558   Min.   :-3.371276   Min.   :-3.61432   #>  1st Qu.:-0.636035   1st Qu.:-0.692640   1st Qu.:-0.66146   #>  Median : 0.011377   Median : 0.007125   Median :-0.04726   #>  Mean   :-0.003207   Mean   :-0.023968   Mean   :-0.01677   #>  3rd Qu.: 0.651951   3rd Qu.: 0.647363   3rd Qu.: 0.62640   #>  Max.   : 3.470910   Max.   : 2.963216   Max.   : 3.09950 colMeans(df) #>            X            M            Y  #> -0.003206987 -0.023968103 -0.016774294 var(df) #>           X         M         Y #> X 1.0600162 0.5108780 0.5069458 #> M 0.5108780 0.9996606 0.6272104 #> Y 0.5069458 0.6272104 0.9837255"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 1: The Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 1: The Simple Mediation Model","text":"can now fit model using sem() function lavaan.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 1: The Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-1-simple.html","id":"standardized-monte-carlo-confidence-intervals---an-alternative-approach","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals - An Alternative Approach","title":"Example 1: The Simple Mediation Model","text":"example, confidence intervals standardized indirect effect generated specifying standardized indirect effect derived parameter using := operator. standardized indirect effect simple mediation model involves paths aa bb, standard deviations XX YY. given absXsY   b   \\frac{s_X}{s_Y} sX=sX2   s_X   =   \\sqrt{     s_{X}^{2}   } sY=c′2sX2+a2b2sX2+b2seM2+2c′basX2+seY2   s_Y   =   \\sqrt{     c^{\\prime 2} s_{X}^{2}     + ^2 b^2 s_{X}^{2}     + b^2 s_{e_{M}}^{2}     + 2 c^{\\prime} b s_{X}^{2}     + s_{e_{Y}}^{2}   } seY2s_{e_{Y}}^{2} seM2s_{e_{M}}^{2} residual variances regression equations. standardized indirect effect can defined using := operator named parameters model. row indirect_std corresponds confidence intervals standardized indirect effect.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ s2_X * X   M ~~ s2_em * M   Y ~~ s2_ey * Y   indirect_std := a * b * (sqrt(s2_X) / sqrt((cp^2 * s2_X + a^2 * b^2 * s2_X) + (b^2 * s2_em) + (2 * cp * b * a * s2_X) + s2_ey)) \" fit <- sem(data = df, model = model, fixed.x = FALSE) MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>                 est     se     R   2.5%  97.5% #> cp           0.2333 0.0263 20000 0.1810 0.2838 #> b            0.5082 0.0270 20000 0.4553 0.5613 #> a            0.4820 0.0264 20000 0.4309 0.5338 #> s2_X         1.0590 0.0472 20000 0.9648 1.1504 #> s2_em        0.7527 0.0339 20000 0.6865 0.8192 #> s2_ey        0.5462 0.0243 20000 0.4987 0.5940 #> indirect_std 0.2542 0.0174 20000 0.2206 0.2888"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 2: The Serial Mediation Model","text":"","code":"summary(df) #>        X                  M1                 M2                 Y            #>  Min.   :-3.37174   Min.   :-3.22690   Min.   :-4.33590   Min.   :-4.29020   #>  1st Qu.:-0.67546   1st Qu.:-0.73709   1st Qu.:-0.82188   1st Qu.:-0.86035   #>  Median :-0.01313   Median :-0.01651   Median :-0.03903   Median :-0.02704   #>  Mean   :-0.02582   Mean   :-0.01823   Mean   :-0.01620   Mean   :-0.03338   #>  3rd Qu.: 0.66401   3rd Qu.: 0.72825   3rd Qu.: 0.80016   3rd Qu.: 0.81721   #>  Max.   : 3.49530   Max.   : 3.69001   Max.   : 3.65147   Max.   : 4.05239 colMeans(df) #>           X          M1          M2           Y  #> -0.02582443 -0.01823021 -0.01619576 -0.03337865 var(df) #>            X        M1        M2         Y #> X  1.0050488 0.5123920 0.3848638 0.3333458 #> M1 0.5123920 1.2334461 0.6645408 0.5108946 #> M2 0.3848638 0.6645408 1.4321822 0.8012638 #> Y  0.3333458 0.5108946 0.8012638 1.4504417"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 2: The Serial Mediation Model","text":"can define several indirect effects example: X→M1→M2→YX \\rightarrow M1 \\rightarrow M2 \\rightarrow Y X→M1→M2X \\rightarrow M1 \\rightarrow M2 X→M1→YX \\rightarrow M1 \\rightarrow Y M1→M2→YM1 \\rightarrow M2 \\rightarrow Y indirect effects defined using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b1 * M1 + b2 * M2   M2 ~ a2 * X + k * M1   M1 ~ a1 * X   # X -> M1 -> M2 -> Y   a1kb2 := a1 * k * b2   # X -> M1 -> M2   a1k := a1 * k   # X -> M1 -> Y   a2b2 := a2 * b2   # M1 -> M2 -> Y   kb2 := k * b2 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 2: The Serial Mediation Model","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>           est     se     R   2.5%  97.5% #> cp     0.0868 0.0354 20000 0.0172 0.1567 #> b1     0.1190 0.0352 20000 0.0501 0.1874 #> b2     0.4809 0.0304 20000 0.4219 0.5406 #> a2     0.1373 0.0367 20000 0.0657 0.2098 #> k      0.4817 0.0328 20000 0.4175 0.5463 #> a1     0.5098 0.0310 20000 0.4496 0.5713 #> Y~~Y   0.9744 0.0439 20000 0.8885 1.0603 #> M2~~M2 1.0581 0.0477 20000 0.9641 1.1510 #> M1~~M1 0.9712 0.0431 20000 0.8872 1.0563 #> X~~X   1.0040 0.0000 20000 1.0040 1.0040 #> a1kb2  0.1181 0.0132 20000 0.0936 0.1456 #> a1k    0.2456 0.0225 20000 0.2029 0.2913 #> a2b2   0.0660 0.0182 20000 0.0312 0.1026 #> kb2    0.2317 0.0216 20000 0.1911 0.2754"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-2-serial.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 2: The Serial Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R   2.5%  97.5% #> cp     0.0723 0.0290 20000 0.0158 0.1300 #> b1     0.1098 0.0317 20000 0.0474 0.1715 #> b2     0.4779 0.0274 20000 0.4236 0.5310 #> a2     0.1151 0.0306 20000 0.0544 0.1745 #> k      0.4470 0.0282 20000 0.3908 0.5018 #> a1     0.4602 0.0249 20000 0.4108 0.5084 #> Y~~Y   0.6725 0.0243 20000 0.6224 0.7185 #> M2~~M2 0.7396 0.0238 20000 0.6907 0.7843 #> M1~~M1 0.7882 0.0229 20000 0.7415 0.8312 #> X~~X   1.0000 0.0000 20000 1.0000 1.0000 #> a1kb2  0.0983 0.0104 20000 0.0790 0.1195 #> a1k    0.2057 0.0176 20000 0.1718 0.2406 #> a2b2   0.0550 0.0149 20000 0.0257 0.0845 #> kb2    0.2136 0.0188 20000 0.1778 0.2510"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 3: The Latent Variable Simple Mediation Model","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   X =~ x1 + x2 + x3   M =~ x4 + x5 + x6   Y =~ x7 + x8 + x9   M ~ a * X   Y ~ b * M   indirect := a * b \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 3: The Latent Variable Simple Mediation Model","text":"can now fit model using sem() function lavaan using Holzinger Swineford (1939) data set.","code":"df <- lavaan::HolzingerSwineford1939 fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> X=~x1    1.0000 0.0000 20000 1.0000 1.0000 #> X=~x2    0.5554 0.1044 20000 0.3539 0.7599 #> X=~x3    0.7045 0.1176 20000 0.4739 0.9374 #> M=~x4    1.0000 0.0000 20000 1.0000 1.0000 #> M=~x5    1.1106 0.0648 20000 0.9837 1.2391 #> M=~x6    0.9268 0.0555 20000 0.8181 1.0368 #> Y=~x7    1.0000 0.0000 20000 1.0000 1.0000 #> Y=~x8    1.1482 0.1647 20000 0.8245 1.4665 #> Y=~x9    0.8854 0.1241 20000 0.6417 1.1283 #> a        0.5107 0.0954 20000 0.3265 0.6999 #> b        0.1884 0.0517 20000 0.0873 0.2888 #> x1~~x1   0.5320 0.1296 20000 0.2791 0.7848 #> x2~~x2   1.1269 0.1033 20000 0.9253 1.3276 #> x3~~x3   0.8647 0.0952 20000 0.6794 1.0512 #> x4~~x4   0.3714 0.0476 20000 0.2783 0.4653 #> x5~~x5   0.4519 0.0582 20000 0.3385 0.5655 #> x6~~x6   0.3551 0.0429 20000 0.2705 0.4384 #> x7~~x7   0.7309 0.0833 20000 0.5679 0.8953 #> x8~~x8   0.4257 0.0828 20000 0.2656 0.5888 #> x9~~x9   0.6605 0.0710 20000 0.5207 0.8008 #> X~~X     0.8264 0.1589 20000 0.5123 1.1396 #> M~~M     0.7638 0.0973 20000 0.5716 0.9556 #> Y~~Y     0.4175 0.0893 20000 0.2418 0.5900 #> indirect 0.0962 0.0319 20000 0.0399 0.1641"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-3-latent.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 3: The Latent Variable Simple Mediation Model","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"fit <- sem(data = df, model = model) unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> X=~x1    0.7800 0.0629 20000 0.6418 0.8916 #> X=~x2    0.4295 0.0614 20000 0.2969 0.5391 #> X=~x3    0.5672 0.0602 20000 0.4325 0.6688 #> M=~x4    0.8515 0.0231 20000 0.8023 0.8925 #> M=~x5    0.8531 0.0227 20000 0.8045 0.8938 #> M=~x6    0.8385 0.0235 20000 0.7885 0.8799 #> Y=~x7    0.6183 0.0543 20000 0.4991 0.7132 #> Y=~x8    0.7639 0.0553 20000 0.6409 0.8575 #> Y=~x9    0.5910 0.0545 20000 0.4750 0.6876 #> a        0.4691 0.0646 20000 0.3302 0.5844 #> b        0.2772 0.0697 20000 0.1351 0.4109 #> x1~~x1   0.3917 0.0964 20000 0.2050 0.5880 #> x2~~x2   0.8155 0.0515 20000 0.7094 0.9119 #> x3~~x3   0.6783 0.0664 20000 0.5527 0.8129 #> x4~~x4   0.2750 0.0391 20000 0.2035 0.3563 #> x5~~x5   0.2722 0.0386 20000 0.2011 0.3527 #> x6~~x6   0.2969 0.0391 20000 0.2258 0.3782 #> x7~~x7   0.6177 0.0658 20000 0.4913 0.7509 #> x8~~x8   0.4165 0.0829 20000 0.2647 0.5892 #> x9~~x9   0.6507 0.0635 20000 0.5272 0.7744 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> M~~M     0.7799 0.0593 20000 0.6585 0.8910 #> Y~~Y     0.9231 0.0388 20000 0.8312 0.9818 #> indirect 0.1301 0.0377 20000 0.0580 0.2058"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"","code":"summary(df) #>        X                   M                  Y            #>  Min.   :-3.199558   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.632676   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.028235   Median : 0.02825   Median :-0.04834   #>  Mean   : 0.002689   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.657543   3rd Qu.: 0.65239   3rd Qu.: 0.65293   #>  Max.   : 3.470910   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100         NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"can now fit model using sem() function lavaan. using missing = \"fiml\" handle missing data lavaan.","code":"fit <- sem(data = df, model = model, missing = \"fiml\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"fit lavaan object can passed MC() function semmcci generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>              est     se     R    2.5%  97.5% #> cp        0.2335 0.0293 20000  0.1768 0.2910 #> b         0.5113 0.0297 20000  0.4531 0.5703 #> a         0.4809 0.0286 20000  0.4255 0.5372 #> X~~X      1.0591 0.0499 20000  0.9618 1.1570 #> Y~~Y      0.5542 0.0268 20000  0.5025 0.6071 #> M~~M      0.7564 0.0361 20000  0.6862 0.8267 #> Y~1      -0.0127 0.0253 20000 -0.0619 0.0376 #> M~1      -0.0223 0.0292 20000 -0.0803 0.0342 #> X~1       0.0025 0.0338 20000 -0.0646 0.0693 #> indirect  0.2458 0.0202 20000  0.2078 0.2869 #> direct    0.2335 0.0293 20000  0.1768 0.2910 #> total     0.4794 0.0286 20000  0.4237 0.5359"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-1-simple-miss-fiml.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4.1: The Simple Mediation Model with Missing Data (FIML)","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"fit <- sem(data = df, model = model, missing = \"fiml\") unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>              est     se     R   2.5%  97.5% #> cp        0.2409 0.0299 20000 0.1817 0.2988 #> b         0.5128 0.0268 20000 0.4586 0.5645 #> a         0.4946 0.0256 20000 0.4430 0.5440 #> X~~X      1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y      0.5568 0.0250 20000 0.5076 0.6059 #> M~~M      0.7554 0.0253 20000 0.7040 0.8038 #> indirect -0.0128 0.0188 20000 0.2171 0.2903 #> direct   -0.0222 0.0299 20000 0.1817 0.2988 #> total     0.0024 0.0259 20000 0.4419 0.5433"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"","code":"summary(df) #>        X                   M                  Y            #>  Min.   :-3.199558   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.632676   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.028235   Median : 0.02825   Median :-0.04834   #>  Mean   : 0.002689   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.657543   3rd Qu.: 0.65239   3rd Qu.: 0.65293   #>  Max.   : 3.470910   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100         NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"can now fit model using sem() function lavaan. need deal missing values stage.","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"fit lavaan object mi mids object can passed MCMI() function semmcci generate Monte Carlo confidence intervals using multiple imputation described Pesigan Cheung (2023).","code":"MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0300 20000 0.1748 0.2911 #> b        0.5113 0.0300 20000 0.4526 0.5702 #> a        0.4811 0.0287 20000 0.4245 0.5376 #> X~~X     1.0617 0.0495 20000 0.9649 1.1591 #> Y~~Y     0.5533 0.0272 20000 0.5001 0.6070 #> M~~M     0.7568 0.0361 20000 0.6856 0.8277 #> indirect 0.2460 0.0204 20000 0.2072 0.2868 #> direct   0.2328 0.0300 20000 0.1748 0.2911 #> total    0.4788 0.0286 20000 0.4215 0.5350"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-4-2-simple-miss-mi.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"Example 4.2: The Simple Mediation Model with Missing Data (MI)","text":"Standardized Monte Carlo Confidence intervals can generated passing result MCMI() function MCStd() function.","code":"fit <- sem(data = df, model = model) unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0307 20000 0.1810 0.3002 #> b        0.5189 0.0277 20000 0.4581 0.5666 #> a        0.5031 0.0260 20000 0.4428 0.5455 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0252 20000 0.5074 0.6054 #> M~~M     0.7469 0.0258 20000 0.7024 0.8039 #> indirect 0.2610 0.0191 20000 0.2171 0.2916 #> direct   0.2450 0.0307 20000 0.1810 0.3002 #> total    0.5060 0.0263 20000 0.4411 0.5452"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"Example 5: Composite Reliability","text":"Assuming latent variable variance constrained one, omega total reliability coefficient given ωtotal=(∑=1kλi)2(∑=1kλi)2+∑=1kθεii   \\omega_{\\mathrm{total}}   =   \\frac{   \\left(   \\sum_{= 1}^{k}   \\lambda_{}   \\right)^2   }{   \\left(   \\sum_{= 1}^{k}   \\lambda_{}   \\right)^2   +   \\sum_{= 1}^{k}   \\theta_{\\varepsilon_{ii}}   } λi\\lambda_{} factor loading item ii, θεii\\theta_{\\varepsilon_{ii}} residual variance item ii, kk number items particular latent variable. model specification , variances latent variables eta1, eta2, eta3 constrained one, relevant parameters labeled particularly factor loadings error variances, omega total reliability coefficient per latent variable defined using := operator.","code":"model <- \"   # fix latent variable variances to 1   eta1 ~~ 1 * eta1   eta2 ~~ 1 * eta2   eta3 ~~ 1 * eta3   # factor loadings   eta1 =~ NA * x1 + l11 * x1 + l12 * x2 + l13 * x3   eta2 =~ NA * x4 + l24 * x4 + l25 * x5 + l26 * x6   eta3 =~ NA * x7 + l37 * x7 + l38 * x8 + l39 * x9   # error variances   x1 ~~ t1 * x1   x2 ~~ t2 * x2   x3 ~~ t3 * x3   x4 ~~ t4 * x4   x5 ~~ t5 * x5   x6 ~~ t6 * x6   x7 ~~ t7 * x7   x8 ~~ t8 * x8   x9 ~~ t9 * x9   # composite reliability   omega1 := (l11 + l12 + l13)^2 / ((l11 + l12 + l13)^2 + (t1 + t2 + t3))   omega2 := (l24 + l25 + l26)^2 / ((l24 + l25 + l26)^2 + (t4 + t5 + t6))   omega3 := (l37 + l38 + l39)^2 / ((l37 + l38 + l39)^2 + (t7 + t8 + t9)) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Example 5: Composite Reliability","text":"can now fit model using cfa() function lavaan.","code":"fit <- cfa(model = model, data = HolzingerSwineford1939)"},{"path":"https://github.com/jeksterslab/semmcci/articles/example-5-composite-reliability.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"Model Fitting","what":"Monte Carlo Confidence Intervals","title":"Example 5: Composite Reliability","text":"fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"MC(fit, R = 20000L, alpha = 0.05) #> Monte Carlo Confidence Intervals #>               est     se     R   2.5%  97.5% #> eta1~~eta1 1.0000 0.0000 20000 1.0000 1.0000 #> eta2~~eta2 1.0000 0.0000 20000 1.0000 1.0000 #> eta3~~eta3 1.0000 0.0000 20000 1.0000 1.0000 #> l11        0.8996 0.0806 20000 0.7391 1.0567 #> l12        0.4979 0.0770 20000 0.3474 0.6500 #> l13        0.6562 0.0745 20000 0.5089 0.8028 #> l24        0.9897 0.0566 20000 0.8785 1.1000 #> l25        1.1016 0.0627 20000 0.9801 1.2255 #> l26        0.9166 0.0533 20000 0.8110 1.0207 #> l37        0.6195 0.0693 20000 0.4844 0.7561 #> l38        0.7309 0.0654 20000 0.6026 0.8591 #> l39        0.6700 0.0655 20000 0.5426 0.7989 #> t1         0.5491 0.1140 20000 0.3264 0.7749 #> t2         1.1338 0.1032 20000 0.9323 1.3370 #> t3         0.8443 0.0916 20000 0.6643 1.0245 #> t4         0.3712 0.0477 20000 0.2783 0.4654 #> t5         0.4463 0.0592 20000 0.3310 0.5617 #> t6         0.3562 0.0430 20000 0.2726 0.4411 #> t7         0.7994 0.0816 20000 0.6413 0.9562 #> t8         0.4877 0.0737 20000 0.3427 0.6317 #> t9         0.5661 0.0708 20000 0.4253 0.7034 #> eta1~~eta2 0.4585 0.0640 20000 0.3347 0.5861 #> eta1~~eta3 0.4705 0.0727 20000 0.3282 0.6132 #> eta2~~eta3 0.2830 0.0688 20000 0.1480 0.4182 #> omega1     0.6253 0.0363 20000 0.5488 0.6910 #> omega2     0.8852 0.0116 20000 0.8599 0.9058 #> omega3     0.6878 0.0312 20000 0.6215 0.7436"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"example, use data Kwan & Chan (2011) child’s reading ability (Y1Y_{1}) regressed parental occupational status (X1X_{1}), parental educational level (X2X_{2}), child’s home possession (X3X_{3}) Y1=α1+γ1X1+γ2X2+γ3X3+ζ1.     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . Note ζ1\\zeta_{1} stochastic error term expected value zero finite variance ψ1\\psi_{1}, α1\\alpha_{1} intercept, γ1\\gamma_{1}, γ2\\gamma_{2}, γ3\\gamma_{3} regression coefficients.","code":"covs #>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"regress Y1 X1, X2, X3.","code":"model <- \"   Y1 ~ X1 + X2 + X3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-1-std-regression.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 1: Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>           est     se     R    2.5%  97.5% #> Y1~X1  0.1207 0.0900 20000 -0.0587 0.2950 #> Y1~X2  0.0491 0.0913 20000 -0.1297 0.2277 #> Y1~X3  0.2194 0.0709 20000  0.0781 0.3559 #> Y1~~Y1 0.9002 0.0404 20000  0.8003 0.9586 #> X1~~X1 1.0000 0.0000 20000  1.0000 1.0000 #> X1~~X2 0.6606 0.0406 20000  0.5743 0.7346 #> X1~~X3 0.3547 0.0627 20000  0.2256 0.4726 #> X2~~X2 1.0000 0.0000 20000  1.0000 1.0000 #> X2~~X3 0.3743 0.0619 20000  0.2455 0.4891 #> X3~~X3 1.0000 0.0000 20000  1.0000 1.0000"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"example, use data Kwan & Chan (2011) child’s reading ability (Y1Y_{1}) regressed parental occupational status (X1X_{1}), parental educational level (X2X_{2}), child’s home possession (X3X_{3}) Y1=α1+γ1X1+γ2X2+γ3X3+ζ1.     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . Note ζ1\\zeta_{1} stochastic error term expected value zero finite variance ψ1\\psi_{1}, α1\\alpha_{1} intercept, γ1\\gamma_{1}, γ2\\gamma_{2}, γ3\\gamma_{3} regression coefficients.","code":"#>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 covs #>           Y1       X1      X2      X3 #> Y1 6088.8281 271.1429 49.5848 20.0337 #> X1  271.1429 226.2577 29.9232  4.8812 #> X2   49.5848  29.9232  9.0692  1.0312 #> X3   20.0337   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"regress Y1 X1, X2, X3. label regression coefficients gamma1, gamma2, gamma3. specify difference coefficients using := operator.","code":"model <- \"   Y1 ~ gamma1 * X1 + gamma2 * X2 + gamma3 * X3   gamma12 := gamma1 - gamma2   gamma13 := gamma1 - gamma3   gamma23 := gamma2 - gamma3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-2-difference-regression-coefficients.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 2: Difference of Standardized Regression Coefficients","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R    2.5%  97.5% #> gamma1   0.1207 0.0900 20000 -0.0587 0.2950 #> gamma2   0.0491 0.0913 20000 -0.1297 0.2277 #> gamma3   0.2194 0.0709 20000  0.0781 0.3559 #> Y1~~Y1   0.9002 0.0404 20000  0.8003 0.9586 #> X1~~X1   1.0000 0.0000 20000  1.0000 1.0000 #> X1~~X2   0.6606 0.0406 20000  0.5743 0.7346 #> X1~~X3   0.3547 0.0627 20000  0.2256 0.4726 #> X2~~X2   1.0000 0.0000 20000  1.0000 1.0000 #> X2~~X3   0.3743 0.0619 20000  0.2455 0.4891 #> X3~~X3   1.0000 0.0000 20000  1.0000 1.0000 #> gamma12  0.0716 0.1631 20000 -0.2481 0.3928 #> gamma13 -0.0987 0.1243 20000 -0.3426 0.1434 #> gamma23 -0.1703 0.1270 20000 -0.4165 0.0832"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"example, use data Kwan & Chan (2011) child’s reading ability (Y1Y_{1}) regressed home educational resources home educational resources (Y2Y_{2}) regressed parental occupational status (X1X_{1}), parental educational level (X2X_{2}), child’s home possession (X3X_{3}) Y1=α1+β1Y2+ζ1,     Y_{1}     =     \\alpha_{1}     +     \\beta_{1}     Y_{2}     +     \\zeta_{1} , Y2=α2+γ1X1+γ2X2+γ3X3+ζ2.     Y_{2}     =     \\alpha_{2}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{2} . Note ζ1\\zeta_{1} ζ2\\zeta_{2} stochastic error terms expected value zero finite variance ψ1\\psi_{1} ψ2\\psi_{2}, α1\\alpha_{1} α2\\alpha_{2} intercepts, β1\\beta_{1}, γ1\\gamma_{1}, γ2\\gamma_{2}, γ3\\gamma_{3} regression coefficients.","code":"covs #>           Y1      Y2       X1      X2      X3 #> Y1 6088.8281 15.7012 271.1429 49.5848 20.0337 #> Y2   15.7012  0.7084   1.9878  1.0043  0.2993 #> X1  271.1429  1.9878 226.2577 29.9232  4.8812 #> X2   49.5848  1.0043  29.9232  9.0692  1.0312 #> X3   20.0337  0.2993   4.8812  1.0312  0.8371 nobs #> [1] 200"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"regress Y1 Y2 Y2 X1, X2, X3. label error variances psi1 psi2. R2R^{2} R‾2\\bar{R}^{2} defined using := operator lavaan model syntax using following equations R2=1−ψ*     R^{2}     =     1 - \\psi^{\\ast} R‾2=1−(n−1n−p+1)(1−R2)     \\bar{R}^{2}     =     1     -     \\left(     \\frac{n - 1}{n - p + 1}     \\right)     \\left(     1 - R^2     \\right) ψ*\\psi^{\\ast} standardized error variance, nn sample size, pp number regressor variables.","code":"model <- \"   Y1 ~ Y2   Y2 ~ X1 + X2 + X3   Y1 ~~ psi1 * Y1   Y2 ~~ psi2 * Y2   rsq1 := 1 - psi1   rsqbar1 := 1 - ((200 - 1) / (200 - 1 + 1)) * (1 - rsq1)   rsq2 := 1 - psi2   rsqbar2 := 1 - ((200 - 1) / (200 - 3 + 1)) * (1 - rsq2) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = covs, sample.nobs = nobs )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-3-rsqr.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 3: R-Squared and Adjusted R-Squared","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: parameterization R2R^{2} R‾2\\bar{R}^{2} interpreted using output MCStd() function since input functions defined := require standardized estimates.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R    2.5%   97.5% #> Y1~Y2    0.2391 0.0666 20000  0.1066  0.3659 #> Y2~X1   -0.2449 0.0813 20000 -0.4029 -0.0825 #> Y2~X2    0.4419 0.0793 20000  0.2819  0.5939 #> Y2~X3    0.3101 0.0647 20000  0.1787  0.4330 #> psi1     0.9428 0.0322 20000  0.8661  0.9886 #> psi2     0.7428 0.0530 20000  0.6291  0.8351 #> X1~~X1   1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2   0.6606 0.0408 20000  0.5743  0.7335 #> X1~~X3   0.3547 0.0629 20000  0.2261  0.4729 #> X2~~X2   1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3   0.3743 0.0615 20000  0.2481  0.4909 #> X3~~X3   1.0000 0.0000 20000  1.0000  1.0000 #> rsq1     0.0572 0.0322 20000  0.0114  0.1339 #> rsqbar1  0.0619 0.0320 20000  0.0163  0.1382 #> rsq2     0.2572 0.0530 20000  0.1649  0.3709 #> rsqbar2  0.2534 0.0532 20000  0.1607  0.3677"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"example, use data Kwan & Chan (2014) three groups (Hong Kong, Japan, Korea) child’s reading ability (Y1Y_{1}) regressed parental occupational status (X1X_{1}), parental educational level (X2X_{2}), child’s home possession (X3X_{3}) Y1=α1+γ1X1+γ2X2+γ3X3+ζ1.     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . Note ζ1\\zeta_{1} stochastic error term expected value zero finite variance ψ1\\psi_{1}, α1\\alpha_{1} intercept, γ1\\gamma_{1}, γ2\\gamma_{2}, γ3\\gamma_{3} regression coefficients. Covariance Matrix Hong Kong Covariance Matrix Japan Covariance Matrix Korea","code":"knitr::kable(   x = covs_hongkong, digits = 4,   caption = \"Covariance Matrix for Hong Kong\" ) nobs_hongkong #> [1] 4625 knitr::kable(   x = covs_japan, digits = 4,   caption = \"Covariance Matrix for Japan\" ) nobs_japan #> [1] 5943 knitr::kable(   x = covs_korea, digits = 4,   caption = \"Covariance Matrix for Korea\" ) nobs_korea #> [1] 5151"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"regress Y1 X1, X2, X3. label regression coefficient γ1\\gamma_{1} three groups gamma1.g1, gamma1.g2, gamma1.g3, γ2\\gamma_{2} three groups gamma2.g1, gamma2.g2, gamma2.g3, γ3\\gamma_{3} three groups gamma3.g1, gamma3.g2, gamma3.g3.","code":"model <- \"   Y1 ~ c(gamma1.g1, gamma1.g2, gamma1.g3) * X1   Y1 ~ c(gamma2.g1, gamma2.g2, gamma2.g3) * X2   Y1 ~ c(gamma3.g1, gamma3.g2, gamma3.g3) * X3   gamma1.g12 := gamma1.g1 - gamma1.g2   gamma1.g13 := gamma1.g1 - gamma1.g3   gamma1.g23 := gamma1.g2 - gamma1.g3   gamma2.g12 := gamma2.g1 - gamma2.g2   gamma2.g13 := gamma2.g1 - gamma2.g3   gamma2.g23 := gamma2.g2 - gamma2.g3   gamma3.g12 := gamma3.g1 - gamma3.g2   gamma3.g13 := gamma3.g1 - gamma3.g3   gamma3.g23 := gamma3.g2 - gamma3.g3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2011). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = list(covs_hongkong, covs_japan, covs_korea),   sample.nobs = list(nobs_hongkong, nobs_japan, nobs_korea) )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-4-difference-regression-coefficients-multigroup.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 4: Difference of Standardized Regression Coefficients in Multiple Groups","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                est     se     R    2.5%   97.5% #> gamma1.g1   0.0568 0.0191 20000  0.0194  0.0942 #> gamma2.g1   0.1985 0.0186 20000  0.1616  0.2353 #> gamma3.g1   0.2500 0.0150 20000  0.2208  0.2791 #> Y1~~Y1      0.8215 0.0103 20000  0.8004  0.8409 #> X1~~X1      1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2      0.6917 0.0076 20000  0.6766  0.7064 #> X1~~X3      0.4702 0.0115 20000  0.4474  0.4923 #> X2~~X2      1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3      0.4471 0.0117 20000  0.4237  0.4699 #> X3~~X3      1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g2   0.1390 0.0164 20000  0.1068  0.1711 #> gamma2.g2   0.1792 0.0158 20000  0.1480  0.2098 #> gamma3.g2   0.1688 0.0139 20000  0.1416  0.1961 #> Y1~~Y1.g2   0.8371 0.0088 20000  0.8196  0.8539 #> X1~~X1.g2   1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g2   0.6525 0.0074 20000  0.6380  0.6670 #> X1~~X3.g2   0.5023 0.0096 20000  0.4833  0.5208 #> X2~~X2.g2   1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g2   0.4452 0.0104 20000  0.4249  0.4651 #> X3~~X3.g2   1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g3   0.0863 0.0170 20000  0.0527  0.1193 #> gamma2.g3   0.2557 0.0164 20000  0.2236  0.2877 #> gamma3.g3   0.2289 0.0139 20000  0.2017  0.2563 #> Y1~~Y1.g3   0.7761 0.0103 20000  0.7556  0.7958 #> X1~~X1.g3   1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g3   0.6580 0.0079 20000  0.6425  0.6734 #> X1~~X3.g3   0.4738 0.0107 20000  0.4526  0.4945 #> X2~~X2.g3   1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g3   0.4353 0.0112 20000  0.4133  0.4570 #> X3~~X3.g3   1.0000 0.0000 20000  1.0000  1.0000 #> gamma1.g12 -0.0821 0.0251 20000 -0.1311 -0.0336 #> gamma1.g13 -0.0294 0.0257 20000 -0.0802  0.0208 #> gamma1.g23  0.0527 0.0236 20000  0.0070  0.0993 #> gamma2.g12  0.0193 0.0244 20000 -0.0286  0.0674 #> gamma2.g13 -0.0572 0.0248 20000 -0.1059 -0.0081 #> gamma2.g23 -0.0765 0.0228 20000 -0.1213 -0.0320 #> gamma3.g12  0.0811 0.0203 20000  0.0411  0.1209 #> gamma3.g13  0.0211 0.0204 20000 -0.0191  0.0613 #> gamma3.g23 -0.0601 0.0196 20000 -0.0988 -0.0217"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"example, use data Kwan & Chan (2014) three groups (Hong Kong, Japan, Korea) child’s reading ability (Y1Y_{1}) regressed parental occupational status (X1X_{1}), parental educational level (X2X_{2}), child’s home possession (X3X_{3}) Y1=α1+γ1X1+γ2X2+γ3X3+ζ1.     Y_{1}     =     \\alpha_{1}     +     \\gamma_{1}     X_{1}     +     \\gamma_{2}     X_{2}     +     \\gamma_{3}     X_{3}     +     \\zeta_{1} . Note ζ1\\zeta_{1} stochastic error term expected value zero finite variance ψ1\\psi_{1}, α1\\alpha_{1} intercept, γ1\\gamma_{1}, γ2\\gamma_{2}, γ3\\gamma_{3} regression coefficients. Covariance Matrix Hong Kong Covariance Matrix Japan Covariance Matrix Korea","code":"knitr::kable(   x = covs_hongkong, digits = 4,   caption = \"Covariance Matrix for Hong Kong\" ) nobs_hongkong #> [1] 4625 knitr::kable(   x = covs_japan, digits = 4,   caption = \"Covariance Matrix for Japan\" ) nobs_japan #> [1] 5943 nobs_korea <- 5151 covs_korea <- matrix(   data = c(     8187.6921, 31.6266, 37.3062, 30.9021,     31.6266, 0.9271, 0.6338, 0.4088,     37.3062, 0.6338, 1.0007, 0.3902,     30.9021, 0.4088, 0.3902, 0.8031   ),   nrow = 4 ) colnames(covs_korea) <- rownames(covs_korea) <- varnames knitr::kable(   x = covs_korea, digits = 4,   caption = \"Covariance Matrix for Korea\" )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"regress Y1 X1, X2, X3. label error variance ζ1\\zeta_{1} three groups psi1.g1, psi1.g2, psi1.g3. R2R^{2} defined using := operator lavaan model syntax using following equation R2=1−ψ*     R^{2}     =     1 - \\psi^{\\ast} ψ*\\psi^{\\ast} standardized error variance.","code":"model <- \"   Y1 ~ X1 + X2 + X3   Y1 ~~ c(psi1.g1, psi1.g2, psi1.g3) * Y1   rsq.g1 := 1 - psi1.g1   rsq.g2 := 1 - psi1.g2   rsq.g3 := 1 - psi1.g3   rsq.g12 := rsq.g1 - rsq.g2   rsq.g13 := rsq.g1 - rsq.g3   rsq.g23 := rsq.g2 - rsq.g3 \""},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"can now fit model using sem() function lavaan mimic = \"eqs\" ensure compatibility results Kwan & Chan (2014). Note: recommend setting fixed.x = FALSE generating standardized estimates confidence intervals model variances covariances exogenous observed variables assumed random. fixed.x = TRUE, default setting lavaan, MC() fix variances covariances exogenous observed variables sample values.","code":"fit <- sem(   model = model, mimic = \"eqs\", fixed.x = FALSE,   sample.cov = list(covs_hongkong, covs_japan, covs_korea),   sample.nobs = list(nobs_hongkong, nobs_japan, nobs_korea) )"},{"path":"https://github.com/jeksterslab/semmcci/articles/mcstd-5-difference-rsq-multigroup.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"MCStd Function Use Case 5: Difference of R-Squared in Multiple Groups","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCStd() function. Note: parameterization R2R^{2} interpreted using output MCStd() function since input functions defined := require standardized estimates.","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05) MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>               est     se     R    2.5%   97.5% #> Y1~X1      0.0568 0.0191 20000  0.0194  0.0942 #> Y1~X2      0.1985 0.0186 20000  0.1616  0.2353 #> Y1~X3      0.2500 0.0150 20000  0.2208  0.2791 #> psi1.g1    0.8215 0.0103 20000  0.8004  0.8409 #> X1~~X1     1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2     0.6917 0.0076 20000  0.6766  0.7064 #> X1~~X3     0.4702 0.0115 20000  0.4474  0.4923 #> X2~~X2     1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3     0.4471 0.0117 20000  0.4237  0.4699 #> X3~~X3     1.0000 0.0000 20000  1.0000  1.0000 #> Y1~X1.g2   0.1390 0.0164 20000  0.1068  0.1711 #> Y1~X2.g2   0.1792 0.0158 20000  0.1480  0.2098 #> Y1~X3.g2   0.1688 0.0139 20000  0.1416  0.1961 #> psi1.g2    0.8371 0.0088 20000  0.8196  0.8539 #> X1~~X1.g2  1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g2  0.6525 0.0074 20000  0.6380  0.6670 #> X1~~X3.g2  0.5023 0.0096 20000  0.4833  0.5208 #> X2~~X2.g2  1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g2  0.4452 0.0104 20000  0.4249  0.4651 #> X3~~X3.g2  1.0000 0.0000 20000  1.0000  1.0000 #> Y1~X1.g3   0.0863 0.0170 20000  0.0527  0.1193 #> Y1~X2.g3   0.2557 0.0164 20000  0.2236  0.2877 #> Y1~X3.g3   0.2289 0.0139 20000  0.2017  0.2563 #> psi1.g3    0.7761 0.0103 20000  0.7556  0.7958 #> X1~~X1.g3  1.0000 0.0000 20000  1.0000  1.0000 #> X1~~X2.g3  0.6580 0.0079 20000  0.6425  0.6734 #> X1~~X3.g3  0.4738 0.0107 20000  0.4526  0.4945 #> X2~~X2.g3  1.0000 0.0000 20000  1.0000  1.0000 #> X2~~X3.g3  0.4353 0.0112 20000  0.4133  0.4570 #> X3~~X3.g3  1.0000 0.0000 20000  1.0000  1.0000 #> rsq.g1     0.1785 0.0103 20000  0.1591  0.1996 #> rsq.g2     0.1629 0.0088 20000  0.1461  0.1804 #> rsq.g3     0.2239 0.0103 20000  0.2042  0.2444 #> rsq.g12    0.0155 0.0135 20000 -0.0109  0.0424 #> rsq.g13   -0.0455 0.0145 20000 -0.0742 -0.0169 #> rsq.g23   -0.0610 0.0135 20000 -0.0877 -0.0346"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"semmcci: Methods (MI)","text":"","code":"summary(df) #>        X                   M                  Y            #>  Min.   :-3.199558   Min.   :-3.37128   Min.   :-3.61432   #>  1st Qu.:-0.632676   1st Qu.:-0.70516   1st Qu.:-0.66921   #>  Median : 0.028235   Median : 0.02825   Median :-0.04834   #>  Mean   : 0.002689   Mean   :-0.01992   Mean   :-0.01538   #>  3rd Qu.: 0.657543   3rd Qu.: 0.65239   3rd Qu.: 0.65293   #>  Max.   : 3.470910   Max.   : 2.93497   Max.   : 3.09950   #>  NA's   :100         NA's   :100        NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"semmcci: Methods (MI)","text":"Perform appropriate multiple imputation approach deal missing values. example, impute multivariate missing data normal model.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 )"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"semmcci: Methods (MI)","text":"","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"semmcci: Methods (MI)","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"semmcci: Methods (MI)","text":"","code":"unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"print","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MI)","text":"","code":"print(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0299 20000 0.1745 0.2909 #> b        0.5113 0.0298 20000 0.4526 0.5698 #> a        0.4811 0.0287 20000 0.4248 0.5370 #> X~~X     1.0617 0.0498 20000 0.9634 1.1594 #> Y~~Y     0.5533 0.0273 20000 0.5004 0.6071 #> M~~M     0.7568 0.0362 20000 0.6862 0.8293 #> indirect 0.2460 0.0204 20000 0.2071 0.2868 #> direct   0.2328 0.0299 20000 0.1745 0.2909 #> total    0.4788 0.0285 20000 0.4233 0.5338"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MI)","text":"","code":"summary(unstd) #>             est     se     R   2.5%  97.5% #> cp       0.2328 0.0299 20000 0.1745 0.2909 #> b        0.5113 0.0298 20000 0.4526 0.5698 #> a        0.4811 0.0287 20000 0.4248 0.5370 #> X~~X     1.0617 0.0498 20000 0.9634 1.1594 #> Y~~Y     0.5533 0.0273 20000 0.5004 0.6071 #> M~~M     0.7568 0.0362 20000 0.6862 0.8293 #> indirect 0.2460 0.0204 20000 0.2071 0.2868 #> direct   0.2328 0.0299 20000 0.1745 0.2909 #> total    0.4788 0.0285 20000 0.4233 0.5338"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MI)","text":"","code":"coef(unstd) #>        cp         b         a      X~~X      Y~~Y      M~~M  indirect    direct  #> 0.2328242 0.5113353 0.4810732 1.0617011 0.5533052 0.7567771 0.2459664 0.2328242  #>     total  #> 0.4787907"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MI)","text":"","code":"vcov(unstd) #>                     cp             b             a          X~~X          Y~~Y #> cp        8.943569e-04 -4.831282e-04 -3.423363e-05  8.313977e-06 -2.528988e-05 #> b        -4.831282e-04  8.903650e-04 -1.110843e-05  3.426335e-06 -2.211357e-05 #> a        -3.423363e-05 -1.110843e-05  8.253544e-04 -8.348106e-06  2.390819e-05 #> X~~X      8.313977e-06  3.426335e-06 -8.348106e-06  2.482088e-03 -3.473128e-05 #> Y~~Y     -2.528988e-05 -2.211357e-05  2.390819e-05 -3.473128e-05  7.461105e-04 #> M~~M     -5.812966e-06  7.335175e-06 -7.254267e-05 -3.145606e-05  2.028020e-06 #> indirect -2.497870e-04  4.223324e-04  4.165626e-04 -2.547179e-06  1.278967e-06 #> direct    8.943569e-04 -4.831282e-04 -3.423363e-05  8.313977e-06 -2.528988e-05 #> total     6.445700e-04 -6.079582e-05  3.823290e-04  5.766798e-06 -2.401091e-05 #>                   M~~M      indirect        direct         total #> cp       -5.812966e-06 -2.497870e-04  8.943569e-04  6.445700e-04 #> b         7.335175e-06  4.223324e-04 -4.831282e-04 -6.079582e-05 #> a        -7.254267e-05  4.165626e-04 -3.423363e-05  3.823290e-04 #> X~~X     -3.145606e-05 -2.547179e-06  8.313977e-06  5.766798e-06 #> Y~~Y      2.028020e-06  1.278967e-06 -2.528988e-05 -2.401091e-05 #> M~~M      1.309986e-03 -3.349766e-05 -5.812966e-06 -3.931063e-05 #> indirect -3.349766e-05  4.166920e-04 -2.497870e-04  1.669050e-04 #> direct   -5.812966e-06 -2.497870e-04  8.943569e-04  6.445700e-04 #> total    -3.931063e-05  1.669050e-04  6.445700e-04  8.114750e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MI)","text":"","code":"confint(unstd, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1745148 0.2908682 #> b        0.4525977 0.5697833 #> a        0.4247560 0.5370047 #> X~~X     0.9633807 1.1594261 #> Y~~Y     0.5003952 0.6070687 #> M~~M     0.6862436 0.8292795 #> indirect 0.2071186 0.2867967 #> direct   0.1745148 0.2908682 #> total    0.4233013 0.5337567"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"semmcci: Methods (MI)","text":"","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05) std <- MCStd(unstd, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"print-1","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MI)","text":"","code":"print(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0304 20000 0.1804 0.3006 #> b        0.5189 0.0271 20000 0.4592 0.5659 #> a        0.5031 0.0261 20000 0.4432 0.5452 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0250 20000 0.5063 0.6047 #> M~~M     0.7469 0.0258 20000 0.7028 0.8035 #> indirect 0.2610 0.0189 20000 0.2183 0.2924 #> direct   0.2450 0.0304 20000 0.1804 0.3006 #> total    0.5060 0.0262 20000 0.4422 0.5444"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"summary-1","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MI)","text":"","code":"summary(std) #>             est     se     R   2.5%  97.5% #> cp       0.2450 0.0304 20000 0.1804 0.3006 #> b        0.5189 0.0271 20000 0.4592 0.5659 #> a        0.5031 0.0261 20000 0.4432 0.5452 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.5429 0.0250 20000 0.5063 0.6047 #> M~~M     0.7469 0.0258 20000 0.7028 0.8035 #> indirect 0.2610 0.0189 20000 0.2183 0.2924 #> direct   0.2450 0.0304 20000 0.1804 0.3006 #> total    0.5060 0.0262 20000 0.4422 0.5444"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"coef-1","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MI)","text":"","code":"coef(std) #>        cp         b         a      X~~X      Y~~Y      M~~M  indirect    direct  #> 0.2449797 0.5188628 0.5030687 1.0000000 0.5428754 0.7469219 0.2610236 0.2449797  #>     total  #> 0.5060033"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"vcov-1","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MI)","text":"","code":"vcov(std) #>                     cp             b             a          X~~X          Y~~Y #> cp        9.262683e-04 -5.963270e-04 -5.810115e-06  3.060285e-21 -1.600048e-04 #> b        -5.963270e-04  7.365269e-04 -9.081271e-06 -1.431459e-20 -3.385029e-04 #> a        -5.810115e-06 -9.081271e-06  6.790679e-04 -4.537926e-21 -1.497373e-04 #> X~~X      3.060285e-21 -1.431459e-20 -4.537926e-21  1.184337e-32  1.760685e-20 #> Y~~Y     -1.600048e-04 -3.385029e-04 -1.497373e-04  1.760685e-20  6.231579e-04 #> M~~M      5.787999e-06  8.982322e-06 -6.710890e-04  3.531641e-21  1.479133e-04 #> indirect -2.983751e-04  3.601056e-04  3.440031e-04 -9.773505e-21 -2.442477e-04 #> direct    9.262683e-04 -5.963270e-04 -5.810115e-06  3.060285e-21 -1.600048e-04 #> total     6.278932e-04 -2.362214e-04  3.381930e-04 -6.713220e-21 -4.042524e-04 #>                   M~~M      indirect        direct         total #> cp        5.787999e-06 -2.983751e-04  9.262683e-04  6.278932e-04 #> b         8.982322e-06  3.601056e-04 -5.963270e-04 -2.362214e-04 #> a        -6.710890e-04  3.440031e-04 -5.810115e-06  3.381930e-04 #> X~~X      3.531641e-21 -9.773505e-21  3.060285e-21 -6.713220e-21 #> Y~~Y      1.479133e-04 -2.442477e-04 -1.600048e-04 -4.042524e-04 #> M~~M      6.641077e-04 -3.399516e-04  5.787999e-06 -3.341636e-04 #> indirect -3.399516e-04  3.553942e-04 -2.983751e-04  5.701905e-05 #> direct    5.787999e-06 -2.983751e-04  9.262683e-04  6.278932e-04 #> total    -3.341636e-04  5.701905e-05  6.278932e-04  6.849123e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc-mi.html","id":"confint-1","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MI)","text":"","code":"confint(std, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1803751 0.3005559 #> b        0.4591996 0.5658582 #> a        0.4432376 0.5451754 #> X~~X     1.0000000 1.0000000 #> Y~~Y     0.5062647 0.6047042 #> M~~M     0.7027838 0.8035405 #> indirect 0.2183313 0.2923565 #> direct   0.1803751 0.3005559 #> total    0.4422243 0.5444044"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"semmcci: Methods (MC)","text":"","code":"summary(df) #>        X                   M                   Y            #>  Min.   :-3.199558   Min.   :-3.371276   Min.   :-3.61432   #>  1st Qu.:-0.636035   1st Qu.:-0.692640   1st Qu.:-0.66146   #>  Median : 0.011377   Median : 0.007125   Median :-0.04726   #>  Mean   :-0.003207   Mean   :-0.023968   Mean   :-0.01677   #>  3rd Qu.: 0.651951   3rd Qu.: 0.647363   3rd Qu.: 0.62640   #>  Max.   : 3.470910   Max.   : 2.963216   Max.   : 3.09950 colMeans(df) #>            X            M            Y  #> -0.003206987 -0.023968103 -0.016774294 var(df) #>           X         M         Y #> X 1.0600162 0.5108780 0.5069458 #> M 0.5108780 0.9996606 0.6272104 #> Y 0.5069458 0.6272104 0.9837255"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model Specification","title":"semmcci: Methods (MC)","text":"","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"semmcci: Methods (MC)","text":"","code":"fit <- sem(data = df, model = model)"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Monte Carlo Confidence Intervals","title":"semmcci: Methods (MC)","text":"","code":"unstd <- MC(fit, R = 20000L, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"print","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MC)","text":"","code":"print(unstd) #> Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MC)","text":"","code":"summary(unstd) #>             est     se     R   2.5%  97.5% #> cp       0.2333 0.0264 20000 0.1819 0.2849 #> b        0.5082 0.0272 20000 0.4553 0.5613 #> a        0.4820 0.0264 20000 0.4302 0.5340 #> Y~~Y     0.5462 0.0244 20000 0.4979 0.5944 #> M~~M     0.7527 0.0339 20000 0.6858 0.8187 #> X~~X     1.0590 0.0000 20000 1.0590 1.0590 #> indirect 0.2449 0.0187 20000 0.2094 0.2831 #> direct   0.2333 0.0264 20000 0.1819 0.2849 #> total    0.4782 0.0265 20000 0.4261 0.5306"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MC)","text":"","code":"coef(unstd) #>        cp         b         a      Y~~Y      M~~M      X~~X  indirect    direct  #> 0.2333230 0.5081833 0.4819530 0.5461589 0.7526879 1.0589562 0.2449205 0.2333230  #>     total  #> 0.4782435"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MC)","text":"","code":"vcov(unstd) #>                     cp             b             a         Y~~Y          M~~M #> cp        6.975724e-04 -3.570594e-04  1.739434e-06 2.065846e-06 -4.029921e-06 #> b        -3.570594e-04  7.379603e-04 -7.450590e-06 1.744389e-06  6.618803e-06 #> a         1.739434e-06 -7.450590e-06  6.982971e-04 8.322624e-06 -5.021764e-06 #> Y~~Y      2.065846e-06  1.744389e-06  8.322624e-06 5.962836e-04  4.504744e-06 #> M~~M     -4.029921e-06  6.618803e-06 -5.021764e-06 4.504744e-06  1.148370e-03 #> X~~X      0.000000e+00  0.000000e+00  0.000000e+00 0.000000e+00  0.000000e+00 #> indirect -1.708943e-04  3.516821e-04  3.515320e-04 4.920373e-06  3.808621e-07 #> direct    6.975724e-04 -3.570594e-04  1.739434e-06 2.065846e-06 -4.029921e-06 #> total     5.266782e-04 -5.377290e-06  3.532714e-04 6.986219e-06 -3.649059e-06 #>          X~~X      indirect        direct         total #> cp          0 -1.708943e-04  6.975724e-04  5.266782e-04 #> b           0  3.516821e-04 -3.570594e-04 -5.377290e-06 #> a           0  3.515320e-04  1.739434e-06  3.532714e-04 #> Y~~Y        0  4.920373e-06  2.065846e-06  6.986219e-06 #> M~~M        0  3.808621e-07 -4.029921e-06 -3.649059e-06 #> X~~X        0  0.000000e+00  0.000000e+00  0.000000e+00 #> indirect    0  3.486997e-04 -1.708943e-04  1.778055e-04 #> direct      0 -1.708943e-04  6.975724e-04  5.266782e-04 #> total       0  1.778055e-04  5.266782e-04  7.044836e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MC)","text":"","code":"confint(unstd, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1819362 0.2849104 #> b        0.4552649 0.5613296 #> a        0.4301663 0.5339651 #> Y~~Y     0.4979155 0.5944224 #> M~~M     0.6857891 0.8187138 #> X~~X     1.0589562 1.0589562 #> indirect 0.2093636 0.2830510 #> direct   0.1819362 0.2849104 #> total    0.4261341 0.5305578"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"standardized-monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals","title":"semmcci: Methods (MC)","text":"","code":"fit <- sem(data = df, model = model, fixed.x = FALSE) unstd <- MC(fit, R = 20000L, alpha = 0.05) std <- MCStd(unstd, alpha = 0.05)"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"print-1","dir":"Articles","previous_headings":"Methods","what":"print","title":"semmcci: Methods (MC)","text":"","code":"print(std) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"summary-1","dir":"Articles","previous_headings":"Methods","what":"summary","title":"semmcci: Methods (MC)","text":"","code":"summary(std) #>             est     se     R   2.5%  97.5% #> cp       0.2422 0.0266 20000 0.1897 0.2941 #> b        0.5123 0.0247 20000 0.4636 0.5605 #> a        0.4963 0.0240 20000 0.4476 0.5416 #> Y~~Y     0.5558 0.0236 20000 0.5089 0.6015 #> M~~M     0.7537 0.0238 20000 0.7066 0.7996 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> indirect 0.2542 0.0177 20000 0.2199 0.2891 #> direct   0.2422 0.0266 20000 0.1897 0.2941 #> total    0.4964 0.0239 20000 0.4477 0.5417"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"coef-1","dir":"Articles","previous_headings":"Methods","what":"coef","title":"semmcci: Methods (MC)","text":"","code":"coef(std) #>        cp         b         a      Y~~Y      M~~M      X~~X  indirect    direct  #> 0.2422015 0.5122827 0.4962890 0.5557501 0.7536972 1.0000000 0.2542403 0.2422015  #>     total  #> 0.4964418"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"vcov-1","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"semmcci: Methods (MC)","text":"","code":"vcov(std) #>                     cp             b             a          Y~~Y          M~~M #> cp        7.091899e-04 -4.651025e-04  8.245583e-06 -1.168207e-04 -8.275421e-06 #> b        -4.651025e-04  6.083075e-04  2.339914e-05 -3.134309e-04 -2.305571e-05 #> a         8.245583e-06  2.339914e-05  5.769659e-04 -1.801830e-04 -5.706892e-04 #> Y~~Y     -1.168207e-04 -3.134309e-04 -1.801830e-04  5.569665e-04  1.782647e-04 #> M~~M     -8.275421e-06 -2.305571e-05 -5.706892e-04  1.782647e-04  5.651409e-04 #> X~~X      3.525000e-20 -4.147947e-20 -9.499398e-21  1.914120e-20  8.545081e-21 #> indirect -2.265255e-04  3.136098e-04  3.069966e-04 -2.474505e-04 -3.036457e-04 #> direct    7.091899e-04 -4.651025e-04  8.245583e-06 -1.168207e-04 -8.275421e-06 #> total     4.826644e-04 -1.514927e-04  3.152422e-04 -3.642712e-04 -3.119212e-04 #>                   X~~X      indirect        direct         total #> cp        3.525000e-20 -2.265255e-04  7.091899e-04  4.826644e-04 #> b        -4.147947e-20  3.136098e-04 -4.651025e-04 -1.514927e-04 #> a        -9.499398e-21  3.069966e-04  8.245583e-06  3.152422e-04 #> Y~~Y      1.914120e-20 -2.474505e-04 -1.168207e-04 -3.642712e-04 #> M~~M      8.545081e-21 -3.036457e-04 -8.275421e-06 -3.119212e-04 #> X~~X      1.182796e-32 -2.533127e-20  3.525000e-20  9.918728e-21 #> indirect -2.533127e-20  3.130369e-04 -2.265255e-04  8.651139e-05 #> direct    3.525000e-20 -2.265255e-04  7.091899e-04  4.826644e-04 #> total     9.918728e-21  8.651139e-05  4.826644e-04  5.691757e-04"},{"path":"https://github.com/jeksterslab/semmcci/articles/methods-mc.html","id":"confint-1","dir":"Articles","previous_headings":"Methods","what":"confint","title":"semmcci: Methods (MC)","text":"","code":"confint(std, level = 0.95) #>              2.5 %    97.5 % #> cp       0.1896616 0.2941122 #> b        0.4635708 0.5604860 #> a        0.4476424 0.5416327 #> Y~~Y     0.5089400 0.6015440 #> M~~M     0.7066340 0.7996163 #> X~~X     1.0000000 1.0000000 #> indirect 0.2198992 0.2890635 #> direct   0.1896616 0.2941122 #> total    0.4477209 0.5416757"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"the-monte-carlo-method","dir":"Articles","previous_headings":"","what":"The Monte Carlo Method","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates 𝛉̂*\\hat{\\boldsymbol{\\theta}}^{\\ast} generated multivariate normal distribution using parameter estimates 𝛉̂\\hat{\\boldsymbol{\\theta}} corresponding sampling variance-covariance matrix Var̂(𝛉̂)\\widehat{\\mathrm{Var}} \\left( \\hat{\\boldsymbol{\\theta}} \\right). 𝛉̂*∼𝒩(𝛉̂,Var̂(𝛉̂))\\begin{equation}     \\hat{\\boldsymbol{\\theta}}^{\\ast}     \\sim     \\mathcal{N}     \\left(     \\hat{\\boldsymbol{\\theta}},     \\widehat{\\mathrm{Var}}     \\left(     \\hat{\\boldsymbol{\\theta}}     \\right)     \\right) \\end{equation} Confidence intervals defined parameters 𝐠(𝛉̂)\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right) generated obtaining percentiles corresponding 100(1−α)%100(1 - \\alpha)\\% generated sampling distribution, α\\alpha significance level.","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"semmcci","dir":"Articles","previous_headings":"","what":"semmcci","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo confidence intervals free defined parameters Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package three main functions, namely, MC(), MCMI(), MCStd(). output lavaan passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023: https://doi.org/10.3758/s13428-023-02114-4).","code":""},{"path":"https://github.com/jeksterslab/semmcci/articles/semmcci.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"cite semmcci publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"semmcci: Session","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] Amelia_1.8.3         Rcpp_1.1.0           microbenchmark_1.5.0 #> [4] lavaan_0.6-19        semmcci_1.1.5        #>  #> loaded via a namespace (and not attached): #>  [1] tidyr_1.3.1       generics_0.1.4    shape_1.4.6.1     bmemLavaan_0.5    #>  [5] lattice_0.22-7    mitml_0.4-5       lme4_1.1-37       magrittr_2.0.3    #>  [9] evaluate_1.0.4    grid_4.5.1        iterators_1.0.14  mice_3.18.0       #> [13] jomo_2.7-6        foreach_1.5.2     glmnet_4.1-10     rprojroot_2.1.0   #> [17] Matrix_1.7-3      nnet_7.3-20       backports_1.5.0   snowfall_1.84-6.3 #> [21] survival_3.8-3    purrr_1.1.0       rProject_0.0.21   mi_1.1            #> [25] pbivnorm_0.6.0    codetools_0.2-20  abind_1.4-8       mnormt_2.1.1      #> [29] reformulas_0.4.1  Rdpack_2.6.4      cli_3.6.5.9000    rlang_1.1.6       #> [33] rbibutils_2.3     splines_4.5.1     pan_1.9           rsem_0.5.1        #> [37] tools_4.5.1       parallel_4.5.1    nloptr_2.2.1      coda_0.19-4.1     #> [41] minqa_1.2.8       dplyr_1.1.4       boot_1.3-31       broom_1.0.8       #> [45] rpart_4.1.24      vctrs_0.6.5       sem_3.1-16        R6_2.6.1          #> [49] stats4_4.5.1      lifecycle_1.0.4   MASS_7.3-65       foreign_0.8-90    #> [53] pkgconfig_2.0.3   pillar_1.11.0     glue_1.8.0        tidyselect_1.2.1  #> [57] tibble_3.3.0      arm_1.14-4        xfun_0.52         knitr_1.50        #> [61] nlme_3.1-168      snow_0.4-4        compiler_4.5.1    quadprog_1.5-8"},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"semmcci: Session","text":"","code":"installed.packages()[, c(\"Package\", \"Version\")] #>                   Package             Version       #> bmemLavaan        \"bmemLavaan\"        \"0.5\"         #> mi                \"mi\"                \"1.1\"         #> rsem              \"rsem\"              \"0.5.1\"       #> sem               \"sem\"               \"3.1-16\"      #> semmcci           \"semmcci\"           \"1.1.5\"       #> abind             \"abind\"             \"1.4-8\"       #> Amelia            \"Amelia\"            \"1.8.3\"       #> arm               \"arm\"               \"1.14-4\"      #> arrow             \"arrow\"             \"20.0.0.2\"    #> ash               \"ash\"               \"1.0-15\"      #> askpass           \"askpass\"           \"1.2.1\"       #> assertthat        \"assertthat\"        \"0.2.1\"       #> backports         \"backports\"         \"1.5.0\"       #> base64enc         \"base64enc\"         \"0.1-3\"       #> betaDelta         \"betaDelta\"         \"1.0.6\"       #> betaMC            \"betaMC\"            \"1.3.3\"       #> betaNB            \"betaNB\"            \"1.0.5.9000\"  #> betaSandwich      \"betaSandwich\"      \"1.0.8\"       #> BH                \"BH\"                \"1.87.0-1\"    #> bibtex            \"bibtex\"            \"0.5.1\"       #> BiocManager       \"BiocManager\"       \"1.30.26\"     #> bit               \"bit\"               \"4.6.0\"       #> bit64             \"bit64\"             \"4.6.0-1\"     #> bitops            \"bitops\"            \"1.0-9\"       #> blob              \"blob\"              \"1.2.4\"       #> bootStateSpace    \"bootStateSpace\"    \"1.0.2\"       #> brew              \"brew\"              \"1.0-10\"      #> brio              \"brio\"              \"1.1.5\"       #> broom             \"broom\"             \"1.0.8\"       #> bslib             \"bslib\"             \"0.9.0\"       #> cachem            \"cachem\"            \"1.1.0\"       #> callr             \"callr\"             \"3.7.6\"       #> car               \"car\"               \"3.1-3\"       #> caracas           \"caracas\"           \"2.1.1\"       #> carData           \"carData\"           \"3.0-5\"       #> cellranger        \"cellranger\"        \"1.1.0\"       #> cffr              \"cffr\"              \"1.2.0\"       #> checkmate         \"checkmate\"         \"2.3.2\"       #> cli               \"cli\"               \"3.6.5.9000\"  #> clipr             \"clipr\"             \"0.8.0\"       #> clock             \"clock\"             \"0.7.3\"       #> clusterGeneration \"clusterGeneration\" \"1.3.8\"       #> coda              \"coda\"              \"0.19-4.1\"    #> cOde              \"cOde\"              \"1.1.1\"       #> collections       \"collections\"       \"0.3.8\"       #> colorspace        \"colorspace\"        \"2.1-1\"       #> commonmark        \"commonmark\"        \"2.0.0\"       #> conflicted        \"conflicted\"        \"1.2.0\"       #> corpcor           \"corpcor\"           \"1.6.10\"      #> covr              \"covr\"              \"3.6.4\"       #> cowplot           \"cowplot\"           \"1.2.0\"       #> cpp11             \"cpp11\"             \"0.5.2\"       #> crayon            \"crayon\"            \"1.5.3\"       #> credentials       \"credentials\"       \"2.0.2\"       #> crosstalk         \"crosstalk\"         \"1.2.1\"       #> cTMed             \"cTMed\"             \"1.0.6.9000\"  #> ctsem             \"ctsem\"             \"3.10.4\"      #> curl              \"curl\"              \"6.4.0\"       #> data.table        \"data.table\"        \"1.17.8\"      #> DBI               \"DBI\"               \"1.2.3\"       #> dbplyr            \"dbplyr\"            \"2.5.0\"       #> Deriv             \"Deriv\"             \"4.2.0\"       #> desc              \"desc\"              \"1.4.3\"       #> deSolve           \"deSolve\"           \"1.40\"        #> devtools          \"devtools\"          \"2.4.5.9000\"  #> diagram           \"diagram\"           \"1.6.5\"       #> dials             \"dials\"             \"1.4.0\"       #> DiceDesign        \"DiceDesign\"        \"1.10\"        #> diffobj           \"diffobj\"           \"0.3.6\"       #> digest            \"digest\"            \"0.6.37\"      #> distributional    \"distributional\"    \"0.5.0\"       #> distro            \"distro\"            \"0.1.0\"       #> doBy              \"doBy\"              \"4.7.0\"       #> docopt            \"docopt\"            \"0.7.2\"       #> doFuture          \"doFuture\"          \"1.1.2\"       #> downlit           \"downlit\"           \"0.4.4\"       #> dplyr             \"dplyr\"             \"1.1.4\"       #> DT                \"DT\"                \"0.33\"        #> dtplyr            \"dtplyr\"            \"1.3.1\"       #> duckdb            \"duckdb\"            \"1.3.2\"       #> dynr              \"dynr\"              \"0.1.16-109\"  #> dynUtils          \"dynUtils\"          \"0.9.1\"       #> ellipse           \"ellipse\"           \"0.5.0\"       #> ellipsis          \"ellipsis\"          \"0.3.2\"       #> evaluate          \"evaluate\"          \"1.0.4\"       #> expm              \"expm\"              \"1.0-0\"       #> fansi             \"fansi\"             \"1.0.6\"       #> farver            \"farver\"            \"2.1.2\"       #> fastDummies       \"fastDummies\"       \"1.7.5\"       #> fastmap           \"fastmap\"           \"1.2.0\"       #> fclust            \"fclust\"            \"2.1.1.1\"     #> fda               \"fda\"               \"6.3.0\"       #> fdrtool           \"fdrtool\"           \"1.2.18\"      #> fds               \"fds\"               \"1.8\"         #> fitDTVARMx        \"fitDTVARMx\"        \"0.0.0.9000\"  #> FNN               \"FNN\"               \"1.1.4.1\"     #> fontawesome       \"fontawesome\"       \"0.5.3\"       #> forcats           \"forcats\"           \"1.0.0\"       #> foreach           \"foreach\"           \"1.5.2\"       #> Formula           \"Formula\"           \"1.2-5\"       #> fs                \"fs\"                \"1.6.6\"       #> fst               \"fst\"               \"0.9.8\"       #> fstcore           \"fstcore\"           \"0.10.0\"      #> furrr             \"furrr\"             \"0.3.1\"       #> future            \"future\"            \"1.58.0\"      #> future.apply      \"future.apply\"      \"1.20.0\"      #> gargle            \"gargle\"            \"1.5.2\"       #> generics          \"generics\"          \"0.1.4\"       #> gert              \"gert\"              \"2.1.5\"       #> ggplot2           \"ggplot2\"           \"3.5.2\"       #> ggrepel           \"ggrepel\"           \"0.9.6\"       #> gh                \"gh\"                \"1.5.0\"       #> gitcreds          \"gitcreds\"          \"0.1.2\"       #> glasso            \"glasso\"            \"1.11\"        #> glmnet            \"glmnet\"            \"4.1-10\"      #> globals           \"globals\"           \"0.18.0\"      #> glue              \"glue\"              \"1.8.0\"       #> googledrive       \"googledrive\"       \"2.1.1\"       #> googlesheets4     \"googlesheets4\"     \"1.1.1\"       #> gower             \"gower\"             \"1.0.2\"       #> GPArotation       \"GPArotation\"       \"2025.3-1\"    #> GPfit             \"GPfit\"             \"1.0-9\"       #> graphicalVAR      \"graphicalVAR\"      \"0.3.4\"       #> gridExtra         \"gridExtra\"         \"2.3\"         #> gsubfn            \"gsubfn\"            \"0.7\"         #> gtable            \"gtable\"            \"0.3.6\"       #> gtools            \"gtools\"            \"3.9.5\"       #> hardhat           \"hardhat\"           \"1.4.1\"       #> haven             \"haven\"             \"2.5.5\"       #> hdrcde            \"hdrcde\"            \"3.4\"         #> here              \"here\"              \"1.0.1\"       #> highr             \"highr\"             \"0.11\"        #> Hmisc             \"Hmisc\"             \"5.2-3\"       #> hms               \"hms\"               \"1.1.3\"       #> htmlTable         \"htmlTable\"         \"2.4.3\"       #> htmltools         \"htmltools\"         \"0.5.8.1\"     #> htmlwidgets       \"htmlwidgets\"       \"1.6.4\"       #> httpuv            \"httpuv\"            \"1.6.16\"      #> httr              \"httr\"              \"1.4.7\"       #> httr2             \"httr2\"             \"1.2.0\"       #> ids               \"ids\"               \"1.0.1\"       #> ifaTools          \"ifaTools\"          \"0.23\"        #> igraph            \"igraph\"            \"2.1.4\"       #> infer             \"infer\"             \"1.0.9\"       #> ini               \"ini\"               \"0.3.1\"       #> inline            \"inline\"            \"0.3.21\"      #> ipred             \"ipred\"             \"0.9-15\"      #> isoband           \"isoband\"           \"0.2.7\"       #> iterators         \"iterators\"         \"1.0.14\"      #> jomo              \"jomo\"              \"2.7-6\"       #> jpeg              \"jpeg\"              \"0.1-11\"      #> jquerylib         \"jquerylib\"         \"0.1.4\"       #> jsonlite          \"jsonlite\"          \"2.0.0\"       #> jsonvalidate      \"jsonvalidate\"      \"1.5.0\"       #> kernlab           \"kernlab\"           \"0.9-33\"      #> knitr             \"knitr\"             \"1.50\"        #> ks                \"ks\"                \"1.15.1\"      #> labeling          \"labeling\"          \"0.4.3\"       #> Lahman            \"Lahman\"            \"12.0-0\"      #> languageserver    \"languageserver\"    \"0.3.16\"      #> later             \"later\"             \"1.4.2\"       #> latex2exp         \"latex2exp\"         \"0.9.6\"       #> lava              \"lava\"              \"1.8.1\"       #> lavaan            \"lavaan\"            \"0.6-19\"      #> lazyeval          \"lazyeval\"          \"0.2.2\"       #> lhs               \"lhs\"               \"1.2.0\"       #> lifecycle         \"lifecycle\"         \"1.0.4\"       #> lintr             \"lintr\"             \"3.2.0\"       #> listenv           \"listenv\"           \"0.9.1\"       #> litedown          \"litedown\"          \"0.7\"         #> littler           \"littler\"           \"0.3.21\"      #> lme4              \"lme4\"              \"1.1-37\"      #> locfit            \"locfit\"            \"1.5-9.12\"    #> longMI            \"longMI\"            \"1.0.0\"       #> loo               \"loo\"               \"2.8.0\"       #> lubridate         \"lubridate\"         \"1.9.4\"       #> magick            \"magick\"            \"2.8.7\"       #> magrittr          \"magrittr\"          \"2.0.3\"       #> markdown          \"markdown\"          \"2.0\"         #> MatrixModels      \"MatrixModels\"      \"0.5-4\"       #> matrixStats       \"matrixStats\"       \"1.5.0\"       #> mclust            \"mclust\"            \"6.1.1\"       #> memoise           \"memoise\"           \"2.0.1\"       #> metaSEM           \"metaSEM\"           \"1.5.0\"       #> metaVAR           \"metaVAR\"           \"0.0.0.9000\"  #> mice              \"mice\"              \"3.18.0\"      #> microbenchmark    \"microbenchmark\"    \"1.5.0\"       #> mime              \"mime\"              \"0.13\"        #> miniUI            \"miniUI\"            \"0.1.2\"       #> minqa             \"minqa\"             \"1.2.8\"       #> mitml             \"mitml\"             \"0.4-5\"       #> mize              \"mize\"              \"0.2.4\"       #> mlVAR             \"mlVAR\"             \"0.5.2\"       #> mnormt            \"mnormt\"            \"2.1.1\"       #> modeldata         \"modeldata\"         \"1.4.0\"       #> modelenv          \"modelenv\"          \"0.2.0\"       #> modelr            \"modelr\"            \"0.1.11\"      #> MplusAutomation   \"MplusAutomation\"   \"1.1.1\"       #> multicool         \"multicool\"         \"1.0.1\"       #> mvtnorm           \"mvtnorm\"           \"1.3-3\"       #> nloptr            \"nloptr\"            \"2.2.1\"       #> numDeriv          \"numDeriv\"          \"2016.8-1.1\"  #> nycflights13      \"nycflights13\"      \"1.0.2\"       #> OpenMx            \"OpenMx\"            \"2.22.7\"      #> openssl           \"openssl\"           \"2.3.3\"       #> ordinal           \"ordinal\"           \"2023.12-4.1\" #> pan               \"pan\"               \"1.9\"         #> pander            \"pander\"            \"0.6.6\"       #> parallelly        \"parallelly\"        \"1.45.0\"      #> parsnip           \"parsnip\"           \"1.3.2\"       #> patchwork         \"patchwork\"         \"1.3.1\"       #> pbapply           \"pbapply\"           \"1.7-2\"       #> pbivnorm          \"pbivnorm\"          \"0.6.0\"       #> pbkrtest          \"pbkrtest\"          \"0.5.5\"       #> pcaPP             \"pcaPP\"             \"2.0-5\"       #> pdftools          \"pdftools\"          \"3.5.0\"       #> pillar            \"pillar\"            \"1.11.0\"      #> pkgbuild          \"pkgbuild\"          \"1.4.8\"       #> pkgconfig         \"pkgconfig\"         \"2.0.3\"       #> pkgdown           \"pkgdown\"           \"2.1.3\"       #> pkgload           \"pkgload\"           \"1.4.0\"       #> plogr             \"plogr\"             \"0.2.0\"       #> plyr              \"plyr\"              \"1.8.9\"       #> png               \"png\"               \"0.1-8\"       #> posterior         \"posterior\"         \"1.6.1\"       #> pracma            \"pracma\"            \"2.4.4\"       #> praise            \"praise\"            \"1.0.0\"       #> prettyunits       \"prettyunits\"       \"1.2.0\"       #> printr            \"printr\"            \"0.3\"         #> processx          \"processx\"          \"3.8.6\"       #> prodlim           \"prodlim\"           \"2025.04.28\"  #> profvis           \"profvis\"           \"0.4.0\"       #> progress          \"progress\"          \"1.2.3\"       #> progressr         \"progressr\"         \"0.15.1\"      #> promises          \"promises\"          \"1.3.3\"       #> proto             \"proto\"             \"1.0.0\"       #> ps                \"ps\"                \"1.9.1\"       #> psych             \"psych\"             \"2.5.6\"       #> purrr             \"purrr\"             \"1.1.0\"       #> qgraph            \"qgraph\"            \"1.9.8\"       #> qpdf              \"qpdf\"              \"1.4.1\"       #> quadprog          \"quadprog\"          \"1.5-8\"       #> quantreg          \"quantreg\"          \"6.1\"         #> quarto            \"quarto\"            \"1.4.4\"       #> QuickJSR          \"QuickJSR\"          \"1.8.0\"       #> R.cache           \"R.cache\"           \"0.17.0\"      #> R.methodsS3       \"R.methodsS3\"       \"1.8.2\"       #> R.oo              \"R.oo\"              \"1.27.1\"      #> R.utils           \"R.utils\"           \"2.13.0\"      #> R6                \"R6\"                \"2.6.1\"       #> ragg              \"ragg\"              \"1.4.0\"       #> rainbow           \"rainbow\"           \"3.8\"         #> rappdirs          \"rappdirs\"          \"0.3.3\"       #> rbibutils         \"rbibutils\"         \"2.3\"         #> rcmdcheck         \"rcmdcheck\"         \"1.4.0\"       #> RColorBrewer      \"RColorBrewer\"      \"1.1-3\"       #> Rcpp              \"Rcpp\"              \"1.1.0\"       #> RcppArmadillo     \"RcppArmadillo\"     \"14.6.0-1\"    #> RcppEigen         \"RcppEigen\"         \"0.3.4.0.2\"   #> RcppGSL           \"RcppGSL\"           \"0.3.13\"      #> RcppParallel      \"RcppParallel\"      \"5.1.10\"      #> RcppTOML          \"RcppTOML\"          \"0.2.3\"       #> RCurl             \"RCurl\"             \"1.98-1.17\"   #> Rdpack            \"Rdpack\"            \"2.6.4\"       #> readr             \"readr\"             \"2.1.5\"       #> readxl            \"readxl\"            \"1.4.5\"       #> recipes           \"recipes\"           \"1.3.1\"       #> RefManageR        \"RefManageR\"        \"1.4.0\"       #> reformulas        \"reformulas\"        \"0.4.1\"       #> rematch           \"rematch\"           \"2.0.0\"       #> rematch2          \"rematch2\"          \"2.1.2\"       #> remotes           \"remotes\"           \"2.5.0\"       #> reprex            \"reprex\"            \"2.1.1\"       #> reshape2          \"reshape2\"          \"1.4.4\"       #> reticulate        \"reticulate\"        \"1.42.0\"      #> rex               \"rex\"               \"1.2.1\"       #> rhub              \"rhub\"              \"2.0.1\"       #> rjags             \"rjags\"             \"4-17\"        #> rlang             \"rlang\"             \"1.1.6\"       #> RMariaDB          \"RMariaDB\"          \"1.3.4\"       #> rmarkdown         \"rmarkdown\"         \"2.29\"        #> roxygen2          \"roxygen2\"          \"7.3.2\"       #> rpf               \"rpf\"               \"1.0.15\"      #> RPostgres         \"RPostgres\"         \"1.4.8\"       #> rProject          \"rProject\"          \"0.0.21\"      #> rprojroot         \"rprojroot\"         \"2.1.0\"       #> rsample           \"rsample\"           \"1.3.0\"       #> RSQLite           \"RSQLite\"           \"2.4.2\"       #> rstan             \"rstan\"             \"2.32.7\"      #> rstantools        \"rstantools\"        \"2.4.0\"       #> rstudioapi        \"rstudioapi\"        \"0.17.1\"      #> rversions         \"rversions\"         \"2.1.2\"       #> rvest             \"rvest\"             \"1.0.4\"       #> Ryacas            \"Ryacas\"            \"1.1.5\"       #> sass              \"sass\"              \"0.4.10\"      #> scales            \"scales\"            \"1.4.0\"       #> selectr           \"selectr\"           \"0.4-2\"       #> semlbci           \"semlbci\"           \"0.11.3\"      #> semmcci           \"semmcci\"           \"1.1.5\"       #> sessioninfo       \"sessioninfo\"       \"1.2.3\"       #> sfd               \"sfd\"               \"0.1.0\"       #> shape             \"shape\"             \"1.4.6.1\"     #> shiny             \"shiny\"             \"1.11.1\"      #> simStateSpace     \"simStateSpace\"     \"1.2.11\"      #> slider            \"slider\"            \"0.3.2\"       #> snow              \"snow\"              \"0.4-4\"       #> snowfall          \"snowfall\"          \"1.84-6.3\"    #> sourcetools       \"sourcetools\"       \"0.1.7-1\"     #> SparseM           \"SparseM\"           \"1.84-2\"      #> sparsevctrs       \"sparsevctrs\"       \"0.3.4\"       #> SQUAREM           \"SQUAREM\"           \"2021.1\"      #> StanHeaders       \"StanHeaders\"       \"2.32.10\"     #> stringi           \"stringi\"           \"1.8.7\"       #> stringr           \"stringr\"           \"1.5.1\"       #> styler            \"styler\"            \"1.10.3\"      #> symSEM            \"symSEM\"            \"0.4\"         #> sys               \"sys\"               \"3.4.3\"       #> systemfonts       \"systemfonts\"       \"1.2.3\"       #> tensorA           \"tensorA\"           \"0.36.2.1\"    #> testthat          \"testthat\"          \"3.2.3.9000\"  #> texreg            \"texreg\"            \"1.39.4\"      #> textshaping       \"textshaping\"       \"1.0.1\"       #> tibble            \"tibble\"            \"3.3.0\"       #> tidymodels        \"tidymodels\"        \"1.3.0\"       #> tidyr             \"tidyr\"             \"1.3.1\"       #> tidyselect        \"tidyselect\"        \"1.2.1\"       #> tidyverse         \"tidyverse\"         \"2.0.0\"       #> timechange        \"timechange\"        \"0.3.0\"       #> timeDate          \"timeDate\"          \"4041.110\"    #> tinytex           \"tinytex\"           \"0.57\"        #> tune              \"tune\"              \"1.3.0\"       #> tzdb              \"tzdb\"              \"0.5.0\"       #> ucminf            \"ucminf\"            \"1.2.2\"       #> urlchecker        \"urlchecker\"        \"1.0.1\"       #> usethis           \"usethis\"           \"3.1.0\"       #> utf8              \"utf8\"              \"1.2.6\"       #> uuid              \"uuid\"              \"1.2-1\"       #> V8                \"V8\"                \"6.0.4\"       #> vctrs             \"vctrs\"             \"0.6.5\"       #> viridis           \"viridis\"           \"0.6.5\"       #> viridisLite       \"viridisLite\"       \"0.4.2\"       #> vroom             \"vroom\"             \"1.6.5\"       #> waldo             \"waldo\"             \"0.6.2\"       #> warp              \"warp\"              \"0.2.1\"       #> whisker           \"whisker\"           \"0.4.1\"       #> whoami            \"whoami\"            \"1.3.0\"       #> withr             \"withr\"             \"3.0.2\"       #> workflows         \"workflows\"         \"1.2.0\"       #> workflowsets      \"workflowsets\"      \"1.1.1\"       #> xfun              \"xfun\"              \"0.52\"        #> xml2              \"xml2\"              \"1.3.8\"       #> xmlparsedata      \"xmlparsedata\"      \"1.0.5\"       #> xopen             \"xopen\"             \"1.0.1\"       #> xtable            \"xtable\"            \"1.8-4\"       #> yaml              \"yaml\"              \"2.3.10\"      #> yardstick         \"yardstick\"         \"1.3.2\"       #> zip               \"zip\"               \"2.3.3\"       #> base              \"base\"              \"4.5.1\"       #> boot              \"boot\"              \"1.3-31\"      #> class             \"class\"             \"7.3-23\"      #> cluster           \"cluster\"           \"2.1.8.1\"     #> codetools         \"codetools\"         \"0.2-20\"      #> compiler          \"compiler\"          \"4.5.1\"       #> datasets          \"datasets\"          \"4.5.1\"       #> foreign           \"foreign\"           \"0.8-90\"      #> graphics          \"graphics\"          \"4.5.1\"       #> grDevices         \"grDevices\"         \"4.5.1\"       #> grid              \"grid\"              \"4.5.1\"       #> KernSmooth        \"KernSmooth\"        \"2.23-26\"     #> lattice           \"lattice\"           \"0.22-7\"      #> MASS              \"MASS\"              \"7.3-65\"      #> Matrix            \"Matrix\"            \"1.7-3\"       #> methods           \"methods\"           \"4.5.1\"       #> mgcv              \"mgcv\"              \"1.9-3\"       #> nlme              \"nlme\"              \"3.1-168\"     #> nnet              \"nnet\"              \"7.3-20\"      #> parallel          \"parallel\"          \"4.5.1\"       #> rpart             \"rpart\"             \"4.1.24\"      #> spatial           \"spatial\"           \"7.3-18\"      #> splines           \"splines\"           \"4.5.1\"       #> stats             \"stats\"             \"4.5.1\"       #> stats4            \"stats4\"            \"4.5.1\"       #> survival          \"survival\"          \"3.8-3\"       #> tcltk             \"tcltk\"             \"4.5.1\"       #> tools             \"tools\"             \"4.5.1\"       #> utils             \"utils\"             \"4.5.1\""},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"semmcci: Session","text":"","code":"#> Architecture:                         x86_64 #> CPU op-mode(s):                       32-bit, 64-bit #> Address sizes:                        39 bits physical, 48 bits virtual #> Byte Order:                           Little Endian #> CPU(s):                               8 #> On-line CPU(s) list:                  0-7 #> Vendor ID:                            GenuineIntel #> Model name:                           Intel(R) Core(TM) i5-8365U CPU @ 1.60GHz #> CPU family:                           6 #> Model:                                142 #> Thread(s) per core:                   2 #> Core(s) per socket:                   4 #> Socket(s):                            1 #> Stepping:                             12 #> CPU(s) scaling MHz:                   77% #> CPU max MHz:                          4100.0000 #> CPU min MHz:                          400.0000 #> BogoMIPS:                             3799.90 #> Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp vnmi md_clear flush_l1d arch_capabilities #> Virtualization:                       VT-x #> L1d cache:                            128 KiB (4 instances) #> L1i cache:                            128 KiB (4 instances) #> L2 cache:                             1 MiB (4 instances) #> L3 cache:                             6 MiB (1 instance) #> NUMA node(s):                         1 #> NUMA node0 CPU(s):                    0-7 #> Vulnerability Gather data sampling:   Mitigation; Microcode #> Vulnerability Itlb multihit:          KVM: Mitigation: Split huge pages #> Vulnerability L1tf:                   Not affected #> Vulnerability Mds:                    Not affected #> Vulnerability Meltdown:               Not affected #> Vulnerability Mmio stale data:        Mitigation; Clear CPU buffers; SMT vulnerable #> Vulnerability Reg file data sampling: Not affected #> Vulnerability Retbleed:               Mitigation; Enhanced IBRS #> Vulnerability Spec rstack overflow:   Not affected #> Vulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:             Mitigation; Enhanced / Automatic IBRS; IBPB conditional; RSB filling; PBRSB-eIBRS SW sequence; BHI SW loop, KVM SW loop #> Vulnerability Srbds:                  Mitigation; Microcode #> Vulnerability Tsx async abort:        Mitigation; TSX disabled"},{"path":"https://github.com/jeksterslab/semmcci/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"semmcci: Session","text":"","code":"#>                total        used        free      shared  buff/cache   available #> Mem:            15Gi       4.0Gi       797Mi       542Mi        11Gi        11Gi #> Swap:           11Gi        75Mi        11Gi #> Total:          26Gi       4.1Gi        12Gi"},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder. Shu Fai Cheung. Contributor.","code":""},{"path":"https://github.com/jeksterslab/semmcci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. https://doi.org/10.3758/s13428-023-02114-4","code":"@Article{,   author = {Ivan Jacob Agaloos Pesigan and Shu Fai Cheung},   title = {Monte Carlo confidence intervals for the indirect effect with missing data},   year = {2023},   doi = {10.3758/s13428-023-02114-4},   journal = {Behavior Research Methods}, }"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"semmcci","dir":"","previous_headings":"","what":"Monte Carlo Confidence Intervals in Structural Equation Modeling","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Ivan Jacob Agaloos Pesigan 2025-07-22","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can install CRAN release semmcci : can install development version semmcci GitHub :","code":"install.packages(\"semmcci\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/semmcci\")"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Monte Carlo method, sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated obtaining percentiles corresponding 100(1 - α)% generated sampling distribution, α significance level. Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package lavaan can generated using semmcci package. package three main functions, namely, MC(), MCMI(), MCStd(). output lavaan passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023: https://doi.org/10.3758/s13428-023-02114-4).","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"common application Monte Carlo method generate confidence intervals indirect effect. simple mediation model, variable X effect variable Y, mediating variable M. mediating indirect effect product path coefficients fitted model.","code":"library(semmcci) library(lavaan)"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"data","dir":"","previous_headings":"Example","what":"Data","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"","code":"summary(df) #>        X                  M                   Y            #>  Min.   :-3.15272   Min.   :-2.770180   Min.   :-3.15166   #>  1st Qu.:-0.68013   1st Qu.:-0.617813   1st Qu.:-0.67360   #>  Median : 0.02779   Median :-0.008015   Median :-0.03968   #>  Mean   : 0.00338   Mean   : 0.016066   Mean   :-0.02433   #>  3rd Qu.: 0.69009   3rd Qu.: 0.668327   3rd Qu.: 0.63753   #>  Max.   : 2.90756   Max.   : 2.712008   Max.   : 3.27343   #>  NA's   :100        NA's   :100         NA's   :100"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"model-specification","dir":"","previous_headings":"Example","what":"Model Specification","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"indirect effect defined product slopes paths X M labeled M Y labeled b. example, interested confidence intervals indirect defined product b using := operator lavaan model syntax.","code":"model <- \"   Y ~ cp * X + b * M   M ~ a * X   X ~~ X   indirect := a * b   direct := cp   total := cp + (a * b) \""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"can now fit model using sem() function lavaan. use full-information maximum likelihood deal missing values. fit lavaan object can passed MC() function generate Monte Carlo confidence intervals.","code":"fit <- sem(data = df, model = model, missing = \"fiml\") mc <- MC(fit, R = 20000L, alpha = 0.05) mc #> Monte Carlo Confidence Intervals #>              est     se     R    2.5%  97.5% #> cp        0.2491 0.0311 20000  0.1872 0.3099 #> b         0.4685 0.0321 20000  0.4064 0.5318 #> a         0.5032 0.0274 20000  0.4500 0.5562 #> X~~X      1.0556 0.0496 20000  0.9573 1.1532 #> Y~~Y      0.5830 0.0284 20000  0.5279 0.6393 #> M~~M      0.6790 0.0328 20000  0.6133 0.7427 #> Y~1      -0.0307 0.0258 20000 -0.0817 0.0204 #> M~1       0.0134 0.0278 20000 -0.0410 0.0675 #> X~1       0.0029 0.0337 20000 -0.0634 0.0695 #> indirect  0.2358 0.0206 20000  0.1973 0.2777 #> direct    0.2491 0.0311 20000  0.1872 0.3099 #> total     0.4849 0.0284 20000  0.4294 0.5406"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"monte-carlo-confidence-intervals---multiple-imputation","dir":"","previous_headings":"Example","what":"Monte Carlo Confidence Intervals - Multiple Imputation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"MCMI() function can used handle missing values using multiple imputation. MCMI() accepts output mice::mice(), Amelia::amelia(), list multiply imputed data sets. example, impute multivariate missing data normal model. fit model using lavaan using default listwise deletion. fit lavaan object mi object can passed MCMI() function generate Monte Carlo confidence intervals.","code":"mi <- mice::mice(   df,   method = \"norm\",   m = 100,   print = FALSE,   seed = 42 ) fit <- sem(data = df, model = model) mcmi <- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42) mcmi #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>             est     se     R   2.5%  97.5% #> cp       0.2479 0.0311 20000 0.1874 0.3086 #> b        0.4689 0.0332 20000 0.4041 0.5338 #> a        0.5031 0.0275 20000 0.4499 0.5572 #> X~~X     1.0568 0.0502 20000 0.9587 1.1554 #> Y~~Y     0.5827 0.0289 20000 0.5257 0.6396 #> M~~M     0.6794 0.0328 20000 0.6151 0.7433 #> indirect 0.2359 0.0207 20000 0.1967 0.2775 #> direct   0.2479 0.0311 20000 0.1874 0.3086 #> total    0.4838 0.0284 20000 0.4276 0.5396"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"standardized-monte-carlo-confidence-intervals","dir":"","previous_headings":"Example","what":"Standardized Monte Carlo Confidence Intervals","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"Standardized Monte Carlo Confidence intervals can generated passing result MC() function MCMI() function MCStd().","code":"MCStd(mc, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>              est     se     R   2.5%  97.5% #> cp        0.2585 0.0318 20000 0.1951 0.3204 #> b         0.4603 0.0296 20000 0.4017 0.5178 #> a         0.5315 0.0247 20000 0.4824 0.5791 #> X~~X      1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y      0.5948 0.0260 20000 0.5431 0.6449 #> M~~M      0.7175 0.0262 20000 0.6646 0.7672 #> indirect -0.0310 0.0196 20000 0.2072 0.2838 #> direct    0.0137 0.0318 20000 0.1951 0.3204 #> total     0.0028 0.0257 20000 0.4508 0.5515 MCStd(mcmi, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>             est     se     R   2.5%  97.5% #> cp       0.2626 0.0320 20000 0.1953 0.3195 #> b        0.4461 0.0304 20000 0.4004 0.5190 #> a        0.5187 0.0250 20000 0.4819 0.5799 #> X~~X     1.0000 0.0000 20000 1.0000 1.0000 #> Y~~Y     0.6105 0.0265 20000 0.5419 0.6460 #> M~~M     0.7310 0.0265 20000 0.6637 0.7678 #> indirect 0.2314 0.0196 20000 0.2071 0.2836 #> direct   0.2626 0.0320 20000 0.1953 0.3195 #> total    0.4940 0.0260 20000 0.4503 0.5519"},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Monte Carlo Confidence Intervals in Structural Equation Modeling","text":"cite semmcci publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (List) — Func","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Calculates Monte Carlo confidence intervals defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (List) — Func","text":"","code":"Func(coef, func, ..., est, alpha = c(0.001, 0.01, 0.05), ncores = NULL)"},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (List) — Func","text":"coef List. list parameters. func R function. first argument x argument coef. function algebraically manipulates coef return new numeric vector. best named vector output. function can take additional named arguments passed using .... ... Additional arguments pass func. est Numeric vector. Vector original parameter estimates. alpha Numeric vector. Significance level \\(\\alpha\\). ncores Positive integer. Number cores use. ncores = NULL, use single core.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"Func\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (List) — Func","text":"distribution parameters provided list (params) definition function paremeters provided function (func). Confidence intervals defined parameters generated using generated sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (List) — Func","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (List) — Func","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/Func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (List) — Func","text":"","code":"library(semmcci)  ## Generate Parameters ----------------------------------------------------- coef <- lapply(   X = 1:5,   FUN = function(i) {     rnorm(n = 1)   } )  ## Func() ------------------------------------------------------------------ ### Define func ------------------------------------------------------------ func <- function(x) {   out <- exp(x)   names(out) <- \"exp\"   return(out) } ### Generate Confidence Intervals ------------------------------------------ Func(   coef,   func = func,   est = 1,   alpha = 0.05 ) #>        est     se R   2.5% 97.5% #> exp 2.7183 1.1354 5 0.1781 3.024"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals — MC","title":"Monte Carlo Confidence Intervals — MC","text":"Calculates Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"MC(   lav,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals — MC","text":"lav Object class lavaan. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals — MC","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MC\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals — MC","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals — MC","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals — MC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals — MC","text":"","code":"library(semmcci) library(lavaan) #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs.  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- MC(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #> Monte Carlo Confidence Intervals #>                       est     se R   2.5%  97.5% #> cp                 0.2235 0.0896 5 0.1924 0.4207 #> b                  0.4887 0.0864 5 0.3610 0.5406 #> a                  0.4741 0.3787 5 0.0740 0.9810 #> cond~~cond         0.2494 0.0296 5 0.2223 0.2912 #> reaction~~reaction 1.8401 0.2955 5 1.4575 2.2071 #> pmi~~pmi           1.7413 0.1565 5 1.6776 2.0474 #> reaction~1         0.6304 0.5826 5 0.2263 1.5980 #> pmi~1              5.3771 0.3198 5 4.9565 5.6760 #> cond~1             0.4826 0.0233 5 0.4521 0.5068 #> indirect           0.2317 0.1517 5 0.0321 0.3609 #> direct             0.2235 0.0896 5 0.1924 0.4207 #> total              0.4551 0.1710 5 0.3385 0.7492"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Function) — MCFunc","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Calculates Monte Carlo confidence intervals defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"","code":"MCFunc(   coef,   vcov,   func,   ...,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL,   ncores = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"coef Numeric vector. Vector estimated parameters. vcov Numeric matrix. Sampling variance-covariance matrix estimated parameters. func R function. first argument x argument coef. function algebraically manipulates coef return new numeric vector. best named vector output. function can take additional named arguments passed using .... ... Additional arguments pass func. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility. ncores Positive integer. Number cores use. ncores = NULL, use single core.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCFunc\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated using simulated sampling distribution. Parameters defined using func argument.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCFunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Function) — MCFunc","text":"","code":"library(semmcci)  ## MCFunc() ---------------------------------------------------------------- ### Define func ------------------------------------------------------------ func <- function(x) {   out <- exp(x)   names(out) <- \"exp\"   return(out) } ### Generate Confidence Intervals ------------------------------------------ MCFunc(   coef = 0,   vcov = matrix(1),   func = func,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #>     est     se R   2.5% 97.5% #> exp   1 1.7355 5 0.3318 4.363"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Calculates Monte Carlo confidence intervals defined parameters fitted model object coef vcov methods.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"","code":"MCGeneric(   object,   def,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"object R object. Fitted model object coef vcov methods return named vector estimated parameters sampling variance-covariance matrix, respectively. def List character strings. list defined functions parameters. string valid R expression parsed result single value evaluated. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCGeneric\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix. Confidence intervals defined parameters generated using simulated sampling distribution. Parameters defined using def argument.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCGeneric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Generic) — MCGeneric","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MCGeneric() ------------------------------------------------------------- MCGeneric(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05,   def = list(     \"a * b\",     \"cp + (a * b)\"   ) ) #>                 est     se R   2.5%  97.5% #> a * b        0.2900 0.1137 5 0.1279 0.3980 #> cp + (a * b) 0.4965 0.1962 5 0.3252 0.8076"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Calculates Monte Carlo confidence intervals free defined parameters. Missing values handled using multilple imputation.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"","code":"MCMI(   lav,   mi,   R = 20000L,   alpha = c(0.001, 0.01, 0.05),   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   seed = NULL )"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"lav Object class lavaan. mi Object class mids (output mice::mice()), object class amelia (output Amelia::amelia()), list multiply imputed data sets. R Positive integer. Number Monte Carlo replications. alpha Numeric vector. Significance level \\(\\alpha\\). decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. seed Integer. Random seed reproducibility.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCMI\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"sampling distribution parameter estimates generated multivariate normal distribution using parameter estimates sampling variance-covariance matrix obtained using multiple imputation. Confidence intervals free defined parameters generated using simulated sampling distribution. Parameters can defined using := operator lavaan model syntax.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Rubin, D. B. (1987). Multiple imputation nonresponse surveys. John Wiley & Sons, Inc.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCMI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals (Multiple Imputation) — MCMI","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ MCMI(   fit,   mi = mi,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 ) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>                       est     se R   2.5%  97.5% #> cp                 0.4189 0.2485 5 0.0534 0.6831 #> b                  0.4634 0.1046 5 0.3214 0.5797 #> a                  0.3026 0.2999 5 0.1018 0.7836 #> cond~~cond         0.2478 0.0294 5 0.2025 0.2678 #> reaction~~reaction 1.9811 0.1896 5 1.7173 2.1768 #> pmi~~pmi           1.7244 0.4269 5 1.4001 2.4033 #> indirect           0.1412 0.1381 5 0.0414 0.3567 #> direct             0.4189 0.2485 5 0.0534 0.6831 #> total              0.5601 0.1641 5 0.3496 0.7382"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Monte Carlo Confidence Intervals — MCStd","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Calculates standardized Monte Carlo confidence intervals free defined parameters.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"MCStd(mc, alpha = c(0.001, 0.01, 0.05))"},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"mc Output MC() MCMI() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Returns object class semmcci list following elements: call Function call. args List function arguments. thetahat Parameter estimates \\(\\hat{\\theta}\\). thetahatstar Sampling distribution parameter estimates \\(\\hat{\\theta}^{\\ast}\\). fun Function used (\"MCStd\").","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"empirical sampling distribution parameter estimates argument mc standardized, , randomly generated vector parameters standardized. Defined parameters computed standardized component parameters. Confidence intervals generated using standardized empirical sampling distribution.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/MCStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Monte Carlo Confidence Intervals — MCStd","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 )  ## Standardized Monte Carlo ------------------------------------------------ MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R    2.5%  97.5% #> cp                 0.0997 0.1246 5 -0.0433 0.2264 #> b                  0.4399 0.0336 5  0.4471 0.5201 #> a                  0.1703 0.1256 5 -0.0017 0.2840 #> cond~~cond         1.0000 0.0000 5  1.0000 1.0000 #> reaction~~reaction 0.7816 0.0498 5  0.6430 0.7556 #> pmi~~pmi           0.9710 0.0377 5  0.9180 0.9999 #> indirect           0.3622 0.0594 5 -0.0010 0.1320 #> direct             4.0501 0.1246 5 -0.0433 0.2264 #> total              0.9292 0.1721 5 -0.0349 0.3402  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L, # use a large value e.g., 20000L for actual research   alpha = 0.05 )  ## Standardized Monte Carlo ------------------------------------------------ MCStd(unstd, alpha = 0.05) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   2.5%  97.5% #> cp                 0.1350 0.1145 5 0.0605 0.2908 #> b                  0.4360 0.0659 5 0.4069 0.5655 #> a                  0.1463 0.1037 5 0.0890 0.3335 #> cond~~cond         1.0000 0.0000 5 1.0000 1.0000 #> reaction~~reaction 0.7744 0.0829 5 0.6166 0.8122 #> pmi~~pmi           0.9786 0.0446 5 0.8886 0.9918 #> indirect           0.0638 0.0486 5 0.0488 0.1578 #> direct             0.1350 0.1145 5 0.0605 0.2908 #> total              0.1988 0.1412 5 0.1304 0.4295"},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Estimates — coef.semmcci","title":"Parameter Estimates — coef.semmcci","text":"Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Estimates — coef.semmcci","text":"","code":"# S3 method for class 'semmcci' coef(object, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Estimates — coef.semmcci","text":"object Object class semmcci. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Estimates — coef.semmcci","text":"Returns vector parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parameter Estimates — coef.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/coef.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Estimates — coef.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) coef(unstd) #>                 cp                  b                  a         cond~~cond  #>          0.2658766          0.4704099          0.3888388          0.2466416  #> reaction~~reaction           pmi~~pmi         reaction~1              pmi~1  #>          1.9396195          1.7688235          0.6922417          5.3945599  #>             cond~1           indirect             direct              total  #>          0.4485313          0.1829136          0.2658766          0.4487902  coef(std) #>                 cp                  b                  a         cond~~cond  #>         0.08557756         0.40972808         0.14369120         1.00000000  #> reaction~~reaction           pmi~~pmi         reaction~1              pmi~1  #>         0.81472274         0.97935284         0.44864665         4.01405539  #>             cond~1           indirect             direct              total  #>         0.90314927         0.05887432         0.08557756         0.14445188   # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) coef(unstd) #>                 cp                  b                  a         cond~~cond  #>          0.3183181          0.4912705          0.4057651          0.2465993  #> reaction~~reaction           pmi~~pmi           indirect             direct  #>          1.9103791          1.7655638          0.2004329          0.3183181  #>              total  #>          0.5187510  coef(std) #>                 cp                  b                  a         cond~~cond  #>         0.08872727         0.43502714         0.15172185         1.00000000  #> reaction~~reaction           pmi~~pmi           indirect             direct  #>         0.79116630         0.97698048         0.06600312         0.08872727  #>              total  #>         0.15473040"},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Monte Carlo Confidence Intervals Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"","code":"# S3 method for class 'semmcci' confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"object Object class semmcci. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Returns matrix confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/confint.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Confidence Intervals for the Parameter Estimates — confint.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) confint(unstd) #>                          2.5 %    97.5 % #> cp                 -0.51305096 0.7221367 #> b                   0.37497783 0.6515359 #> a                  -0.06106141 0.6431062 #> cond~~cond          0.21366079 0.2875252 #> reaction~~reaction  1.52601582 2.1859216 #> pmi~~pmi            1.45811700 2.0986159 #> reaction~1         -0.15255498 1.2609993 #> pmi~1               5.18729326 5.5421076 #> cond~1              0.43124384 0.4853911 #> indirect           -0.01373886 0.3726966 #> direct             -0.51305096 0.7221367 #> total              -0.28948942 0.9666925 confint(std) #>                          2.5 %    97.5 % #> cp                 -0.14997971 0.2139835 #> b                   0.34233130 0.5610291 #> a                  -0.01867223 0.2340757 #> cond~~cond          1.00000000 1.0000000 #> reaction~~reaction  0.69396208 0.8768936 #> pmi~~pmi            0.94518068 0.9969824 #> indirect           -0.00472690 0.1232964 #> direct             -0.14997971 0.2139835 #> total              -0.08370106 0.2869990  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) confint(unstd) #>                          2.5 %    97.5 % #> cp                 -0.26432646 0.2489080 #> b                   0.47649611 0.6634891 #> a                   0.11764681 1.0199450 #> cond~~cond          0.23962952 0.3093232 #> reaction~~reaction  1.45947586 2.2969139 #> pmi~~pmi            1.73179180 2.1542937 #> indirect            0.07341572 0.6397607 #> direct             -0.26432646 0.2489080 #> total              -0.19091074 0.8376247 confint(std) #>                          2.5 %     97.5 % #> cp                 -0.08728326 0.08358825 #> b                   0.47808643 0.54844592 #> a                   0.04627865 0.35690462 #> cond~~cond          1.00000000 1.00000000 #> reaction~~reaction  0.68090331 0.77127817 #> pmi~~pmi            0.86692286 0.99733038 #> indirect            0.02459122 0.19290309 #> direct             -0.08728326 0.08358825 #> total              -0.06269204 0.25331112"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class semmcci — print.semmcci","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Print Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"# S3 method for class 'semmcci' print(x, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class semmcci — print.semmcci","text":"x object class semmcci. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used x. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Prints matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class semmcci — print.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/print.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class semmcci — print.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) print(unstd) #> Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.1593 0.3947 5 -0.4627 -0.4597 -0.4463 0.4056 0.4141 0.4160 #> b                  0.5192 0.0393 5  0.4710  0.4723  0.4780 0.5721 0.5739 0.5743 #> a                  0.4360 0.2370 5  0.2624  0.2672  0.2889 0.8465 0.8498 0.8506 #> cond~~cond         0.2484 0.0102 5  0.2413  0.2415  0.2425 0.2666 0.2668 0.2669 #> reaction~~reaction 1.8979 0.3744 5  1.4834  1.4887  1.5125 2.4561 2.4952 2.5041 #> pmi~~pmi           1.7089 0.2266 5  1.4151  1.4152  1.4154 1.8953 1.9011 1.9024 #> reaction~1         0.4784 0.2342 5  0.0795  0.0805  0.0852 0.5988 0.6059 0.6075 #> pmi~1              5.3712 0.0971 5  5.2141  5.2147  5.2173 5.4487 5.4616 5.4645 #> cond~1             0.4623 0.0504 5  0.3978  0.3995  0.4069 0.5254 0.5267 0.5270 #> indirect           0.2264 0.1141 5  0.1440  0.1469  0.1599 0.4350 0.4381 0.4388 #> direct             0.1593 0.3947 5 -0.4627 -0.4597 -0.4463 0.4056 0.4141 0.4160 #> total              0.3856 0.5007 5 -0.3188 -0.3128 -0.2864 0.8407 0.8522 0.8548 print(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0513 0.1305 5 -0.1649 -0.1635 -0.1576 0.1279 0.1299 0.1303 #> b                  0.4446 0.0563 5  0.3904  0.3906  0.3913 0.5212 0.5257 0.5268 #> a                  0.1640 0.0939 5  0.0974  0.0992  0.1074 0.3360 0.3397 0.3405 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7923 0.0490 5  0.7121  0.7124  0.7139 0.8256 0.8278 0.8283 #> pmi~~pmi           0.9731 0.0412 5  0.8841  0.8846  0.8869 0.9875 0.9900 0.9905 #> indirect           0.3091 0.0356 5  0.0513  0.0520  0.0555 0.1373 0.1374 0.1375 #> direct             4.0532 0.1305 5 -0.1649 -0.1635 -0.1576 0.1279 0.1299 0.1303 #> total              0.9275 0.1637 5 -0.1136 -0.1115 -0.1021 0.2652 0.2673 0.2678  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) print(unstd) #> Monte Carlo Confidence Intervals (Multiple Imputation Estimates) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.1080 0.2202 5 -0.0399 -0.0330 -0.0021 0.5231 0.5296 0.5310 #> b                  0.5234 0.1310 5  0.3456  0.3469  0.3526 0.6420 0.6433 0.6436 #> a                  0.5281 0.1979 5  0.0325  0.0356  0.0496 0.5223 0.5295 0.5312 #> cond~~cond         0.2481 0.0229 5  0.2117  0.2121  0.2140 0.2685 0.2690 0.2692 #> reaction~~reaction 1.9501 0.2810 5  1.5453  1.5510  1.5762 2.2337 2.2428 2.2448 #> pmi~~pmi           1.7127 0.3034 5  1.3450  1.3492  1.3679 2.0915 2.1030 2.1055 #> indirect           0.2754 0.1174 5  0.0113  0.0135  0.0233 0.3210 0.3311 0.3334 #> direct             0.1080 0.2202 5 -0.0399 -0.0330 -0.0021 0.5231 0.5296 0.5310 #> total              0.3834 0.2505 5  0.1114  0.1177  0.1457 0.7351 0.7381 0.7388 print(std) #> Standardized Monte Carlo Confidence Intervals #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0385 0.0691 5 -0.0132 -0.0110 -0.0016 0.1597 0.1606 0.1608 #> b                  0.4652 0.0761 5  0.3307  0.3317  0.3362 0.5243 0.5315 0.5331 #> a                  0.1219 0.0696 5  0.0113  0.0127  0.0191 0.1879 0.1904 0.1909 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7778 0.0737 5  0.6804  0.6823  0.6906 0.8658 0.8670 0.8673 #> pmi~~pmi           0.9851 0.0143 5  0.9636  0.9637  0.9646 0.9991 0.9997 0.9999 #> indirect           0.0567 0.0356 5  0.0038  0.0044  0.0074 0.0980 0.1011 0.1018 #> direct             0.0385 0.0691 5 -0.0132 -0.0110 -0.0016 0.1597 0.1606 0.1608 #> total              0.0952 0.0748 5  0.0367  0.0386  0.0473 0.2228 0.2236 0.2237"},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Monte Carlo confidence intervals free defined parameters models fitted structural equation modeling package 'lavaan' can generated using 'semmcci' package. 'semmcci' three main functions, namely, MC(), MCMI(), MCStd(). output 'lavaan' passed first argument MC() function MCMI() function generate Monte Carlo confidence intervals. Monte Carlo confidence intervals standardized estimates can also generated passing output MC() function MCMI() function MCStd() function. description package code examples presented Pesigan Cheung (2023) doi:10.3758/s13428-023-02114-4 .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/reference/semmcci-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling — semmcci-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder] contributors: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) [contributor]","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class semmcci — summary.semmcci","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Summary Method Object Class semmcci","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"","code":"# S3 method for class 'semmcci' summary(object, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"object Object class semmcci. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used object. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/summary.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class semmcci — summary.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) summary(unstd) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.2758 0.2309 5  0.0487  0.0509  0.0606 0.5772 0.5833 0.5847 #> b                  0.5077 0.0907 5  0.3787  0.3793  0.3823 0.5844 0.5875 0.5882 #> a                  0.3362 0.3414 5 -0.1192 -0.1139 -0.0904 0.6700 0.6714 0.6717 #> cond~~cond         0.2448 0.0209 5  0.2044  0.2045  0.2048 0.2537 0.2552 0.2556 #> reaction~~reaction 1.8981 0.2880 5  1.5563  1.5594  1.5731 2.2139 2.2189 2.2200 #> pmi~~pmi           1.7406 0.3256 5  1.2691  1.2791  1.3235 2.1329 2.1532 2.1578 #> reaction~1         0.4989 0.6719 5 -0.1871 -0.1841 -0.1709 1.3508 1.4010 1.4123 #> pmi~1              5.4719 0.1467 5  5.3094  5.3111  5.3189 5.6405 5.6426 5.6431 #> cond~1             0.4334 0.0355 5  0.4021  0.4023  0.4031 0.4803 0.4810 0.4812 #> indirect           0.1707 0.1733 5 -0.0450 -0.0424 -0.0306 0.3666 0.3682 0.3685 #> direct             0.2758 0.2309 5  0.0487  0.0509  0.0606 0.5772 0.5833 0.5847 #> total              0.4465 0.3187 5  0.0042  0.0139  0.0567 0.7893 0.7959 0.7974 summary(std) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0882 0.0692 5  0.0144  0.0150  0.0181 0.1674 0.1678 0.1679 #> b                  0.4362 0.0991 5  0.2756  0.2777  0.2867 0.5153 0.5160 0.5162 #> a                  0.1251 0.1204 5 -0.0483 -0.0464 -0.0381 0.2318 0.2328 0.2331 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.7924 0.0879 5  0.7067  0.7069  0.7079 0.9117 0.9218 0.9241 #> pmi~~pmi           0.9844 0.0244 5  0.9457  0.9458  0.9463 0.9976 0.9976 0.9976 #> indirect           0.3224 0.0530 5 -0.0133 -0.0125 -0.0092 0.1124 0.1131 0.1133 #> direct             4.1150 0.0692 5  0.0144  0.0150  0.0181 0.1674 0.1678 0.1679 #> total              0.8761 0.0975 5  0.0013  0.0042  0.0174 0.2382 0.2384 0.2384  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) summary(unstd) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.2422 0.2558 5 -0.3065 -0.2995 -0.2687 0.3410 0.3467 0.3480 #> b                  0.5185 0.0942 5  0.4054  0.4072  0.4149 0.6534 0.6638 0.6662 #> a                  0.2893 0.2818 5  0.0032  0.0076  0.0270 0.6602 0.6671 0.6686 #> cond~~cond         0.2447 0.0369 5  0.1633  0.1644  0.1692 0.2541 0.2544 0.2545 #> reaction~~reaction 1.8824 0.3018 5  1.5497  1.5586  1.5980 2.2844 2.2880 2.2889 #> pmi~~pmi           1.7001 0.2032 5  1.5629  1.5689  1.5957 2.0675 2.0692 2.0695 #> indirect           0.1493 0.1626 5  0.0014  0.0035  0.0133 0.3796 0.3835 0.3843 #> direct             0.2422 0.2558 5 -0.3065 -0.2995 -0.2687 0.3410 0.3467 0.3480 #> total              0.3914 0.2073 5  0.0057  0.0106  0.0324 0.4914 0.4933 0.4937 summary(std) #>                       est     se R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> cp                 0.0430 0.0758 5 -0.0854 -0.0835 -0.0750 0.1064 0.1081 0.1085 #> b                  0.4251 0.0754 5  0.3517  0.3531  0.3592 0.5513 0.5594 0.5613 #> a                  0.0947 0.0925 5  0.0012  0.0027  0.0095 0.2237 0.2267 0.2274 #> cond~~cond         1.0000 0.0000 5  1.0000  1.0000  1.0000 1.0000 1.0000 1.0000 #> reaction~~reaction 0.8140 0.0682 5  0.6802  0.6820  0.6899 0.8625 0.8675 0.8686 #> pmi~~pmi           0.9910 0.0215 5  0.9483  0.9486  0.9498 0.9993 0.9999 1.0000 #> indirect           0.0403 0.0443 5  0.0004  0.0011  0.0041 0.1023 0.1028 0.1029 #> direct             0.0430 0.0758 5 -0.0854 -0.0835 -0.0750 0.1064 0.1081 0.1085 #> total              0.0833 0.0602 5  0.0016  0.0032  0.0101 0.1465 0.1468 0.1468"},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Sampling Covariance Matrix Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"","code":"# S3 method for class 'semmcci' vcov(object, ...)"},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"object Object class semmcci. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Returns matrix variance-covariance matrix parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/semmcci/reference/vcov.semmcci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling Covariance Matrix of the Parameter Estimates — vcov.semmcci","text":"","code":"library(semmcci) library(lavaan)  # Data --------------------------------------------------------------------- data(\"Tal.Or\", package = \"psych\") df <- mice::ampute(Tal.Or)$amp  # Monte Carlo -------------------------------------------------------------- ## Fit Model in lavaan ----------------------------------------------------- model <- \"   reaction ~ cp * cond + b * pmi   pmi ~ a * cond   cond ~~ cond   indirect := a * b   direct := cp   total := cp + (a * b) \" fit <- sem(data = df, model = model, missing = \"fiml\")  ## MC() -------------------------------------------------------------------- unstd <- MC(   fit,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) vcov(unstd) #>                              cp             b            a    cond~~cond #> cp                  0.189412867 -0.0201661034 -0.105874716  0.0018914450 #> b                  -0.020166103  0.0051756884  0.010167717 -0.0004900405 #> a                  -0.105874716  0.0101677167  0.065680362 -0.0025261264 #> cond~~cond          0.001891445 -0.0004900405 -0.002526126  0.0005089558 #> reaction~~reaction  0.024209184  0.0026983297 -0.018252788  0.0010471096 #> pmi~~pmi           -0.068116046 -0.0019916138  0.054289178 -0.0043045481 #> reaction~1         -0.001913324 -0.0197407454  0.003057042  0.0028425340 #> pmi~1               0.066445151  0.0038435480 -0.045338160  0.0006196522 #> cond~1              0.012477437 -0.0002641907 -0.008652428  0.0001974369 #> indirect           -0.063811737  0.0077592408  0.038664568 -0.0016268499 #> direct              0.189412867 -0.0201661034 -0.105874716  0.0018914450 #> total               0.125601130 -0.0124068625 -0.067210148  0.0002645950 #>                    reaction~~reaction     pmi~~pmi   reaction~1         pmi~1 #> cp                        0.024209184 -0.068116046 -0.001913324  0.0664451514 #> b                         0.002698330 -0.001991614 -0.019740745  0.0038435480 #> a                        -0.018252788  0.054289178  0.003057042 -0.0453381604 #> cond~~cond                0.001047110 -0.004304548  0.002842534  0.0006196522 #> reaction~~reaction        0.019682414 -0.043110128 -0.036773460  0.0284864684 #> pmi~~pmi                 -0.043110128  0.104950135  0.058973239 -0.0641536314 #> reaction~1               -0.036773460  0.058973239  0.138838031 -0.0682519208 #> pmi~1                     0.028486468 -0.064153631 -0.068251921  0.0657308960 #> cond~1                    0.002384292 -0.007091514 -0.004875861  0.0093649318 #> indirect                 -0.008356950  0.027758168 -0.008376085 -0.0211657205 #> direct                    0.024209184 -0.068116046 -0.001913324  0.0664451514 #> total                     0.015852234 -0.040357878 -0.010289409  0.0452794309 #>                           cond~1     indirect       direct        total #> cp                  0.0124774366 -0.063811737  0.189412867  0.125601130 #> b                  -0.0002641907  0.007759241 -0.020166103 -0.012406863 #> a                  -0.0086524280  0.038664568 -0.105874716 -0.067210148 #> cond~~cond          0.0001974369 -0.001626850  0.001891445  0.000264595 #> reaction~~reaction  0.0023842923 -0.008356950  0.024209184  0.015852234 #> pmi~~pmi           -0.0070915138  0.027758168 -0.068116046 -0.040357878 #> reaction~1         -0.0048758611 -0.008376085 -0.001913324 -0.010289409 #> pmi~1               0.0093649318 -0.021165720  0.066445151  0.045279431 #> cond~1              0.0019172457 -0.004478658  0.012477437  0.007998779 #> indirect           -0.0044786577  0.023663636 -0.063811737 -0.040148101 #> direct              0.0124774366 -0.063811737  0.189412867  0.125601130 #> total               0.0079987789 -0.040148101  0.125601130  0.085453028 vcov(std) #>                               cp             b             a    cond~~cond #> cp                  1.861647e-02 -9.938330e-03 -9.484349e-03 -9.430141e-18 #> b                  -9.938330e-03  6.214770e-03  4.949624e-03  1.554937e-18 #> a                  -9.484349e-03  4.949624e-03  5.086108e-03  3.144280e-18 #> cond~~cond         -9.430141e-18  1.554937e-18  3.144280e-18  4.005934e-32 #> reaction~~reaction  2.599593e-03 -2.200729e-03 -1.183921e-03  1.616947e-18 #> pmi~~pmi            3.742894e-03 -2.006258e-03 -1.974918e-03 -1.260463e-18 #> indirect           -6.146878e-03  3.429328e-03  3.192198e-03  1.884175e-18 #> direct              1.861647e-02 -9.938330e-03 -9.484349e-03 -9.430141e-18 #> total               1.246959e-02 -6.509002e-03 -6.292151e-03 -7.545966e-18 #>                    reaction~~reaction      pmi~~pmi      indirect        direct #> cp                       2.599593e-03  3.742894e-03 -6.146878e-03  1.861647e-02 #> b                       -2.200729e-03 -2.006258e-03  3.429328e-03 -9.938330e-03 #> a                       -1.183921e-03 -1.974918e-03  3.192198e-03 -9.484349e-03 #> cond~~cond               1.616947e-18 -1.260463e-18  1.884175e-18 -9.430141e-18 #> reaction~~reaction       1.104786e-03  5.188023e-04 -9.763171e-04  2.599593e-03 #> pmi~~pmi                 5.188023e-04  7.724733e-04 -1.259912e-03  3.742894e-03 #> indirect                -9.763171e-04 -1.259912e-03  2.079919e-03 -6.146878e-03 #> direct                   2.599593e-03  3.742894e-03 -6.146878e-03  1.861647e-02 #> total                    1.623276e-03  2.482982e-03 -4.066959e-03  1.246959e-02 #>                            total #> cp                  1.246959e-02 #> b                  -6.509002e-03 #> a                  -6.292151e-03 #> cond~~cond         -7.545966e-18 #> reaction~~reaction  1.623276e-03 #> pmi~~pmi            2.482982e-03 #> indirect           -4.066959e-03 #> direct              1.246959e-02 #> total               8.402632e-03  # Monte Carlo (Multiple Imputation) ---------------------------------------- ## Multiple Imputation ----------------------------------------------------- mi <- mice::mice(   data = df,   print = FALSE,   m = 5L, # use a large value e.g., 100L for actual research,   seed = 42 )  ## Fit Model in lavaan ----------------------------------------------------- fit <- sem(data = df, model = model) # use default listwise deletion  ## MCMI() ------------------------------------------------------------------ unstd <- MCMI(   fit,   mi = mi,   R = 5L # use a large value e.g., 20000L for actual research )  ## Standardized Monte Carlo ------------------------------------------------ std <- MCStd(unstd) vcov(unstd) #>                             cp            b            a    cond~~cond #> cp                  0.19824306 -0.023224591 -0.058474417  3.854210e-03 #> b                  -0.02322459  0.007103259  0.007620643 -1.265326e-03 #> a                  -0.05847442  0.007620643  0.054111301  1.641724e-03 #> cond~~cond          0.00385421 -0.001265326  0.001641724  1.018456e-03 #> reaction~~reaction  0.01339789 -0.011920203 -0.004130997  2.126594e-03 #> pmi~~pmi            0.06673858 -0.001175363 -0.037525098 -6.139089e-06 #> indirect           -0.04336124  0.008991951  0.033165032 -2.025588e-04 #> direct              0.19824306 -0.023224591 -0.058474417  3.854210e-03 #> total               0.15488182 -0.014232640 -0.025309385  3.651651e-03 #>                    reaction~~reaction      pmi~~pmi      indirect      direct #> cp                        0.013397888  6.673858e-02 -0.0433612407  0.19824306 #> b                        -0.011920203 -1.175363e-03  0.0089919515 -0.02322459 #> a                        -0.004130997 -3.752510e-02  0.0331650321 -0.05847442 #> cond~~cond                0.002126594 -6.139089e-06 -0.0002025588  0.00385421 #> reaction~~reaction        0.025487169 -1.250844e-02 -0.0112247692  0.01339789 #> pmi~~pmi                 -0.012508440  4.608694e-02 -0.0193686877  0.06673858 #> indirect                 -0.011224769 -1.936869e-02  0.0236004884 -0.04336124 #> direct                    0.013397888  6.673858e-02 -0.0433612407  0.19824306 #> total                     0.002173118  4.736989e-02 -0.0197607523  0.15488182 #>                           total #> cp                  0.154881818 #> b                  -0.014232640 #> a                  -0.025309385 #> cond~~cond          0.003651651 #> reaction~~reaction  0.002173118 #> pmi~~pmi            0.047369889 #> indirect           -0.019760752 #> direct              0.154881818 #> total               0.135121066 vcov(std) #>                               cp             b             a    cond~~cond #> cp                  1.897379e-02 -5.961969e-03 -7.127563e-03  2.312768e-18 #> b                  -5.961969e-03  6.523518e-03  1.115276e-03 -5.191728e-18 #> a                  -7.127563e-03  1.115276e-03  9.961739e-03 -9.254732e-18 #> cond~~cond          2.312768e-18 -5.191728e-18 -9.254732e-18  2.773339e-32 #> reaction~~reaction -3.909791e-03 -3.299018e-03  2.322143e-03  3.886923e-18 #> pmi~~pmi            4.127847e-03 -1.560547e-04 -5.780678e-03  4.633357e-18 #> indirect           -4.245427e-03  2.126933e-03  4.504986e-03 -5.274724e-18 #> direct              1.897379e-02 -5.961969e-03 -7.127563e-03  2.312768e-18 #> total               1.472836e-02 -3.835036e-03 -2.622578e-03 -2.961956e-18 #>                    reaction~~reaction      pmi~~pmi      indirect        direct #> cp                      -3.909791e-03  4.127847e-03 -4.245427e-03  1.897379e-02 #> b                       -3.299018e-03 -1.560547e-04  2.126933e-03 -5.961969e-03 #> a                        2.322143e-03 -5.780678e-03  4.504986e-03 -7.127563e-03 #> cond~~cond               3.886923e-18  4.633357e-18 -5.274724e-18  2.312768e-18 #> reaction~~reaction       5.241965e-03 -1.818317e-03 -1.616393e-05 -3.909791e-03 #> pmi~~pmi                -1.818317e-03  3.410253e-03 -2.482567e-03  4.127847e-03 #> indirect                -1.616393e-05 -2.482567e-03  2.464793e-03 -4.245427e-03 #> direct                  -3.909791e-03  4.127847e-03 -4.245427e-03  1.897379e-02 #> total                   -3.925955e-03  1.645280e-03 -1.780634e-03  1.472836e-02 #>                            total #> cp                  1.472836e-02 #> b                  -3.835036e-03 #> a                  -2.622578e-03 #> cond~~cond         -2.961956e-18 #> reaction~~reaction -3.925955e-03 #> pmi~~pmi            1.645280e-03 #> indirect           -1.780634e-03 #> direct              1.472836e-02 #> total               1.294773e-02"},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-5","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.5","text":"Minor edits tests.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-114","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.4","title":"semmcci 1.1.4","text":"CRAN release: 2024-03-17","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.4","text":"Added Func() MCFunc() functions.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-113","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.3","title":"semmcci 1.1.3","text":"CRAN release: 2023-10-14","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.3","text":"Minor edits setting seed. Added MCGeneric() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-112","dir":"Changelog","previous_headings":"","what":"semmcci 1.1.2","title":"semmcci 1.1.2","text":"CRAN release: 2023-08-12","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.2","text":"Addressed M1Mac CRAN build issues.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-1-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.1.1","text":"Minor documentation edits.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"minor-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor","title":"semmcci 1.1.0","text":"Added MCMI() function.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-104","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.4","title":"semmcci 1.0.4","text":"CRAN release: 2022-12-17","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.4","text":"Minor refactoring data generation functions.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-103","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.3","title":"semmcci 1.0.3","text":"CRAN release: 2022-10-16","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.3","text":"Added decomposition, pd, tol arguments MC().","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-102","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.2","title":"semmcci 1.0.2","text":"CRAN release: 2022-10-04","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.2","text":"Random variates multivatiate normal distribution generated using Cholesky decomposition sampling variance-covariance matrix. Eigen decomposition used Cholesky decomposition fails. NA returned calculation defined parameter fails MC(). NA returned standardization fails MCStd(). Added methods.","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"semmcci-101","dir":"Changelog","previous_headings":"","what":"semmcci 1.0.1","title":"semmcci 1.0.1","text":"CRAN release: 2022-09-13","code":""},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"patch-1-0-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"semmcci 1.0.1","text":"Initial CRAN release.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/semmcci/news/index.html","id":"major-1-0-0","dir":"Changelog","previous_headings":"","what":"Major","title":"semmcci 1.0.0","text":"Initial CRAN submission.","code":""}]

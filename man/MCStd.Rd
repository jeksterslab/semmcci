% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semmcci-mc-std.R
\name{MCStd}
\alias{MCStd}
\title{Standardized Monte Carlo Confidence Intervals}
\usage{
MCStd(object, alpha = c(0.001, 0.01, 0.05))
}
\arguments{
\item{object}{object of class \code{semmcci}.
Output of the \code{\link[=MC]{MC()}} function.}

\item{alpha}{Numeric vector.
Significance level \eqn{\alpha}.}
}
\value{
Returns an object of class \code{semmccistd} which is
a list with the following elements:
\describe{
\item{\code{R}}{Number of Monte Carlo replications.}
\item{\code{alpha}}{Significance level \eqn{\alpha} specified.}
\item{\code{lavaan}}{\code{lavaan} object.}
\item{\code{decomposition}}{Matrix decomposition
used to generate multivariate normal
random variates.}
\item{\code{thetahat}}{Parameter estimates \eqn{\hat{\theta}}.}
\item{\code{thetahatstar}}{Sampling distribution of parameter estimates
\eqn{\hat{\theta}^{\ast}}.}
\item{\code{ci}}{Confidence intervals.}
\item{\code{thetahat_std}}{Standardized parameter estimates
\eqn{\hat{\theta}_{\mathrm{std}}}.}
\item{\code{thetahatstar_std}}{Standardized sampling distribution
of parameter estimates
\eqn{\hat{\theta}^{\ast}_{\mathrm{std}}}.}
}
}
\description{
Calculates standardized Monte Carlo confidence intervals
for free and defined parameters.
}
\details{
The empirical sampling distribution
of parameter estimates from the argument \code{object} is standardized,
that is, each randomly generated vector of parameters is standardized.
Defined parameters are computed from the standardized component parameters.
Confidence intervals are generated
using the standardized empirical sampling distribution.
}
\examples{
library(semmcci)
library(lavaan)

# MC() ---------------------------------------------------------------------
# Data ---------------------------------------------------------------------
data("Tal.Or", package = "psych")
df <- Tal.Or

# Fit Model in lavaan ------------------------------------------------------
model <- "
  reaction ~ cp * cond + b * pmi
  pmi ~ a * cond
  indirect := a * b
  direct := cp
  total := cp + (a * b)
"

fit_complete_data <- sem(data = df, model = model, fixed.x = FALSE)

# Monte Carlo --------------------------------------------------------------
complete_data <- MC(
  fit_complete_data,
  R = 100L, # use a large value e.g., 20000L for actual research
  alpha = 0.05
)

# Standardized Monte Carlo -------------------------------------------------
MCStd(complete_data, alpha = 0.05)

# MCMI() -------------------------------------------------------------------
# Data ---------------------------------------------------------------------
df <- mice::ampute(Tal.Or)$amp

# Fit Model in lavaan ------------------------------------------------------
fit_missing_data <- sem(data = df, model = model, fixed.x = FALSE)

# Monte Carlo --------------------------------------------------------------
missing_data <- MC(
  fit_missing_data,
  R = 100L, # use a large value e.g., 20000L for actual research
  alpha = 0.05
)

# Standardized Monte Carlo -------------------------------------------------
MCStd(missing_data, alpha = 0.05)

}
\references{
Pesigan, I. J. A., & Cheung, S. F. (2023).
Monte Carlo confidence intervals for the indirect effect with missing data.
\emph{Behavior Research Methods}.
\doi{10.3758/s13428-023-02114-4}
}
\seealso{
Other Monte Carlo in Structural Equation Modeling Functions: 
\code{\link{MCMI}()},
\code{\link{MC}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{Monte Carlo in Structural Equation Modeling Functions}
\keyword{mc}
\keyword{semmcci}

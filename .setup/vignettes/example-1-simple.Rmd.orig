---
title: "Example 1: The Simple Mediation Model"
author: "Ivan Jacob Agaloos Pesigan"
date: "`r Sys.Date()`"
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @Pesigan-Cheung-2023
output:
  rmarkdown::html_vignette:
    toc: true
vignette: >
  %\VignetteIndexEntry{Example 1: The Simple Mediation Model}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

<!-- vignettes/example-1-simple.Rmd is generated from .setup/vignettes/example-1-simple.Rmd.orig. Please edit that file -->

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r}
#| include = FALSE
set.seed(42)
```

In this example,
the Monte Carlo method is used to generate confidence intervals
for the indirect effect in a simple mediation model where
variable `X` has an effect on variable `Y`,
through a mediating variable `M`.
This mediating or indirect effect
is a product of path coefficients from the fitted model.

![The Simple Mediation Model](https://raw.githubusercontent.com/jeksterslab/semmcci/main/.setup/latex/figures/png/simple.png)

```{r}
#| message = FALSE
library(semmcci)
library(lavaan)
```

## Data

```{r}
#| echo = FALSE
n <- 1000
a <- 0.50
b <- 0.50
cp <- 0.25
s2_em <- 1 - a^2
s2_ey <- 1 - cp^2 - a^2 * b^2 - b^2 * s2_em - 2 * cp * a * b
em <- rnorm(n = n, mean = 0, sd = sqrt(s2_em))
ey <- rnorm(n = n, mean = 0, sd = sqrt(s2_ey))
X <- rnorm(n = n)
M <- a * X + em
Y <- cp * X + b * M + ey
df <- data.frame(X, M, Y)
```

```{r}
summary(df)
colMeans(df)
var(df)
```

## Model Specification

The indirect effect is defined by the product of the slopes
of paths `X` to `M` labeled as `a` and `M` to `Y` labeled as `b`.
In this example, we are interested in the confidence intervals of `indirect`
defined as the product of `a` and `b` using the `:=` operator
in the `lavaan` model syntax.

```{r}
model <- "
  Y ~ cp * X + b * M
  M ~ a * X
  indirect := a * b
  direct := cp
  total := cp + (a * b)
"
```

## Model Fitting

We can now fit the model using the `sem()` function from `lavaan`.

```{r}
fit <- sem(data = df, model = model)
```

## Monte Carlo Confidence Intervals

The `fit` `lavaan` object can then be passed to the `MC()` function
to generate Monte Carlo confidence intervals.

```{r}
MC(fit, R = 20000L, alpha = 0.05)
```

## Standardized Monte Carlo Confidence Intervals

Standardized Monte Carlo Confidence intervals can be generated by passing the result of the `MC()` function to the `MCStd()` function.

> **Note:** We recommend setting `fixed.x = FALSE`
> when generating standardized estimates and confidence intervals
> to model the variances and covariances of the exogenous observed variables
> if they are assumed to be random.
> If `fixed.x = TRUE`, which is the default setting in `lavaan`,
> `MC()` will fix the variances and the covariances
> of the exogenous observed variables to the sample values.

```{r}
fit <- sem(data = df, model = model, fixed.x = FALSE)
unstd <- MC(fit, R = 20000L, alpha = 0.05)
```

```{r}
MCStd(unstd, alpha = 0.05)
```

## Standardized Monte Carlo Confidence Intervals - An Alternative Approach

In this example, confidence intervals for the standardized indirect effect
are generated by specifying the standardized indirect effect
as a derived parameter using the `:=` operator.
The standardized indirect effect in a simple mediation model
involves paths $a$ and $b$,
and the standard deviations of $X$ and $Y$.
It is given by

$$
  a b
  \frac{s_X}{s_Y}
$$

\noindent where

$$
  s_X
  =
  \sqrt{
    s_{X}^{2}
  }
$$

\noindent and

$$
  s_Y
  =
  \sqrt{
    c^{\prime 2} s_{X}^{2}
    + a^2 b^2 s_{X}^{2}
    + b^2 s_{e_{M}}^{2}
    + 2 c^{\prime} b a s_{X}^{2}
    + s_{e_{Y}}^{2}
  }
$$

\noindent where

\noindent $s_{e_{Y}}^{2}$ and $s_{e_{M}}^{2}$ are the residual variances
in the regression equations.

The standardized indirect effect can be defined using the `:=` operator
and the named parameters in the model.

```{r}
model <- "
  Y ~ cp * X + b * M
  M ~ a * X
  X ~~ s2_X * X
  M ~~ s2_em * M
  Y ~~ s2_ey * Y
  indirect_std := a * b * (
    sqrt(s2_X) / sqrt(
      (
        cp^2 * s2_X + a^2 * b^2 * s2_X
      ) + (
        b^2 * s2_em
      ) + (
        2 * cp * b * a * s2_X
      ) + s2_ey
    )
  )
"
```

```{r}
fit <- sem(data = df, model = model, fixed.x = FALSE)
```

The row `indirect_std` corresponds to the confidence intervals for the standardized indirect effect.

```{r}
MC(fit, R = 20000L, alpha = 0.05)
```

## References

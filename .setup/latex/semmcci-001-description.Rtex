\documentclass{article}

\input{.setup/latex/preamble/preamble}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BIBLATEX APA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%% begin.rcode
% #| label = "root",
% #| include = FALSE
% root <- rprojroot::is_rstudio_project
%% end.rcode

%% begin.rcode
% #| label = "knitr",
% #| include = FALSE,
% #| file = root$find_file(
% #|   ".setup",
% #|   "latex",
% #|   "r-scripts",
% #|   "knitr.R"
% #| )
%% end.rcode

%% begin.rcode
% #| label = "biblatex",
% #| echo = FALSE,
% #| message = FALSE,
% #| warning = FALSE,
% #| results = "asis"
% if (require("rProject")) {
%   Bib(
%     path = dirname(
%       root$find_file(
%         "project.Rproj"
%       )
%     )
%   )
%   cat(
%     .PreambleBiblatex(
%       path = root$find_file(
%         ".setup",
%         "latex",
%         "bib"
%       )
%     )
%   )
% } else {
%   cat(
%     .PreambleBiblatexCombined(
%       path = root$find_file(
%         ".setup",
%         "latex",
%         "bib"
%       ),
%       output_path = root$find_file(
%         ".setup",
%         "latex"
%       )
%     )
%   )
% }
%% end.rcode
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{semmcci: Monte Carlo Confidence Intervals}
\author{Ivan Jacob Agaloos Pesigan}
\date{}

\begin{document}

\maketitle

\section*{Installation}

You can install the CRAN release of \texttt{semmcci} with:

%% begin.rcode
% #| eval = FALSE
% install.packages("semmcci")
%% end.rcode

You can install the development version of \texttt{semmcci} from
\href{https://github.com/jeksterslab/semmcci}{GitHub}
with:

%% begin.rcode
% #| eval = FALSE
% if (!require("remotes")) install.packages("remotes")
% remotes::install_github("jeksterslab/semmcci")
%% end.rcode

\section*{Documentation}

See
\href{https://jeksterslab.github.io/semmcci/index.html}{GitHub Pages}
for package documentation.

\section*{Description}

In the Monte Carlo method, a sampling distribution of parameter
estimates is generated from the multivariate normal distribution using
the parameter estimates and the sampling variance-covariance matrix.
Confidence intervals for defined parameters are generated by obtaining
percentiles corresponding to $100(1 - \alpha)\%$ from the generated sampling
distribution, where $\alpha$ is the significance level.

Monte Carlo confidence intervals for free and defined parameters in
models fitted in the structural equation modeling package \texttt{lavaan} can
be generated using the \texttt{semmcci} package. The package has two main
functions, namely, \texttt{MC()} and \texttt{MCStd()}. The output of \texttt{lavaan} is
passed as the first argument to the \texttt{MC()} function to generate Monte
Carlo confidence intervals. Monte Carlo confidence intervals for the
standardized estimates can also be generated by passing the output of
the \texttt{MC()} function to the \texttt{MCStd()} function.
A description of the package and code examples
are presented in \Textcite{Pesigan-Cheung-2023}.

\section*{Example}

A common application of the Monte Carlo method
is to generate confidence intervals for the indirect effect.
In the simple mediation model,
variable \texttt{X} has an effect on variable \texttt{Y},
through a mediating variable \texttt{M}.
This mediating or indirect effect
is a product of path coefficients from the fitted model.

%% begin.rcode
% #| message = FALSE
% library(semmcci)
% library(lavaan)
%% end.rcode

\subsection*{Data}

%% begin.rcode
% n <- 1000
% X <- rnorm(n = n)
% M <- 0.50 * X + rnorm(n = n)
% Y <- 0.25 * X + 0.50 * M + rnorm(n = n)
% data <- data.frame(X, M, Y)
%% end.rcode

\subsection*{Model Specification}

The indirect effect is defined by the product of the slopes
of paths \texttt{X} to \texttt{M} labeled as \texttt{a} and \texttt{M} to \texttt{Y} labeled as \texttt{b}.
In this example, we are interested in the confidence intervals of \texttt{indirect}
defined as the product of \texttt{a} and \texttt{b} using the \texttt{:=} operator
in the \texttt{lavaan} model syntax.

%% begin.rcode
% model <- "
%   Y ~ cp * X + b * M
%   M ~ a * X
%   indirect := a * b
%   direct := cp
%   total := cp + (a * b)
% "
%% end.rcode

\subsection*{Model Fitting}

We can now fit the model using the \texttt{sem()} function from \texttt{lavaan}.

%% begin.rcode
% fit <- sem(data = data, model = model)
%% end.rcode

\subsection*{Monte Carlo Confidence Intervals}

The \texttt{fit} \texttt{lavaan} object can then be passed to the \texttt{MC()} function
to generate Monte Carlo confidence intervals.

%% begin.rcode
% MC(fit, R = 20000L, alpha = 0.05)
%% end.rcode

\subsection*{Standardized Monte Carlo Confidence Intervals}

Standardized Monte Carlo Confidence intervals can be generated by passing the result of the \texttt{MC()} function to \texttt{MCStd()}.

\textbf{Note:} We recommend setting \texttt{fixed.x = FALSE} when generating standardized estimates and confidence intervals to model the variances and covariances of the predictors if they are assumed to be random.

%% begin.rcode
% fit <- sem(data = data, model = model, fixed.x = FALSE)
% unstd <- MC(fit, R = 20000L, alpha = 0.05)
% vcov(unstd)
%% end.rcode

%% begin.rcode
% MCStd(unstd)
%% end.rcode

\nocite{RCoreTeam-2023}

\nocite{MacKinnon-Lockwood-Williams-2004}

\nocite{Preacher-Selig-2012}

\nocite{Tofighi-Kelley-2019}

\nocite{Tofighi-MacKinnon-2015}

\printbibliography

\end{document}
